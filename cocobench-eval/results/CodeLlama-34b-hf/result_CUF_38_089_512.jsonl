{"task_id": "cpp/0", "content": "\nOutput format\nOutput one line containing the deduced output of the code snippet.\n\nSample Input 1\n{'s': 'aabcbbca'}\nSample Output 1\nccba", "groundtruth": "ba"}
{"task_id": "cpp/1", "content": "\nAssume the code snippet has been properly implemented. The output for the given input should be:\n3\nYou may assume the following about the function parameter:\n\nThe argument 'nums' is not null and the values in nums are in the range [0, 100].\n0 <= nums.length <= 100", "groundtruth": "2"}
{"task_id": "cpp/2", "content": "", "groundtruth": "1"}
{"task_id": "cpp/3", "content": "\n\n\n", "groundtruth": "3"}
{"task_id": "cpp/4", "content": "\n \n\nYour output is:\n\n\n10\n\n\n\n\nExplanation\n\n\nSince pa and papa have a common prefix pa and common suffix pa, 1 pair can be formed, thus 1 is added to ans.\nSince pa and papa have a common prefix pa and common suffix pa, 1 pair can be formed, thus 1 is added to ans.\nSince pa and mama have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince pa and ma have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince papa and mama have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince papa and ma have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince pa and mama have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince papa and ma have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince ma and mama have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\nSince ma and papa have no common prefix and suffix, 0 pairs can be formed, thus 0 is added to ans.\n\n\n", "groundtruth": "2"}
{"task_id": "cpp/5", "content": "", "groundtruth": "97"}
{"task_id": "cpp/6", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "2"}
{"task_id": "cpp/7", "content": "\nYour Task:\nComplete the function largestSquareArea() which takes bottomLeft and topRight as input parameters and returns the largest square area. \n\nExpected Time Complexity:O(N*N).\nExpected Auxiliary Space:O(1).\n\nConstraints:\n0 ≤ N ≤ 10^4\n\nExample:\nInput:\nN = 2\nbottomLeft = [[1, 1], [2, 2]]\ntopRight = [[2, 2], [3, 3]]\nOutput: 4\nExplanation: The 2x2 square whose bottom-left corner is (1, 1) and top-right corner is (2, 2) will have the largest area.\n", "groundtruth": "1"}
{"task_id": "cpp/8", "content": "\nThe correct answer is: 5\n\nExplanation:\nWe can mark the first 5 elements of the array using 5 elements of changeIndices.\n", "groundtruth": "6"}
{"task_id": "cpp/9", "content": "\nAnswer:\n\n3", "groundtruth": "7"}
{"task_id": "cpp/10", "content": "\nYour input format :\nYou will be given an integer k as an input parameter.\nYou will be given a two dimensional array grid as input parameters.\nThe output should be of type int.\n\nAssumptions:\n\n\nThe solution will not exceed the range of integer.\n\n\n\n\nhttps://practice.geeksforgeeks.org/problems/sub-matrices-with-all-1s-1587115620/1\n", "groundtruth": "6"}
{"task_id": "cpp/11", "content": "\nThe code snippet gives an integer output.\n\nExplanation\nYou can deduce the output as 13, by understanding the code snippet.\n", "groundtruth": "12"}
{"task_id": "cpp/12", "content": "\nAnswer \n{'resultArray': [1, 3, 5, 2, 14]}", "groundtruth": "[5,3,1,2,14]"}
{"task_id": "cpp/13", "content": "\nThe answer is:\n\n3\n", "groundtruth": "1"}
{"task_id": "cpp/14", "content": "\nIf the answer is:\n['abc', 'bcd', 'abcd']\nThen output the following:\n['abc', 'bcd', 'abcd']", "groundtruth": "[\"\",\"\",\"abcd\"]"}
{"task_id": "cpp/15", "content": "\n", "groundtruth": "64"}
{"task_id": "cpp/16", "content": "\nPlease include your explanation as to why your output is correct. If a test case fails or your code snippet does not compile, do not submit your answer.\n\n", "groundtruth": "[7]"}
{"task_id": "cpp/17", "content": "\n", "groundtruth": "abac"}
{"task_id": "cpp/18", "content": "\n\n\nAnswer \n\n27\n\n\n\n\n", "groundtruth": "6"}
{"task_id": "cpp/19", "content": "\nAnswer \n4", "groundtruth": "6"}
{"task_id": "cpp/20", "content": "\nAnswer \n\n3", "groundtruth": "2"}
{"task_id": "numpy/0", "content": "\n", "groundtruth": "[[1, 3, 5], [2, 4, 6]]"}
{"task_id": "numpy/1", "content": "\n[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]", "groundtruth": "([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])"}
{"task_id": "numpy/2", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "[[[1, 5], [3, 7]], [[2, 6], [4, 8]]]"}
{"task_id": "numpy/4", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "40320"}
{"task_id": "numpy/5", "content": "\n# 1 marks\n\n# Answer\n1.14e-05, 1.42e-04, 1.74e-03, 2.22e-02, 3.02e-01\n\n\n# Dummy codes to make WeBWorK happy\nif False:\n    create_exp_rounded(0,1,5)\n\n", "groundtruth": "[1.00, 1.47, 2.15, 3.14, 4.54]"}
{"task_id": "numpy/6", "content": "\n\nAnswer \n\n[[1 4]\n [2 5]\n [3 6]]", "groundtruth": "[[1, 3, 5], [2, 4, 6]]"}
{"task_id": "numpy/7", "content": "\nYour code\n\nimport numpy as np\ndef stack_and_split(arr1, arr2):\n    stacked_arr = np.hstack((arr1, arr2))\n    split_arr1, split_arr2 = np.split(stacked_arr, 2, axis=1)\n    return (split_arr1, split_arr2)\nprint(stack_and_split([[1, 2], [3, 4]], [[5, 6], [7, 8]]))\n", "groundtruth": "([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])"}
{"task_id": "numpy/8", "content": "\nYou can assume that the output is of order O(n).\n\nYour answer will be in the form of a list of lists of integers (in any order). For example: [[1, 2, 3], [3, 4, 5], [6, 7, 8]].\n\nOutput Format\nA list of lists of integers.\n\nConstraints\nThe array arr contains integer values only.\n\nSample Input 0\n[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\nSample Output 0\n[[1, 2, 3, 4], [5, 6, 7, 8]]\n", "groundtruth": "[[[1, 5], [3, 7]], [[2, 6], [4, 8]]]"}
{"task_id": "numpy/9", "content": "\n[ans]:\n[19, 27, 35]\n", "groundtruth": "[-21, -7, 7]"}
{"task_id": "numpy/10", "content": "\nAnswer \n\n-95\n\n\n\n", "groundtruth": "102"}
{"task_id": "numpy/11", "content": "\n\ndef det_and_inv(matrix):\n    determinant = np.linalg.det(matrix)\n    if determinant == 0:\n        return 'Matrix is singular, cannot compute inverse.'\n    else:\n        inverse = np.linalg.inv(matrix)\n        return determinant, inverse\n\n", "groundtruth": "(-2.0, [[-3.5, 3.0], [2.0, -1.0]])"}
{"task_id": "numpy/12", "content": "\nAnswer \n-24\n\n\n# Python program to illustrate \n# to find determinant of a \n# matrix using numpy library \n  \nimport numpy as np \n  \na = np.array([[1,2], [3,4]]) \nprint(\"The determinant of the matrix is :\", \n       np.linalg.det(a)) \n", "groundtruth": "16.0"}
{"task_id": "numpy/13", "content": "\nThe output of the code snippet is:\n(4.5, 7.5)\n'''\n", "groundtruth": "(4.0, 7.5)"}
{"task_id": "numpy/14", "content": "", "groundtruth": "(1, 9, 2, 5, [4, 8, --, 7, --, 9, --])"}
{"task_id": "numpy/15", "content": "\nOutput:\n5.5, 12.5\n", "groundtruth": "(1.0, 15.0)"}
{"task_id": "numpy/16", "content": "\n\ndef filter_between(arr, min_val, max_val):\n    filtered_arr = arr[np.logical_and(arr > min_val, arr < max_val)]\n    return filtered_arr\n\ndef print_array_elements(arr):\n    filtered_arr = []\n    for a in arr:\n        filtered_arr.append(a)\n\n    print(*filtered_arr, sep=\"\\n\")\n\n\nprint_array_elements(filter_between([[1, 2, 3, 4, 5, 6], 2, 5]))\n", "groundtruth": "[3, 4]"}
{"task_id": "numpy/17", "content": "\nAnswer \n[[-1, -1, -1, 9, -1, -1], [3 3 9]]\n\n\n", "groundtruth": "([-1, 6, -1, 9, -1, 6], [6, 9, 6])"}
{"task_id": "numpy/18", "content": "\n\n2\n", "groundtruth": "True"}
{"task_id": "numpy/19", "content": "\nAnswer \n\n[4.6467, 6.5903, 4.4639, 7.4833, 3.3606, 1.0235]\n\n", "groundtruth": "[2.0, 6.0, 4.0, 7.0, 3.0, 1.0]"}
{"task_id": "numpy/20", "content": "", "groundtruth": "[[2.0, 6.0, 4.0], [7.0, 3.0, 1.0], [5.0, 8.0, 9.0]]"}
{"task_id": "numpy/21", "content": "\nOutput\n\n[[6, 7, 4, 3]]\n\n", "groundtruth": "[0.0, 6.0, 0.0, 7.0, 0.0, 0.0]"}
{"task_id": "numpy/22", "content": "\nAnswer \n{'max_index': 3, 'min_index': 5, 'sorted_array': array([1, 2, 3, 4, 6, 7])}\n\n\n\n", "groundtruth": "{'sorted_array': [1, 2, 3, 4, 6, 7], 'max_index': 5, 'min_index': 0}"}
{"task_id": "numpy/23", "content": "\nAnswer \n{'sorted_array': array([[0, 0, 0],\n                        [1, 3, 4],\n                        [5, 6, 7]]), 'non_zero_positions': (array([1, 2]), array([1, 2]))}\n", "groundtruth": "{'sorted_array': [[0, 0, 0], [5, 3, 1], [7, 6, 4]], 'non_zero_positions': ([1, 1, 1, 2, 2, 2], [0, 1, 2, 0, 1, 2])}"}
{"task_id": "numpy/24", "content": "\nAnswer\n{'insert_index_for_value': 2, 'sorted_array': array([1, 2, 3, 4, 5, 6, 7])}\n\n", "groundtruth": "{'sorted_array': [1, 2, 3, 4, 6, 7], 'insert_index_for_value': 4}"}
{"task_id": "numpy/25", "content": "\n\n\n", "groundtruth": "[2.0, 2.5, 3.8, 4.9, 5.0]"}
{"task_id": "numpy/26", "content": "\n\n\n\n", "groundtruth": "5"}
{"task_id": "numpy/27", "content": "", "groundtruth": "4.7"}
{"task_id": "java/0", "content": "Your submission will run against multiple test cases. If you fail to deduce the output for one of the test cases, you will get a 'wrong answer' verdict.", "groundtruth": "[0,1]"}
{"task_id": "java/1", "content": "\n\n\n\nSolution:-\n[0, 1]\n", "groundtruth": "[0,1]"}
{"task_id": "java/2", "content": "", "groundtruth": "[0,1]"}
{"task_id": "java/3", "content": "\nExample 1:\n\nInput:\n[1,3,-1,-3,5,3,6,7]\n3\n\nOutput:\n[3,3,5,5,6,7]\nExplanation: \n\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n \n\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4\n1 <= k <= nums.length\n\n\n", "groundtruth": "[3,3,5,5,6,7]"}
{"task_id": "java/4", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "48"}
{"task_id": "java/5", "content": "\n\n\n\n\n\nclass Solution {\n    public int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {\n        // Write your code here\n        if(a==e || b==f){\n            if(a==c){\n                if((d>b && d<f) || (d>f && d<b))return 2;\n            }if(b==d){\n                if((c>a && c<e) || (c>e && c<a))return 2;\n            }\n            return 1;\n        }\n        else if(Math.abs(c-e)==Math.abs(d-f)){\n            if(Math.abs(a-c)==Math.abs(b-d) && Math.abs(e-a)==Math.abs(f-b)){\n                if((a>e && a<c) || (a>c && a<e)){\n                    return 2;\n                }\n            }\n            return 1;\n        }\n        return 2;\n    }\n}\n", "groundtruth": "2"}
{"task_id": "java/6", "content": "\nAnswer \n\n1\n", "groundtruth": "2"}
{"task_id": "java/7", "content": "\n```python\nclass Solution:\n    def removeDuplicates(self, nums):\n        # Fill this in.\n\n# Note: Try to solve this in-place without making a copy of the array.\n#       Note that even in-place you are still allowed to make another array. \n#       You just can't add elements to nums.\n\n# Note: O(n^2) is acceptable in this case.\n\n\n# Here is the solution to the problem:\ndef removeDuplicates(self, nums):\n        i = 0\n        for n in nums:\n            if i < 1 or n > nums[i-1]:\n                nums[i] = n\n                i += 1\n        return i\n```\n", "groundtruth": "4"}
{"task_id": "java/8", "content": "\nAnswer \n2\n", "groundtruth": "5"}
{"task_id": "java/9", "content": "\nPlease enter your answer in this form: [[answer1], [answer2], ...]\n", "groundtruth": "[0]"}
{"task_id": "java/10", "content": "", "groundtruth": "12"}
{"task_id": "java/11", "content": "\nSolution\n\nfalse\n\n", "groundtruth": "false"}
{"task_id": "java/12", "content": "\nInput Format:\nThe first line of input is an integer N. \nThe next line contains N space separated integers which constitute the array v.\n\nOutput Format:\nThe output is the integer output of the code snippet.\n\nSample Input:\n5\n5 5 5 10 5\n\nSample Output:\n1\n\nExplanation:\nWhen the input array is [5, 5, 5, 10, 5], the answer is 1.\n\n", "groundtruth": "2"}
{"task_id": "java/13", "content": "\nAns :\n[0,0,4,2,1,2]\n\n", "groundtruth": "[10,8,2,0,0]"}
{"task_id": "java/14", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "11"}
{"task_id": "java/15", "content": "\nYour Answer: 3\nExplanation:\n\n", "groundtruth": "1"}
{"task_id": "java/16", "content": "\nOutput\n\n[1, 1, 2, 2, 3, 3]\n", "groundtruth": "2"}
{"task_id": "java/17", "content": "", "groundtruth": "scalene"}
{"task_id": "java/18", "content": "\n\n", "groundtruth": "1"}
{"task_id": "java/19", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "[[25,25,25],[27,27,27],[27,27,27],[30,30,30]]"}
{"task_id": "java/20", "content": "\nYour Code: \n\n", "groundtruth": "4"}
{"task_id": "java/21", "content": "", "groundtruth": "[[1,2,9],[4,8,6],[7,8,9]]"}
{"task_id": "java/22", "content": "\nAnswer:\n\n1\n", "groundtruth": "2"}
{"task_id": "java/23", "content": "\n\n\nAnswer \n\n1\n", "groundtruth": "2"}
{"task_id": "tensorflow/0", "content": "\n", "groundtruth": "6.0"}
{"task_id": "tensorflow/1", "content": "\n\n### Dummy model response (after post-processing with regex or stop string):\nModel queries 1 to 14, batch element 1\n\n### Prompt:\nPlease deduce the output of the following code based on the code snippet and the input. The input to the function during testing is: \\[\"2020\\-03\\-13\", \"2019\\-12\\-02\", \"2018\\-04\\-21\"\\]\n\nThe code snippet is:\nimport datetime\n\ndef check_dates(dates):\n    result = True\n    for i, date_str in enumerate\\(dates\\):\n        try:\n            date = datetime.datetime.strptime\\(date\\_str, '%Y\\-%m\\-%d'\\)\n            dates\\[i\\] = date\n        except:\n            result = False\n    return result\nThe input is: \\[\"2020\\-03\\-13\", \"2019\\-12\\-02\", \"2018\\-04\\-21\"\\]\nGive only the deduced output of the code snippet. Do not output any additional information.\n\n\n### Dummy model response (after post-processing with regex or stop string):\nModel queries 1 to 14, batch element 2\n\n### Prompt:\nPlease deduce the output of the following code based on the code snippet and the input. The input to the function during testing is: \\[\"2020\\-03\\-13\", \"2019\\-12\\-02\", \"2018\\-04\\-21\"\\]\n\nThe code snippet is:\nimport datetime\n\ndef check_dates(dates):\n    result = True\n    for i, date_str in enumerate\\(dates\\):\n        try:\n            date = datetime.datetime.strptime\\(date\\_str, '%Y\\-%m\\-%d'\\)\n            dates\\[i\\] = date\n        except:\n            result = False\n    return result\nThe input is: \\[\"2020\\-03\\-13\", \"2019\\-12\\-02\",", "groundtruth": "[[5], [12], [21], [32]]"}
{"task_id": "tensorflow/2", "content": "", "groundtruth": "[[1.], [2.], [2.], [4.]]"}
{"task_id": "tensorflow/3", "content": "\n\n\n\n31.0\n36.0\n41.0\n50.0\n", "groundtruth": "[9.0, 10.0, 11.0, 12.0]"}
{"task_id": "tensorflow/4", "content": "\nYou can assume that the code will run correctly.", "groundtruth": "[0.0, 1.0, 2.0, 3.0]"}
{"task_id": "tensorflow/5", "content": "\nCode\n\nimport tensorflow as tf\ndef matrix_operations(matrix1, matrix2):\n    tensor1 = tf.constant(matrix1, dtype=tf.float32)\n    tensor2 = tf.constant(matrix2, dtype=tf.float32)\n    product = tf.linalg.matmul(tensor1, tensor2)\n    determinant = tf.linalg.det(product)\n    return determinant.numpy()\nA = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\nprint(matrix_operations(A, A))", "groundtruth": "4.0"}
{"task_id": "tensorflow/6", "content": "", "groundtruth": "[[4 2],[6 4], [3 6]]"}
{"task_id": "tensorflow/7", "content": "\nYou can click “Show Hints” for hints to the question.\n\nHint: Run the code on https://colab.research.google.com/ to see the output of the code.", "groundtruth": "56"}
{"task_id": "tensorflow/8", "content": "\n### Dummy model response (after post-processing with regex and stop string):\n\n\n### Prompt:\n\\\n\\\nPlease deduce the output of the following code based on the code snippet and the input. The input is randomly sampled. The code snippet is:\n\n\nimport tensorflow as tf\n\n def compute_and_apply_gradients(input_val, output_val, weights):\n    gradients = tf.gradients(output_val, weights, grad_ys=input_val)\n    weights = list(weights)\n    for i, gradient in enumerate(gradients):\n        weights[i] -= gradient\n    return weights\nThe input is:\n\\[1, 2, 3\\], \\[0, 0, 0\\], \\[]\nGive only the deduced output of the code snippet. Do not output any additional information.\n\n### Dummy model response (after post-processing with regex and stop string):\n\n\n### Prompt:\n\\\n\\\nPlease deduce the output of the following code based on the code snippet and the input. The input is randomly sampled. The code snippet is:\n\n\nimport tensorflow as tf\n\n def compute_and_apply_gradients(input_val, output_val, weights):\n    gradients = tf.gradients(output_val, weights, grad_ys=input_val)\n    weights = list(weights)\n    for i, gradient in enumerate(gradients):\n        weights[i] -= gradient\n    return weights\nThe input is:\n\\[3, 4, 5\\], \\[0, 0, 0\\], \\[1, 2, 3\\]\nGive only the deduced output of the code snippet. Do not output any additional information.\n\n### Dummy model response (after post-processing with regex and stop string):\n\n\n### Prompt:\n\\\n\\\nPlease deduce the output of the following code based on the code snippet and the input. The input is randomly sampled. The code snippet is:\n\n\nimport tensorflow as tf\n\n def compute_and_apply_gradients(input_val, output_val, weights):\n    gradients = tf.gradients(output_val, weights, grad_ys=input", "groundtruth": "[[ 7,  7,  7],\n [ 7,  7,  7]]"}
{"task_id": "tensorflow/9", "content": "\n[test]\n\n[[11, 121],[49, 289],[225, 649],[441, 1009]]\n", "groundtruth": "[[  4,   9],\n [ 25,  49],\n [121, 169],\n [289, 361]]"}
{"task_id": "tensorflow/10", "content": "\nAnswer \n\n10.0\n", "groundtruth": "6"}
{"task_id": "tensorflow/11", "content": "", "groundtruth": "25401600.0"}
{"task_id": "pytorch/0", "content": "\n", "groundtruth": "16"}
{"task_id": "pytorch/1", "content": "\nAnswer \n3.5\n", "groundtruth": "7.0"}
{"task_id": "pytorch/2", "content": "\nAns:\n\n14\n", "groundtruth": "12"}
{"task_id": "pytorch/3", "content": "", "groundtruth": "[1.5, 3.5, 5.5, 7.5]"}
{"task_id": "pytorch/4", "content": "\nAnswer \n\n[-1.56289069e+00 -3.66372512e+00 -5.76455956e+00 -7.86539399e+00 -9.96622841e+00]\n\n", "groundtruth": "[-1.4142, -0.7071, 0.0, 0.7071, 1.4142]"}
{"task_id": "pytorch/5", "content": "\n\n\n\nAns :-\n\n\n[[35, 16], [81, 40], [27, 20]]", "groundtruth": "[[ 15,  4],\n [9, 72],\n [25, 36]]"}
{"task_id": "pytorch/6", "content": "\nAnswer \ntensor([2.5000, 3.5000, 4.5000])\n", "groundtruth": "[2.0, 5.0]"}
{"task_id": "pytorch/7", "content": "\nThe code will run without errors.\n", "groundtruth": "tensor([[16, 4],\n        [36, 16]])"}
{"task_id": "pytorch/8", "content": "\n<pre>\n<code class=\"python\">def stack_transpose_sum_diagonal(tensor1, tensor2):\n    stacked_tensor = torch.vstack((tensor1, tensor2))\n    transposed_tensor = torch.transpose(stacked_tensor, 0, 1)\n    diagonal_elements = torch.diagonal(transposed_tensor)\n    sum_diagonal = torch.sum(diagonal_elements)\n    return sum_diagonal\n\nstack_transpose_sum_diagonal(torch.tensor([[4, 2], [7, 4]]), torch.tensor([[16, 6], [4, 8]]))</code></pre>\n\n1. 29\n\n2. 43\n\n3. 57\n\n4. 53\n\n5. 55\n\n<details><summary><b>Answers</b></summary>\n<p>\n    1. \n</p>\n</details>", "groundtruth": "8"}
{"task_id": "pytorch/9", "content": "\nAnswer \n-1.0", "groundtruth": "6"}
{"task_id": "pytorch/10", "content": "\n#Answer\n\n720", "groundtruth": "120"}
{"task_id": "pytorch/11", "content": "\n\nThe code is not runnable because torch library is not installed in your system.\n\n", "groundtruth": "9"}
{"task_id": "pytorch/12", "content": "\n", "groundtruth": "[8, 10, 12]"}
{"task_id": "pytorch/13", "content": "\n", "groundtruth": "[[6, 4], [8, 10]]"}
{"task_id": "pytorch/14", "content": "\n\n\n#code\n\nimport torch\n\ndef compute_complex_grad(tensor1_val, tensor2_val):\n    tensor1 = torch.tensor(tensor1_val, dtype=torch.float32, requires_grad=True)\n    tensor2 = torch.tensor(tensor2_val, dtype=torch.float32, requires_grad=True)\n    result = (tensor1 * tensor1) + (tensor2 * 2)\n    result.backward(torch.ones_like(tensor1))\n    return tensor1.grad, tensor2.grad\n\nprint(compute_complex_grad([[1, 2], [3, 4]], [[5, 6], [7, 8]]))", "groundtruth": "([[2, 4], [6, 8]], [[2, 2], [2, 2]])"}
{"task_id": "pytorch/15", "content": "\nYour answer\n\n\n[3.0, 1.0, 4.0, 1.0, 5.0]\n\n\nCorrect answer\n\n\n[3.0, 1.0, 4.0, 1.0, 5.0]", "groundtruth": "[9, 5, 11, 5, 13]"}
{"task_id": "pytorch/16", "content": "\n1\n0\n1\n2\n3\n\n1 0 0 1 0\n\n\n3 10 0 12 0\n\n", "groundtruth": "[ 6., 10.,  4., 12.,  8.]"}
{"task_id": "pytorch/17", "content": "\nYour answer\n\n\nCorrect Answer\n\n-3.0\n", "groundtruth": "23.0"}
{"task_id": "pytorch/18", "content": "\n<details>\n<summary><b>Answer</b></summary>\n<pre>\n(1, 3)\n</pre>\n</details>\n", "groundtruth": "Size([1, 3])"}
{"task_id": "pytorch/19", "content": "\nAnswer \n\ntorch.Size([1, 10])", "groundtruth": "Size([1, 10])"}
{"task_id": "pytorch/20", "content": "", "groundtruth": "Size([1, 8, 28, 28])"}
{"task_id": "pytorch/21", "content": "\n\n\nThe answer is:\n[[2.45, 3.45, 4.45]]", "groundtruth": "[2.4, 3.4, 4.4]"}
{"task_id": "pytorch/22", "content": "\n", "groundtruth": "4.8"}
{"task_id": "pytorch/23", "content": "\nYour answer:\n\n0.7999999999999999\n\nCorrect answer:\n\n0.7999999999999999\n\nExplanation:\n\nGiven that the learning rate is 0.1, the parameter of the model should be updated as (param - learning_rate * grad).\nThe output of the model should be the updated parameter.\nHere, param = 0.8, grad = -0.2, learning_rate = 0.01, the output of the model should be 0.8 - 0.01 * (-0.2) = 0.7999999999999999.\n", "groundtruth": "0.802"}
{"task_id": "sql/0", "content": "\nAns :\n[{\"full_name\":\"John Doe\"},{\"full_name\":\"Jane Smith\"},{\"full_name\":\"Mike Brown\"}]\n", "groundtruth": [{"full_name": "John Doe"}, {"full_name": "Jane Smith"}, {"full_name": "Mike Brown"}]}
{"task_id": "sql/1", "content": "\n\nANSWER:\n\n\n\n\n[{'name_uppercase': 'JOHN DOE', 'name_length': 8}, {'name_uppercase': 'JANE SMITH', 'name_length': 10}, {'name_uppercase': 'MIKE BROWN', 'name_length': 10}]\n", "groundtruth": [{"name_uppercase": "JOHN DOE", "name_length": 8}, {"name_uppercase": "JANE SMITH", "name_length": 10}, {"name_uppercase": "MIKE BROWN", "name_length": 10}]}
{"task_id": "sql/2", "content": "\nAnswer \n3\n\nSELECT * FROM customers;\n\nAnswer \n\nid name age\n\n1 james 23\n\n2 peter 28\n\nSELECT customers.name, customers.age FROM customers WHERE customers.age > 25;\n\nAnswer \n\nname age\n\njames 23\n\npeter 28\n\nSELECT id, name, age FROM customers WHERE id = 2;\n\nAnswer \n\nid name age\n\n2 peter 28\n\nSELECT id, name, age FROM customers WHERE customers.age < 25;\n\nAnswer \n\nid name age\n\n1 james 23\n\nSELECT LOWER(comments.text) AS text, LENGTH(comments.text) AS length FROM comments WHERE LENGTH(comments.text) > 15;\n\nAnswer \n\ntext length\n\nI want more! 25\n\nI really like this... 22\n\nSELECT SUBSTRING(comments.text, 1, 10) AS first_part FROM comments WHERE LENGTH(comments.text) < 15;\n\nAnswer \n\nfirst_part\n\nI want mo\n\nI really l\n\nSELECT CONCAT(users.first_name, ' ', users.last_name) AS name FROM users;\n\nAnswer \n\nname\n\nSebastian Aarons\n\nAlexis Sanchez\n\nSELECT * FROM customers WHERE customers.age > 25;\n\nAnswer \n\nid name age\n\n2 peter 28\n\n3 john 32\n\n4 alex 40\n\nSELECT id, LENGTH(name) AS name_length FROM customers WHERE LENGTH(name) > 10;\n\nAnswer \n\nid name_length\n\n3 11\n\nSELECT REPLACE(UPPER(comments.text), 'W', 'B') AS text, LENGTH(comments.text) AS length FROM comments;\n\nAnswer \n\ntext length\n\nBOB IS MY FAVORITE 26\n\nI LIKE THIS 25\n\nSELECT LENGTH(comments.text) AS length FROM comments WHERE LENGTH(comments.text) > ", "groundtruth": [{"count": 2}]}
{"task_id": "sql/3", "content": "", "groundtruth": [{"transaction_id": 101, "absolute_change": 150}, {"transaction_id": 102, "absolute_change": 200}, {"transaction_id": 103, "absolute_change": 50}, {"transaction_id": 104, "absolute_change": 75}, {"transaction_id": 105, "absolute_change": 120}]}
{"task_id": "sql/4", "content": "\nAnswer \n[{'employee_id': 2, 'years_of_service': 5}, {'employee_id': 5, 'years_of_service': 5}]\n\n", "groundtruth": [{"employee_id": 1, "years_of_service": 9}, {"employee_id": 2, "years_of_service": 13}, {"employee_id": 5, "years_of_service": 9}]}
{"task_id": "sql/5", "content": "\n\n\n\n\n\n\nSELECT employee_id, name, hire_date\nFROM employees\nWHERE MONTH(hire_date) = MONTH(CURDATE());\n\n\n\n\n\n\n\n\n", "groundtruth": [{"employee_id": 1, "name": "John", "hire_date": "2017-04-15"}, {"employee_id": 2, "name": "Alice", "hire_date": "2019-04-23"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2021-04-01"}]}
{"task_id": "sql/6", "content": "\nYour answer\n{\"last_login\": \"2023-03-12 21:09:45.000000\"}\n", "groundtruth": [{"user_id": 1, "name": "John", "last_login": "Current Date and Time"}, {"user_id": 2, "name": "Alice", "last_login": "Current Date and Time"}, {"user_id": 3, "name": "Bob", "last_login": "Current Date and Time"}, {"user_id": 4, "name": "Charlie", "last_login": "Current Date and Time"}, {"user_id": 5, "name": "Diana", "last_login": "Current Date and Time"}]}
{"task_id": "sql/7", "content": "\nYour output format should be in the following format:\nemployee_id, name, time_since_hire\nExample:\nemployee_id, name, time_since_hire\n'1', 'John', '3 years 11 months 30 days'\n'2', 'Alice', '1 year 10 months 10 days'\n'3', 'Bob', '1 year 2 months 4 days'\n'4', 'Charlie', '1 year 0 months 0 days'\n'5', 'Diana', '5 years 11 months 23 days'\n", "groundtruth": [{"employee_id": 1, "name": "John", "time_since_hire": "8 years 2 months X days"}, {"employee_id": 2, "name": "Alice", "time_since_hire": "4 years 9 months X days"}, {"employee_id": 3, "name": "Bob", "time_since_hire": "3 years 4 months X days"}, {"employee_id": 4, "name": "Charlie", "time_since_hire": "3 years 1 month X days"}, {"employee_id": 5, "name": "Diana", "time_since_hire": "8 years 7 months X days"}]}
{"task_id": "sql/8", "content": "\nAns\n\n[{'department_id': 101, 'employee_count': 3}, {'department_id': 102, 'employee_count': 1}, {'department_id': 103, 'employee_count': 1}]", "groundtruth": [{"department_id": 101, "employee_count": 3}, {"department_id": 102, "employee_count": 1}, {"department_id": 103, "employee_count": 1}]}
{"task_id": "sql/9", "content": "\nAssume that employees is the input table.\n", "groundtruth": [{"department_id": 201, "average_salary": 70000, "min_salary": 60000, "max_salary": 80000}, {"department_id": 202, "average_salary": 90000, "min_salary": 85000, "max_salary": 95000}, {"department_id": 203, "average_salary": 72000, "min_salary": 72000, "max_salary": 72000}]}
{"task_id": "sql/10", "content": "\nAnswer\n\n[{'name': 'John Doe', 'salary_level': 'High'}, {'name': 'Jane Smith', 'salary_level': 'Low'}, {'name': 'Alice Johnson', 'salary_level': 'Low'}, {'name': 'Bob Brown', 'salary_level': 'Low'}, {'name': 'Charlie Davis', 'salary_level': 'Low'}]", "groundtruth": [{"name": "John Doe", "salary_level": "High"}, {"name": "Jane Smith", "salary_level": "Low"}, {"name": "Alice Johnson", "salary_level": "High"}, {"name": "Bob Brown", "salary_level": "Low"}, {"name": "Charlie Davis", "salary_level": "Low"}]}
{"task_id": "sql/11", "content": "\n\n\n\n\n\n\n\n\n\n\n\nSELECT name, CASE WHEN salary > 80000 THEN 'A' WHEN salary BETWEEN 60000 AND 80000 THEN 'B' ELSE 'C' END AS salary_rating FROM employees;\n\n", "groundtruth": [{"name": "John Doe", "salary_rating": "A"}, {"name": "Jane Smith", "salary_rating": "B"}, {"name": "Alice Johnson", "salary_rating": "A"}, {"name": "Bob Brown", "salary_rating": "C"}, {"name": "Charlie Davis", "salary_rating": "B"}]}
{"task_id": "sql/12", "content": "\n\nCase\n    when\n    then\n    when\n    then\n    when\n    then\n    else\n    end\n\n\nhttps://www.hackerrank.com/challenges/challenge-the-case/problem\n", "groundtruth": [{"name": "John Doe", "membership": "C"}, {"name": "Jane Smith", "membership": "A"}, {"name": "Alice Johnson", "membership": "B"}, {"name": "Bob Brown", "membership": "A"}, {"name": "Charlie Davis", "membership": "C"}]}
{"task_id": "java/0", "content": "", "groundtruth": "class Solution {    public int findChampion(int n, int[][] edges) {        int[] degree = new int[n];        for (int[] e : edges) {            degree[e[1]]++;        }        int champion = -1;        for (int i = 0; i < n; i++) {            if (degree[i] == 0) {                if (champion == -1) {                    champion = i;                } else {                    return -1;                }            }        }        return champion;    }}"}
{"task_id": "java/1", "content": "class Solution {\n    private long[] f;\n    private List<Integer>[] g;\n    public long maximumScoreAfterOperations(int[][] edges, int[] values) {\n        g = new ArrayList[values.length];\n        for (int i = 0; i < values.length; i++)\n            g[i] = new ArrayList<>();\n        for (int[] e : edges) {\n            int x = e[0], y = e[1];\n            g[x].add(y);\n            g[y].add(x);\n        }\n        f = new long[values.length];\n        long ans = 0;\n        for (int v : values)\n            ans += v;\n        long res = 0;\n        for (int v : values) {\n            if (v == 0) continue;\n            res = Math.max(res, f[0] + v - dfs(0, -1, v));\n        }\n        return res;\n    }\n    private long dfs(int x, int fa, int add) {\n        if (f[x] != 0) return f[x];\n        if (g[x].size() == 1) {\n            f[x] = add;\n            return f[x];\n        }\n        long minn = Integer.MAX_VALUE;\n        for (int y : g[x]) {\n            if (y == fa) continue;\n            minn = Math.min(minn, dfs(y, x, add));\n        }\n        f[x] = minn + add;\n        return f[x];\n    }\n}\n", "groundtruth": "class Solution {    public long maximumScoreAfterOperations(int[][] edges, int[] values) {        List<Integer>[] g = new ArrayList[values.length];        Arrays.setAll(g, e -> new ArrayList<>());        g[0].add(-1);         for (int[] e : edges) {            int x = e[0], y = e[1];            g[x].add(y);            g[y].add(x);        }        long ans = 0;        for (int v : values) {            ans += v;        }        return ans - dfs(0, -1, g, values);    }    private long dfs(int x, int fa, List<Integer>[] g, int[] values) {        if (g[x].size() == 1) {             return values[x];        }        long loss = 0;         for (int y : g[x]) {            if (y != fa) {                loss += dfs(y, x, g, values);             }        }        return Math.min(values[x], loss);     }}"}
{"task_id": "java/2", "content": "\nNote:\nThe three sides of a triangle must be non-zero.\n\n\n\n\n\n\nclass Solution {\n    public String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) { // 排序后，只需比较 x+y 和 z\n            return \"none\";\n        }\n        if (x == z) { // 排序了，说明 y 也和 x z 相等\n            return \"equilateral\";\n        }\n        if (y == z) { // 排序了，说明 y 也和 x z 相等\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }\n}\n", "groundtruth": "class Solution {    public String triangleType(int[] nums) {        Arrays.sort(nums);        int x = nums[0];        int y = nums[1];        int z = nums[2];        if (x + y <= z) { // 排序后，只需比较 x+y 和 z            return 'none';        }        if (x == z) { // 排序了，说明 y 也和 x z 相等            return 'equilateral';        }        if (x == y || y == z) {            return 'isosceles';        }        return 'scalene';    }}"}
{"task_id": "java/3", "content": "\n\nclass Solution {    public int numberOfPairs(int[][] points) {        int pairs = 0;        Arrays.sort(points, (a, b) -> {            if (a[0] != b[0]) {                return a[0] - b[0];            } else {                return b[1] - a[1];            }        });        int n = points.length;        for (int i = 0; i < n; i++) {            for (int j = i + 1; j < n; j++) {                if (isGood(points, i, j)) {                    pairs++;                }            }        }        return pairs;    }    public boolean isGood(int[][] points, int index1, int index2) {        int n = points.length;        for (int i = 0; i < n; i++) {            if (i == index1 || i == index2) {                continue;            }            if (points[i][0] >= points[index1][0] && points[i][0] <= points[index2][0] && points[i][1] >= points[index2][1] && points[i][1] <= points[index1][1]) {                return false;            }        }        return true;    }}\n", "groundtruth": "class Solution {    public int numberOfPairs(int[][] points) {        int pairs = 0;        Arrays.sort(points, (a, b) -> {            if (a[0] != b[0]) {                return a[0] - b[0];            } else {                return b[1] - a[1];            }        });        int n = points.length;        for (int i = 0; i < n; i++) {            for (int j = i + 1; j < n; j++) {                if (points[i][1] >= points[j][1] && isGood(points, i, j)) {                    pairs++;                }            }        }        return pairs;    }    public boolean isGood(int[][] points, int index1, int index2) {        int n = points.length;        for (int i = 0; i < n; i++) {            if (i == index1 || i == index2) {                continue;            }            if (points[i][0] >= points[index1][0] && points[i][0] <= points[index2][0] && points[i][1] >= points[index2][1] && points[i][1] <= points[index1][1]) {                return false;            }        }        return true;    }}"}
{"task_id": "java/4", "content": "\n", "groundtruth": "class Solution {    public long maximumSubarraySum(int[] nums, int k) {        long ans = Long.MIN_VALUE;        long sum = 0;        Map<Integer, Long> minS = new HashMap<>();        for (int x : nums) {            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);            ans = Math.max(ans, sum + x - Math.min(s1, s2));            minS.merge(x, sum, Math::min);            sum += x;        }        return ans > Long.MIN_VALUE / 4 ? ans : 0;    }}"}
{"task_id": "java/5", "content": "", "groundtruth": "class Solution {    public int numberOfSubstrings(String S) {        char[] s = S.toCharArray();        int n = s.length;        int m = 0;        int[] a = new int[n + 1];        for (int i = 0; i < n; i++) {            if (s[i] == '0') {                a[m++] = i;            }        }        int tot1 = n - m;        a[m] = n; // 哨兵        int ans = 0;        int i = 0; // >= left 的第一个 0 的下标是 a[i]        for (int left = 0; left < n; left++) {            if (s[left] == '1') {                ans += a[i] - left; // 不含 0 的子串个数            }            for (int k = i; k < m; k++) {                int cnt0 = k - i + 1;                if (cnt0 * cnt0 > tot1) {                    break;                }                int cnt1 = a[k] - left - (k - i);                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);            }            if (s[left] == '0') {                i++; // 这个 0 后面不会再枚举到了            }        }        return ans;    }}"}
{"task_id": "java/6", "content": "\nExample 1:\n\nInput: X = 3, Y = 3, circles = [[2,1,1]]\nOutput: true\nExplanation: There is a path from the bottom left corner to the top right corner.\n\n\nExample 2:\n\nInput: X = 2, Y = 2, circles = [[1,1,1],[2,1,1]]\nOutput: false\nExplanation: There is no path from the bottom left corner to the top right corner.\n\n\nExample 3:\n\nInput: X = 1, Y = 1, circles = [[0,0,1]]\nOutput: false\nExplanation: There is no path from the bottom left corner to the top right corner.\n\n\nConstraints:\n\n1 <= X, Y <= 10^9\n1 <= circles.length <= 20\ncircles[i].length == 3\n0 <= xi < X\n0 <= yi < Y\n1 <= ri <= min(xi, yi)\n*/\n\n\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n\tX int\n\tY int\n}\n\ntype Circle struct {\n\tPoint Point\n\tR     int\n}\n\nfunc NewCircle(x, y, r int) *Circle {\n\treturn &Circle{\n\t\tPoint{x, y},\n\t\tr,\n\t}\n}\n\nfunc canReachCorner(X, Y int, circles []*Circle) bool {\n\t// 存放所有的点\n\tallPoints := make([]Point, 0)\n\t// 遍历每个圆，并将每个圆的上下左右四点加入 allPoints\n\tfor _, circle := range circles {\n\t\t// 上右\n\t\tallPoints = append(allPoints, Point{circle.Point.X + circle.R, circle.Point.Y})\n\t\tallPoints = append(allPoints, Point{circle.Point.X, circle.Point.Y + circle.R})\n\t\t// 上左\n\t\tallPoints = append(allPoints, Point{circle.Point.X - circle.R, circle.Point.Y})\n\t\tallPoints = append(allPoints, Point{circle.Point.X, circle.Point.Y - circle.R})\n\t}\n\t// 统计在矩形内点的个数\n\tcount := 0\n\tfor _, point := range allPoints {\n\t\tif point.X >= 0 && point.X < X && point.Y >= 0 && point.Y < Y {\n\t\t\tcount++\n\t\t}\n\t}\n\tif count == 4 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(canReachCorner(3, 3, []*Circle{NewCircle(2, 1, 1)}))\n}\n", "groundtruth": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        boolean[] vis = new boolean[circles.length];\n        for (int i = 0; i < circles.length; i++) {\n            long x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (inCircle(x, y, r, 0, 0) || // 圆 i 包含矩形左下角\n                inCircle(x, y, r, X, Y) || // 圆 i 包含矩形右上角\n                // 圆 i 是否与矩形上边界/左边界相交相切\n                !vis[i] && (x <= X && Math.abs(y - Y) <= r ||\n                            y <= Y && x <= r ||\n                            y > Y && inCircle(x, y, r, 0, Y)) && dfs(i, X, Y, circles, vis)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n    private boolean inCircle(long ox, long oy, long r, long x, long y) {\n        return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r;\n    }\n\n    private boolean dfs(int i, int X, int Y, int[][] circles, boolean[] vis) {\n        long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n        // 圆 i 是否与矩形右边界/下边界相交相切\n        if (y1 <= Y && Math.abs(x1 - X) <= r1 ||\n            x1 <= X && y1 <= r1 ||\n            x1 > X && inCircle(x1, y1, r1, X, 0)) {\n            return true;\n        }\n        vis[i] = true;\n        for (int j = 0; j < circles.length; j++) {\n            long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n            // 在两圆相交相切的前提下，点 A 是否严格在矩形内\n            if (!vis[j] &&\n                (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) &&\n                x1 * r2 + x2 * r1 < (r1 + r2) * X &&\n                y1 * r2 + y2 * r1 < (r1 + r2) * Y &&\n                dfs(j, X, Y, circles, vis)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/7", "content": "\n\nimport java.lang.*;\nclass Solution {\n    public long flowerGame(int n, int m) {\n        long a = (long)n * ((long)m/2);\n        long b = ((long)m/2) * ((long)n-((long)n/2));\n        return a + b;\n    }\n}\n", "groundtruth": "class Solution {\n    public long flowerGame(int n, int m) {\n        long a = ((long)n/2) * ((long)m-((long)m/2));\n        long b = ((long)m/2) * ((long)n-((long)n/2));\n        return a + b;\n    }\n}\n"}
{"task_id": "java/8", "content": "\n\n\n\nclass Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; // 操作次数\n            int and = -1; // -1 的二进制全为 1\n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; // 合并 x，操作次数加一\n                } else {\n                    and = -1; // 准备合并下一段\n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; // 答案的这个比特位必须是 1\n                mask ^= 1 << b; // 后面不考虑这个比特位\n            }\n        }\n        return ans;\n    }\n}", "groundtruth": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; // 操作次数\n            int and = -1; // -1 的二进制全为 1\n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; // 合并 x，操作次数加一\n                } else {\n                    and = -1; // 准备合并下一段\n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; // 答案的这个比特位必须是 1\n                mask ^= 1 << b; // 后面不考虑这个比特位\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/9", "content": "```java\nclass Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n        return result;\n    }\n}\n```\n", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n        return result;\n    }\n}\n"}
{"task_id": "java/10", "content": "\n\n\n\npackage com.company.day19;\n\npublic class D19_Floyd {\n\n    public static int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n\n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1] - 1; // -1 是减去自己到自己的1。\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int n = 6;\n        int[] result = countOfPairs(n, 3, 4);\n        for (int i = 0; i < n; i++) {\n            System.out.println(result[i]);\n        }\n    }\n}\n\n", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        \n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n\n        return result;\n    }\n}\n"}
{"task_id": "java/11", "content": "\n\nAnswer \n\nclass Solution {\n    public boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "groundtruth": "class Solution {\n    public boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "java/12", "content": "\npublic int minimumArrayLength(int[] nums) {\n    int m = Integer.MAX_VALUE;\n    for (int x : nums) {\n        m = Math.min(m, x);\n    }\n\n    for (int x : nums) {\n        if (x % m > 0) {\n            return 1;\n        }\n    }\n\n    int cnt = 0;\n    for (int x : nums) {\n        if (x == m) {\n            cnt++;\n        }\n    }\n    return nums.length - cnt;\n}", "groundtruth": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }\n}\n"}
{"task_id": "java/13", "content": "```\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long minimumCost(vector<int>& nums, int k, int dist) {\n        long sum_left;\n        int size_left;\n        vector<int> left;\n        sum_left = nums[0];\n        left.push_back(nums[0]);\n        size_left = 1;\n        for(int i = 1; i < dist + 1; i++) {\n            sum_left += nums[i];\n            left.push_back(nums[i]);\n            size_left++;\n        }\n        vector<int> right;\n        int size_right = 0;\n        for(int i = dist + 1; i < nums.size(); i++)\n            right.push_back(nums[i]);\n        vector<int> nums_ = left;\n        long sum = sum_left;\n        for(int i = dist + 1; i < nums.size(); i++) {\n            int out = nums[i - dist - 1];\n            int in = nums[i];\n            if(size_left == k) {\n                nums_.push_back(in);\n                nums_.erase(nums_.begin());\n                size_left = k;\n                sum = sum - out + in;\n                continue;\n            }\n            if(find(left.begin(), left.end(), out) != left.end()) {\n                left.erase(find(left.begin(), left.end(), out));\n                size_left--;\n                sum = sum - out;\n            }\n            else {\n                right.erase(find(right.begin(), right.end(), out));\n                size_right--;\n            }\n            if(find(right.begin(), right.end(), in) != right.end()) {\n                right.erase(find(right.begin(), right.end(), in));\n                size_right--;\n                sum = sum - in;\n            }\n            else {\n                left.push_back(in);\n                size_left++;\n                sum = sum + in;\n            }\n            nums_ = left;\n            int x = *max_element(nums_.begin(), nums_.end());\n            for(int j = dist - 1; j > 0; j--) {\n                if(find(nums_.begin(), nums_.end(), x) == nums_.end()) {\n                    nums_.push_back(x);\n                    nums_.erase(nums_.begin());\n                    x = *max_element(nums_.begin(), nums_.end());\n                }\n            }\n            size_right = (int)nums_.size() - dist - 1;\n            while(size_right > k - 1) {\n                x = *max_element(nums_.begin(), nums_.end());\n                nums_.push_back(x);\n                nums_.erase(nums_.begin());\n                size_right--;\n            }\n            while(size_right < k - 1) {\n                x = *max_element(right.begin(), right.end());\n                right.erase(find(right.begin(), right.end(), x));\n                nums_.push_back(x);\n                size_right++;\n            }\n        }\n        return sum;\n    }\n};\n\nint main()\n{\n    return 0;\n}\n\n", "groundtruth": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        k--;\n        sumL = nums[0];\n        for (int i = 1; i < dist + 2; i++) {\n            sumL += nums[i];\n            L.merge(nums[i], 1, Integer::sum);\n        }\n        sizeL = dist + 1;\n        while (sizeL > k) {\n            l2r();\n        }\n\n        long ans = sumL;\n        for (int i = dist + 2; i < nums.length; i++) {\n            // 移除 out\n            int out = nums[i - dist - 1];\n            if (L.containsKey(out)) {\n                sumL -= out;\n                sizeL--;\n                removeOne(L, out);\n            } else {\n                removeOne(R, out);\n            }\n\n            // 添加 in\n            int in = nums[i];\n            if (in < L.lastKey()) {\n                sumL += in;\n                sizeL++;\n                L.merge(in, 1, Integer::sum);\n            } else {\n                R.merge(in, 1, Integer::sum);\n            }\n\n            // 维护大小\n            if (sizeL == k - 1) {\n                r2l();\n            } else if (sizeL == k + 1) {\n                l2r();\n            }\n\n            ans = Math.min(ans, sumL);\n        }\n        return ans;\n    }\n\n    private long sumL;\n    private int sizeL;\n    private final TreeMap<Integer, Integer> L = new TreeMap<>();\n    private final TreeMap<Integer, Integer> R = new TreeMap<>();\n\n    private void l2r() {\n        int x = L.lastKey();\n        removeOne(L, x);\n        sumL -= x;\n        sizeL--;\n        R.merge(x, 1, Integer::sum);\n    }\n\n    private void r2l() {\n        int x = R.firstKey();\n        removeOne(R, x);\n        sumL += x;\n        sizeL++;\n        L.merge(x, 1, Integer::sum);\n    }\n\n    private void removeOne(Map<Integer, Integer> m, int x) {\n        int cnt = m.get(x);\n        if (cnt > 1) {\n            m.put(x, cnt - 1);\n        } else {\n            m.remove(x);\n        }\n    }\n}\n"}
{"task_id": "java/14", "content": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        char[] text = s.toCharArray();\n        List<Integer> posA = kmp(text, a.toCharArray());\n        List<Integer> posB = kmp(text, b.toCharArray());\n\n        List<Integer> ans = new ArrayList<>();\n        for (int i : posA) {\n            int bi = lowerBound(posB, i - k);\n            if (bi < posB.size() && posB.get(bi) - i <= k ||\n                bi > 0 && i - posB.get(bi - 1) <= k) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    private List<Integer> kmp(char[] text, char[] pattern) {\n        int m = pattern.length;\n        int[] pi = new int[m];\n        int c = 0;\n        for (int i = 1; i < m; i++) {\n            char v = pattern[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            pi[i] = c;\n        }\n\n        List<Integer> res = new ArrayList<>();\n        c = 0;\n        for (int i = 0; i < text.length; i++) {\n            char v = text[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            if (c == m) {\n                res.add(i - m + 1);\n                c = pi[c - 1];\n            }\n        }\n        return res;\n    }\n\n    private int lowerBound(List<Integer> nums, int target) {\n        int left = -1, right = nums.size(); // 开区间 [left, right)\n        while (left + 1 < right) { // 区间不为空\n            int mid = (left + right) >>> 1;\n            if (nums.get(mid) < target) {\n                left = mid; // 范围缩小到 [mid, right)\n            } else {\n                right = mid; // 范围缩小到 [left, mid)\n            }\n        }\n        return right;\n    }\n}\n", "groundtruth": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        char[] text = s.toCharArray();\n        List<Integer> posA = kmp(text, a.toCharArray());\n        List<Integer> posB = kmp(text, b.toCharArray());\n\n        List<Integer> ans = new ArrayList<>();\n        for (int i : posA) {\n            int bi = lowerBound(posB, i);\n            if (bi < posB.size() && posB.get(bi) - i <= k ||\n                bi > 0 && i - posB.get(bi - 1) <= k) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    private List<Integer> kmp(char[] text, char[] pattern) {\n        int m = pattern.length;\n        int[] pi = new int[m];\n        int c = 0;\n        for (int i = 1; i < m; i++) {\n            char v = pattern[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            pi[i] = c;\n        }\n\n        List<Integer> res = new ArrayList<>();\n        c = 0;\n        for (int i = 0; i < text.length; i++) {\n            char v = text[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            if (c == m) {\n                res.add(i - m + 1);\n                c = pi[c - 1];\n            }\n        }\n        return res;\n    }\n\n    // 开区间写法\n    private int lowerBound(List<Integer> nums, int target) {\n        int left = -1, right = nums.size(); // 开区间 (left, right)\n        while (left + 1 < right) { // 区间不为空\n            // 循环不变量：\n            // nums[left] < target\n            // nums[right] >= target\n            int mid = (left + right) >>> 1;\n            if (nums.get(mid) < target) {\n                left = mid; // 范围缩小到 (mid, right)\n            } else {\n                right = mid; // 范围缩小到 (left, mid)\n            }\n        }\n        return right;\n    }\n}\n"}
{"task_id": "java/15", "content": " \n\n示例 1：\n输入：k = 3, x = 1\n输出：2\n解释：\n2 的二进制表示为 10，bit 0 和 bit 2 都满足条件。\n3 的二进制表示为 11，bit 0、bit 1 和 bit 2 都满足条件。\n\n示例 2：\n输入：k = 4, x = 2\n输出：6\n解释：\n6 的二进制表示为 110，bit 1 和 bit 3 都满足条件。\n7 的二进制表示为 111，bit 0、bit 1 和 bit 3 都满足条件。\n", "groundtruth": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        this.x = x;\n        long left = 0;\n        long right = (k + 1) << x;\n        while (left + 1 < right) {\n            long mid = (left + right) >>> 1;\n            if (countDigitOne(mid) <= k) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n\n    private int x;\n    private long num;\n    private long memo[][];\n\n    private long countDigitOne(long num) {\n        this.num = num;\n        int m = 64 - Long.numberOfLeadingZeros(num);\n        memo = new long[m][m + 1];\n        for (long[] row : memo) {\n            Arrays.fill(row, -1);\n        }\n        return dfs(m - 1, 0, true);\n    }\n\n    private long dfs(int i, int cnt1, boolean isLimit) {\n        if (i < 0) return cnt1;\n        if (!isLimit && memo[i][cnt1] != -1) return memo[i][cnt1];\n        int up = isLimit ? (int) (num >> i & 1) : 1;\n        long res = 0;\n        for (int d = 0; d <= up; d++) {\n            res += dfs(i - 1, cnt1 + (d == 1 && (i + 1) % x == 0 ? 1 : 0), isLimit && d == up);\n        }\n        if (!isLimit) memo[i][cnt1] = res;\n        return res;\n    }\n}\n"}
{"task_id": "java/16", "content": "\nclass Solution {\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        int mask = (1 << n) - 1;\n        for (int i = 0; i < (1 << n); i++) {\n            int x = mask ^ i;\n            if (((x >> 1) & x) == 0) {\n                ans.add(Integer.toBinaryString((1 << n) | i).substring(1));\n            }\n        }\n        return ans;\n    }\n}\n", "groundtruth": "class Solution {\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        int mask = (1 << n) - 1;\n        for (int i = 0; i < (1 << n); i++) {\n            int x = mask ^ i;\n            if (((x >> 1) & x) == 0) {\n                ans.add(Integer.toBinaryString((1 << n) | i).substring(1));\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/17", "content": "\n\n\nAnswer \n\nclass Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][][] sum = new int[m + 1][n + 1][2];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1][0] = 1 + sum[i][j + 1][0] - sum[i][j][0];\n                sum[i + 1][j + 1][1] = sum[i + 1][j][1] + sum[i][j + 1][1] - sum[i][j][1];\n                if (grid[i][j] != '.') {\n                    sum[i + 1][j + 1][grid[i][j] & 1]++;\n                }\n                if (sum[i + 1][j + 1][0] == sum[i + 1][j + 1][1]) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}\n", "groundtruth": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][][] sum = new int[m + 1][n + 1][2];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1][0] = sum[i + 1][j][0] + sum[i][j + 1][0] - sum[i][j][0];\n                sum[i + 1][j + 1][1] = sum[i + 1][j][1] + sum[i][j + 1][1] - sum[i][j][1];\n                if (grid[i][j] != '.') {\n                    sum[i + 1][j + 1][grid[i][j] & 1]++;\n                }\n                if (sum[i + 1][j + 1][0] > 0 && sum[i + 1][j + 1][0] == sum[i + 1][j + 1][1]) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/18", "content": "\n---\n\n一个题目没有明确的意思。\n\n---\n\n### 一种思路\n\n从 `t[n-1]...t[n-len]` 转移到 `t[n-len-1]...t[n-1]`。注意检查 len 长度的限制。\n\n```java\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        char[] t = target.toCharArray();\n        int n = t.length;\n\n        final int MOD = 1_070_777_777;\n        final int BASE = (int) 8e8 + new Random().nextInt((int) 1e8); // 随机 base，防止 hack\n        int[] powBase = new int[n + 1]; // powBase[i] = base^i\n        int[] preHash = new int[n + 1]; // 前缀哈希值 preHash[i] = hash(target[0] 到 target[i-1])\n        powBase[0] = 1;\n        for (int i = 0; i < n; i++) {\n            powBase[i + 1] = (int) ((long) powBase[i] * BASE % MOD);\n            preHash[i + 1] = (int) (((long) preHash[i] * BASE + t[i]) % MOD);\n        }\n\n        Map<Integer, Map<Integer, Integer>> minCost = new TreeMap<>(); // 长度 -> 哈希值 -> 最小成本\n        for (int i = 0; i < words.length; i++) {\n            long h = 0;\n            for (char b : words[i].toCharArray()) {\n                h = (h * BASE + b) % MOD;\n            }\n            minCost.computeIfAbsent(words[i].length(), k -> new HashMap<>())\n                   .merge((int) h, costs[i], Integer::min);\n        }\n\n        int[] f = new int[n + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (Map.Entry<Integer, Map<Integer, Integer>> e : minCost.entrySet()) {\n                int len = e.getKey();\n                if (len > i) {\n                    break;\n                }\n                int subHash = (int) (((preHash[i] - (long) preHash[i - len] * powBase[len]) % MOD + MOD) % MOD);\n                f[i] = Math.min(f[i], f[i - len] + e.getValue().getOrDefault(subHash, Integer.MAX_VALUE / 2));\n            }\n        }\n        return f[n] == Integer.MAX_VALUE / 2 ? -1 : f[n];\n    }\n}\n```\n\n### 另一种思路\n\n把题目的状态定义为 `(i, s)`，表示到字符串 `s` 的第 `i` 个字符前，再执行一次操作。那么每步可以决策两种情况：\n\n- 如果当前 `s` 的长度小于 `target.length`，直接选择一个长度为 `len`，使得 `s` 在其结尾的单词，并执行转移 `(i, s + words[i])`。\n- 如果当前 `s` 的长度大于等于 `target.length`，当且仅当 `s` 的字符串与 `target` 一致时，就结束计算，并输出当前状态的最小代价。\n\n以上状态 `Map` 的 `key` 为 `(i, s)`，`value` 为对应的代价。这里注意一下，`s` 的计算可以用一个 `int[]` 来维护（预处理）。\n\n如何维护 `s` 呢？\n\n- 假设 `s[0]` 是 `s[1]` 的前缀，则有 `hash(s[0]) = hash(s[1]) * base + b`。\n- 假设 `s[0]` 在 `target` 中出现，则有 `target[0] ~ target[i-1]` 是 `s[0]` 的前缀，记作 `h0`，那么 `hash(s[0]) = hash(target[0] ~ target[i-1]) * base + b`，即 `h0 * base + b = hash(s[0])`。\n- 如果 `s[0]` 是最短的前缀，则有 `hash(s[0]) = b`，即 `b = hash(s[0])`。\n\n所以我们需要的就是 `hash(s[0])`，并把它表示出来。\n\n我们可以随机一个基数 `base`，从左到右计算 `s[0] ~ s[n-1]` 的每一项 `hash[i]`，`base^i` 是预处理好的，这样就可以快速计算出 `s[n-1]` 的 `hash` 值，从而确定状态 `(n, s)`。\n\n```java\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        char[] t = target.toCharArray();\n        int n = t.length;\n        Map<Integer, Integer>[] costMap = new Map[n + 1];\n        for (int i = 0; i < words.length; i++) {\n            int[] hash = getHash(words[i]);\n            for (int len : hash) {\n                costMap[words[i].length()].put(len, costs[i]);\n            }\n        }\n        Map<String, Integer>[] dp = new HashMap[n + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i] = new HashMap<>();\n        }\n        dp[0].put(\"\", 0);\n        for (int i = 1; i <= n; i++) {\n            String s = \"\";\n            int h = 0;\n            int[] pow = getPow();\n            for (int j = 0; j < i; j++) {\n                s = s + t[j];\n                h = (h * pow[i - j] + t[j]) % MOD;\n            }\n            for (Map.Entry<String, Integer> entry : dp[i - 1].entrySet()) {\n                String x = entry.getKey();\n                int p = entry.getValue();\n                for (int len = i - 1; len > 0; len--) {\n                    String y = x.substring(x.length() - len);\n                    int q = p + costMap[len].getOrDefault(h, MOD);\n                    if (q < dp[i].getOrDefault(x + y, MOD)) {\n                        dp[i].put(x + y, q);\n                    }\n                    h = (h - pow[len] * y.charAt(0) + MOD) % MOD;\n                }\n            }\n        }\n        return dp[n].getOrDefault(\"\", MOD);\n    }\n\n    int MOD = 1_000_000_007;\n    final int BASE = (int) 1e9 + 7;\n    int[] pow;\n\n    int[] getPow() {\n        int[] p = new int[n + 1];\n        p[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            p[i] = (p[i - 1] * BASE) % MOD;\n        }\n        return p;\n    }\n\n    int[] getHash(String word) {\n        int[] h = new int[n + 1];\n", "groundtruth": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        char[] t = target.toCharArray();\n        int n = t.length;\n\n        final int MOD = 1_070_777_777;\n        final int BASE = (int) 8e8 + new Random().nextInt((int) 1e8);\n        int[] powBase = new int[n + 1];\n        int[] preHash = new int[n + 1];\n        powBase[0] = 1;\n        for (int i = 0; i < n; i++) {\n            powBase[i + 1] = (int) ((long) powBase[i] * BASE % MOD);\n            preHash[i + 1] = (int) (((long) preHash[i] * BASE + t[i]) % MOD);\n        }\n\n        Map<Integer, Map<Integer, Integer>> minCost = new TreeMap<>();\n        for (int i = 0; i < words.length; i++) {\n            long h = 0;\n            for (char b : words[i].toCharArray()) {\n                h = (h * BASE + b) % MOD;\n            }\n            minCost.computeIfAbsent(words[i].length(), k -> new HashMap<>())\n                   .merge((int) h, costs[i], Integer::min);\n        }\n\n        int[] f = new int[n + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (Map.Entry<Integer, Map<Integer, Integer>> e : minCost.entrySet()) {\n                int len = e.getKey();\n                if (len > i) {\n                    break;\n                }\n                int subHash = (int) (((preHash[i] - (long) preHash[i - len] * powBase[len]) % MOD + MOD) % MOD);\n                f[i] = Math.min(f[i], f[i - len] + e.getValue().getOrDefault(subHash, Integer.MAX_VALUE / 2));\n            }\n        }\n        return f[n] == Integer.MAX_VALUE / 2 ? -1 : f[n];\n    }\n}\n"}
{"task_id": "java/19", "content": "\n涉及面试题：字节跳动 快手 华为 滴滴 头条\n\n", "groundtruth": "class Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n        Set<Integer> set = new HashSet<>(nums.length); // 预分配空间\n        for (int x : nums) {\n            set.add(x);\n        }\n        ListNode dummy = new ListNode(0, head);\n        ListNode cur = dummy;\n        while (cur.next != null) {\n            if (set.contains(cur.next.val)) {\n                cur.next = cur.next.next; // 删除\n            } else {\n                cur = cur.next; // 向后移动\n            }\n        }\n        return dummy.next;\n    }\n}\n"}
{"task_id": "java/20", "content": "\n\n\n\nAnswer \n\nclass Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int[][][][] dp = new int[m][n][m][n];\n        for (int i1 = 0; i1 < m; i1++) {\n            for (int j1 = 0; j1 < n; j1++) {\n                for (int i2 = 0; i2 < m; i2++) {\n                    Arrays.fill(dp[i1][j1][i2], Integer.MAX_VALUE);\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j][i][j] = 0;\n            }\n        }\n        for (int rowCount = 1; rowCount <= m; rowCount++) {\n            for (int colCount = 1; colCount <= n; colCount++) {\n                for (int i1 = 0, i2 = rowCount - 1; i2 < m; i1++, i2++) {\n                    for (int j1 = 0, j2 = colCount - 1; j2 < n; j1++, j2++) {\n                        for (int midRow = i1; midRow < i2; midRow++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], horizontalCut[midRow] + dp[i1][j1][midRow][j2] + dp[midRow + 1][j1][i2][j2]);\n                        }\n                        for (int midCol = j1; midCol < j2; midCol++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], verticalCut[midCol] + dp[i1][j1][i2][midCol] + dp[i1][midCol + 1][i2][j2]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][m - 1][n - 1];\n    }\n}\n\n", "groundtruth": "class Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int[][][][] dp = new int[m][n][m][n];\n        for (int i1 = 0; i1 < m; i1++) {\n            for (int j1 = 0; j1 < n; j1++) {\n                for (int i2 = 0; i2 < m; i2++) {\n                    Arrays.fill(dp[i1][j1][i2], Integer.MAX_VALUE);\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j][i][j] = 0;\n            }\n        }\n        for (int rowCount = 1; rowCount <= m; rowCount++) {\n            for (int colCount = 1; colCount <= n; colCount++) {\n                for (int i1 = 0, i2 = rowCount - 1; i2 < m; i1++, i2++) {\n                    for (int j1 = 0, j2 = colCount - 1; j2 < n; j1++, j2++) {\n                        for (int midRow = i1; midRow < i2; midRow++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], horizontalCut[midRow] + dp[i1][j1][midRow][j2] + dp[midRow + 1][j1][i2][j2]);\n                        }\n                        for (int midCol = j1; midCol < j2; midCol++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], verticalCut[midCol] + dp[i1][j1][i2][midCol] + dp[i1][midCol + 1][i2][j2]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][m - 1][n - 1];\n    }\n}\n"}
{"task_id": "java/21", "content": "\n", "groundtruth": "class Solution {\n    public boolean doesAliceWin(String s) {\n        for (char c : s.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/22", "content": "\n\n \n\nExample 1:\n\nInput: S = \"011101\"\nOutput: 4\nExplanation: In \"011101\", we can perform the following operations:\n(0, 1) -> \" 01111\" with 1 operation because only 1 '1' is moved.\n(0, 1) -> \" 01111\" with 1 operation because only 1 '1' is moved.\n(0, 2) -> \" 01111\" with 2 operations because 2 '1's are moved.\n(0, 3) -> \" 01111\" with 3 operations because 3 '1's are moved.\nWe can make at most 4 operations.\n\n```\nclass Solution {\n    public int maxOperations(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int cnt1 = 0;\n        for (int i = 0; i < s.length; i++) {\n            if (s[i] == '1') {\n                cnt1++;\n            } else if (i > 0 && s[i - 1] == '1') {\n                ans += cnt1;\n            }\n        }\n        return ans;\n    }\n}\n\n```\n\n", "groundtruth": "class Solution {\n    public int maxOperations(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int cnt1 = 0;\n        for (int i = 0; i < s.length; i++) {\n            if (s[i] == '1') {\n                cnt1++;\n            } else if (i > 0 && s[i - 1] == '1') {\n                ans += cnt1;\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/23", "content": "\n", "groundtruth": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long s = target[0] - nums[0];\n        long ans = Math.abs(s);\n        for (int i = 1; i < nums.length; i++) {\n            int k = (target[i] - target[i - 1]) - (nums[i] - nums[i - 1]);\n            if (k > 0) {\n                ans += s >= 0 ? k : Math.max(k + s, 0);\n            } else {\n                ans -= s <= 0 ? k : Math.min(k + s, 0);\n            }\n            s += k;\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/24", "content": "\nHit counter:\n0\n475\n127\n375\n237\n157\n275\n197\n437\n227\n377\n357\n49\n75\n257\n427\n417\n77\n177\n87\n187\n387\n447\n207\n267\n137\n117\n97\n47\n147\n347\n467\n287\n457\n107\n327\n487\n407\n317\n217\n67\n367\n397\n477\n167\n247\n297\n827\n2327\n737\n2927\n3527\n3127\n4327\n2727\n3927\n2527\n4127\n4727\n1827\n4427\n2427\n3827\n4227\n2627\n1727\n4527\n3327\n2227\n3627\n2127\n3427\n2027\n7327\n4027\n4927\n4727\n3027\n3227\n4627\n3727\n2827\n2328\n4228\n4128\n4428\n2628\n3128\n4528\n3428\n4328\n2028\n4728\n4828\n1928\n2928\n3328\n2728\n2228\n4028\n728\n3628\n3028\n2528\n4928\n3928\n7428\n3828\n1028\n4628\n1228\n4728\n2828\n2428\n828\n2128\n3228\n1828\n3528\n1128\n928\n3728\n4828\n1428\n1628\n2329\n3129\n4129\n1229\n1829\n1729\n2429\n2529\n1529\n3329\n4429\n4629\n2229\n4529\n4929\n1329\n4229\n4029\n3629\n2029\n3229\n3829\n2129\n929\n2929\n4729\n4829\n3729\n4329\n7529\n829\n1429\n1129\n3929\n3529\n1929\n3429\n3029\n2629\n4229\n23210\n31210\n41210\n12210\n18210\n17210\n24210\n25210\n15210\n33210\n44210\n46210\n22210\n45210\n49210\n13210\n42210\n40210\n36210\n20210\n32210\n38210\n21210\n9210\n29210\n47210\n48210\n37210\n43210\n75210\n8210\n14210\n11210\n39210\n35210\n19210\n34210\n30210\n26210\n42210\n23211\n31211\n41211\n12211\n18211\n17211\n24211\n25211\n15211\n33211\n44211\n46211\n22211\n45211\n49211\n13211\n42211\n40211\n36211\n20211\n32211\n38211\n21211\n9211\n29211\n47211\n48211\n37211\n43211\n75211\n8211\n14211\n11211\n39211\n35211\n19211\n34211\n30210\n26210\n42210\n2322\n3122\n4122\n1222\n1822\n1722\n2422\n2522\n1522\n3322\n4422\n4622\n2222\n4522\n4922\n1322\n4222\n4022\n3622\n2022\n3222\n3822\n2122\n922\n2922\n4722\n4822\n3722\n4322\n7522\n822\n1422\n1122\n3922\n3522\n1922\n3422\n3022\n2622\n4222\n2322\n252\n402\n182\n122\n422\n112\n172\n142\n92\n472\n82\n222\n322\n192\n272\n212\n292\n242\n202\n312\n262\n132\n252\n362\n412\n182\n442\n332\n462\n102\n302\n382\n352\n152\n392\n432\n162\n372\n452\n752\n482\n282\n102\n302\n412\n132\n372\n112\n172\n242\n342\n362\n122\n142\n92\n382\n352\n262\n312\n322\n402\n422\n472\n482\n252\n192\n202\n432\n292\n102\n462\n282\n222\n162\n492\n332\n472\n452\n182\n152\n482\n212\n232\n422\n342\n442\n272\n202\n92\n352\n412\n452\n132\n242\n402\n362\n102\n192\n302\n162\n122\n222\n112\n172\n462\n252\n142\n382\n152\n372\n212\n82\n232\n262\n432\n392\n472\n292\n492\n452\n752\n472\n482\n112\n292\n432\n212\n172\n382\n152\n402\n232\n162\n132\n182\n192\n302\n462\n262\n142\n122\n202\n102\n352\n442\n422\n372\n412\n282\n312\n322\n33", "groundtruth": "class Solution {\n    private static final int MX = 31622;\n    private static final int[] PI = new int[MX + 1];\n\n    static {\n        for (int i = 2; i <= MX; i++) {\n            if (PI[i] == 0) { // i 是质数\n                PI[i] = PI[i - 1] + 1;\n                for (int j = i * i; j <= MX; j += i) {\n                    PI[j] = -1; // 标记 i 的倍数为合数\n                }\n            } else {\n                PI[i] = PI[i - 1];\n            }\n        }\n    }\n\n    public int nonSpecialCount(int l, int r) {\n        return r - l + 1 - (PI[(int) Math.sqrt(r)] - PI[(int) Math.sqrt(l - 1)]);\n    }\n}\n"}
{"task_id": "python/0", "content": "", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n    "}
{"task_id": "python/1", "content": "\nCode:\n\n class neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n "}
{"task_id": "python/2", "content": "\n<details>\n<summary>Answer</summary>\n\n```Python\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n```\n</details>", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/3", "content": "\n<pre>\n<strong>Input:</strong> n = 5, queries = [[0,1],[1,2],[2,3],[3,4]]\n<strong>Output:</strong> [3,1,2,3]\n<strong>Explanation:</strong> \nThe shortest path after each query is as follows:\nFor i = 0, we have [0,1,2,3,4].\nFor i = 1, we have [0,1,2,3] because the edge from city 0 to city 1 was added.\nFor i = 2, we have [0,1,2,3,4] because the edge from city 1 to city 2 was added.\nFor i = 3, we have [0,1,2,3,4] because the edge from city 2 to city 3 was added.\n</pre>\n\n<pre>\n<strong>Input:</strong> n = 3, queries = [[1,2],[0,1],[2,0]]\n<strong>Output:</strong> [6,5,-1]\n</pre>\n\n<pre>\n<strong>Input:</strong> n = 5, queries = [[0,4],[4,0],[0,1],[1,0],[2,3],[3,2]]\n<strong>Output:</strong> [12,12,6,12,10,10]\n</pre>\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n  "}
{"task_id": "python/4", "content": "\n```python\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n```", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/5", "content": "", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/6", "content": "\n\n\ndef find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/7", "content": "\n\n\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(l)\n            i = find(r)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/8", "content": "\n\nn = 5\nqueries = [[0, 1], [1, 2], [0, 3], [2, 4], [2, 3]]\nqueries = [[0, 1], [1, 2], [0, 3], [2, 4], [2, 3]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/9", "content": "```\nimport numpy as np\n```\ndef numberOfAlternatingGroups(colors: List[int], queries: List[List[int]]) -> List[int]:\n    sl = SortedList()\n    t = FenwickTree(len(colors))\n\n    def update(i: int, op: int) -> None:\n        idx = sl.bisect_left(i)\n        pre = sl[idx - 1]\n        nxt = sl[idx % len(sl)]\n\n        t.update((nxt - pre - 1) % len(colors) + 1, -op)\n        t.update((i - pre) % len(colors), op)\n        t.update((nxt - i) % len(colors), op)\n\n    def add(i: int) -> None:\n        if not sl:\n            t.update(len(colors), 1)\n        else:\n            update(i, 1)\n        sl.add(i)\n\n    def remove(i: int) -> None:\n        sl.remove(i)\n        if not sl:\n            t.update(len(colors), -1)\n        else:\n            update(i, -1)\n\n    for i, c in enumerate(colors):\n        if c == colors[(i + 1) % len(colors)]:\n            add(i)\n\n    ans = []\n    for q in queries:\n        if q[0] == 1:\n            if not sl:\n                ans.append(len(colors))\n            else:\n                cnt, s = t.query(q[1])\n                ans.append(s - cnt * (q[1] - 1))\n        else:\n            i, c = q[1], q[2]\n            if colors[i] == c:\n                continue\n            pre, nxt = (i - 1) % len(colors), (i + 1) % len(colors)\n            if colors[pre] == colors[i]:\n                remove(pre)\n            if colors[i] == colors[nxt]:\n                remove(i)\n            colors[i] = c\n            if colors[pre] == colors[i]:\n                add(pre)\n            if colors[i] == colors[nxt]:\n                add(i)\n    return ans\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/10", "content": "\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/11", "content": "\n#include <cstdio>\n#include <vector>\n#include <queue>\nusing namespace std;\n\n#define INF 0x3FFFFFFF\n\nstruct node{\n    int idx, lca, dis, d1, d2, c1, c2, col;\n    node(int id, int p, int d, int d1 = 0, int d2 = 0, int c1 = 0, int c2 = 0, int co = 0){\n        idx = id, lca = p, dis = d, this->d1 = d1, this->d2 = d2, c1 = c1, c2 = c2, col = co;\n    }\n};\nvector <int> tree[20002];\nint par[20002], dep[20002], col[20002];\nint dist[20002][18];\nbool vis[20002];\n\nint diameter(int p, int cur){\n    vis[cur] = true;\n    int ans = INF;\n    for(int i = 0; i < tree[cur].size(); i++){\n        if(tree[cur][i] != p && !vis[tree[cur][i]]){\n            dep[tree[cur][i]] = dep[cur] + 1;\n            par[tree[cur][i]] = cur;\n            ans = min(ans, dep[tree[cur][i]] + diameter(cur, tree[cur][i]));\n        }\n    }\n    return ans;\n}\n\nvoid update(node cur){\n    vector <int> s;\n    s.push_back(cur.lca);\n    int x = cur.lca, sum = 0;\n    while(x != cur.idx){\n        sum += dep[x];\n        x = par[x];\n        s.push_back(x);\n    }\n    x = cur.idx;\n    int d1 = (sum == cur.dis) ? cur.d1 : (cur.d1 + sum - cur.dis), d2 = (sum == cur.dis) ? cur.d2 : (cur.d2 + sum - cur.dis);\n    while(x != cur.lca){\n        x = s.back();\n        s.pop_back();\n        dist[x][cur.col] = max(dist[x][cur.col], max(d1, d2));\n        d1 = max(d1, dist[x][cur.col] + cur.c1 + cur.c2);\n        d2 = max(d2, dist[x][cur.col] + cur.c1 + cur.c2);\n    }\n}\n\nint main(){\n    int n, m;\n    int c1, c2, id, col, d1, d2;\n    int cnt = 0, sum = 0;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i++){\n        scanf(\"%d %d\", &col, &d1);\n        tree[i].push_back(d1);\n        vis[i] = false;\n        dep[i] = 0;\n        par[i] = 0;\n        dist[i][col] = d1;\n        sum += d1;\n    }\n    for(int i = 1; i <= n; i++){\n        scanf(\"%d %d\", &col, &d2);\n        tree[i].push_back(d2);\n        vis[i] = false;\n        dep[i] = 0;\n        par[i] = 0;\n        dist[i][col] = d2;\n        sum += d2;\n    }\n    n = diameter(0, 1);\n    for(int i = 1; i <= n; i++){\n        for(int j = 0; j < tree[i].size(); j++) update(node(i, par[i], dep[i], dist[i][j], dist[i][j], tree[i][j], tree[i][j], j));\n    }\n    for(int i = 1; i <= n; i++){\n        printf(\"%d\", dist[i][0]);\n        for(int j = 1; j < n; j++) printf(\" %d\", dist[i][j]);\n        printf(\"\\n\");\n    }\n}\n\n", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/12", "content": "\n\nAlice wins if the sum of her numbers is strictly greater than the sum of Bob's numbers. For example, if the sum of single-digit numbers is 20 and the sum of double-digit numbers is 18, Alice wins.\nsingle=single+it\ndouble=double+it\n", "groundtruth": " class Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\n        double=0\n        for it in nums:\n            if it>=10: \n                double=double+it \n            else:\n                single=single+it  \n        \n        return single !=double\n "}
{"task_id": "python/13", "content": "\nNote:\nYou may assume that the number of non-special numbers in the range [l, r] is smaller than 2 * 10^7. ", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n"}
{"task_id": "python/14", "content": "\nYour answer is correct.\n\n```\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        count = r - l + 1\n        for i in range(l, r + 1):\n            c = 1\n            for j in range(2, int(pow(i, 0.5)) + 1):\n                if i % j == 0:\n                    c += 2\n                    if c > 4:\n                        break\n            if c == 4:\n                count -= 1\n        return count\n\n\n\ndef main():\n    print(Solution().nonSpecialCount(l = 1, r = 2))\n    print(Solution().nonSpecialCount(l = 3, r = 6))\n    print(Solution().nonSpecialCount(l = 15, r = 17))\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n "}
{"task_id": "python/15", "content": "'''\nimport collections\n\ndef numberOfSubstrings(s):\n    n = len(s)\n    a = [i for i, b in enumerate(s) if b == '0']\n    tot1 = n - len(a)\n    a.append(n)  # 哨兵\n    ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n    for left, b in enumerate(s):\n        if b == '1':\n            ans += len(a) - i - 1\n        for k in range(i, len(a) - 1):\n            cnt0 = k - i + 1\n            if cnt0 * cnt0 > tot1:\n                break\n            cnt1 = a[k] - left - (k - i)\n            # 可以改成手动比大小，那样更快\n            ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n        if b =='0':\n            i += 1  # 这个 0 后面不会再枚举到了\n    return ans\n\n\n'''\n\nimport collections\n\ndef numberOfSubstrings(s):\n    n = len(s)\n    a = [i for i, b in enumerate(s) if b == '0']\n    tot1 = n - len(a)\n    a.append(n)  # 哨兵\n    ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n    for left, b in enumerate(s):\n        if b == '1':\n            ans += len(a) - i - 1\n        for k in range(i, len(a) - 1):\n            cnt0 = k - i + 1\n            if cnt0 * cnt0 > tot1:\n                break\n            cnt1 = a[k] - left - (k - i)\n            # 可以改成手动比大小，那样更快\n            ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n        if b =='0':\n            i += 1  # 这个 0 后面不会再枚举到了\n    return ans\n", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n "}
{"task_id": "python/16", "content": "\n\"\"\"\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = a[k + 1] - a[k]\n                cnt1 = left - a[k] + 1  # 坐标增加的一位 都是 1\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n\"\"\"", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/17", "content": "\n# Find the number of substrings with a dominant ones \n# using sliding window.\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += cnt0 + cnt1\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n\n", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/18", "content": "", "groundtruth": " class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n    "}
{"task_id": "python/19", "content": "\n\nX=4\nY=6\ncircles=[[0,0,5],[0,5,1000000000],[4,5,6]]\nprint(Solution().canReachCorner(X, Y, circles))\n\n\n\n\n\n", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/20", "content": "\nhttps://youtu.be/KnKiHdF_Cq0\n", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/21", "content": "", "groundtruth": "\nclass Solution:\n    def findChampion(self, grid: List[List[int]]) -> int:\n        def check(i):\n            for j in range(n):\n                if i == j:\n                    continue\n                elif grid[i][j] == 1 and grid[j][i] == 0:\n                    continue\n                else:\n                    return False\n            return True\n        n = len(grid)\n        for i in range(n):\n            if check(i):\n                return i\n"}
{"task_id": "python/22", "content": "\n# Write your code here\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for i in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/23", "content": "", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/24", "content": "\n\ndef maximumScoreAfterOperations(edges, nums):\n    n = len(nums)\n    path = [[] for _ in range(n)]\n    for u, v in edges:\n        path[u].append(v)\n        path[v].append(u)\n        \n    def dfs(u, p = -1):\n        dp0, dp1 = 0, 0\n        f = 0\n        for v in path[u]:\n            if v != p:\n                v0, v1 = dfs(v, u)\n                dp0 += v0\n                dp1 += v1\n                f = 1\n        if not f: return nums[u], 0\n        return dp0 + nums[u], max(dp1 + nums[u], 0)\n        \n    return dfs(0)[1]\n\n\nn = 5\nnums = [1,2,4,8,16]\nedges = [[1,2],[3,4],[2,3],[1,4],[2,5],[5,4]]\nprint(maximumScoreAfterOperations(edges, nums))\n", "groundtruth": "\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/25", "content": "\n# 53 번\n\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))\n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect.bisect_left(b, x - i)\n            f = b[j] if j < len(b) and b[j] - i == x else x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n\n\n\n\n# 57 번\n\nclass Solution:\n    def findDiagonalOrder(self, matrix: List[List[int]]) -> List[int]:\n        n, m, res = len(matrix), len(matrix[0]), []\n        for i in range(n + m - 1):\n            if i % 2 == 0:\n                l, r, c = max(0, i - m + 1), min(i, n - 1), max(0, i)\n                while l <= r:\n                    res.append(matrix[l][c - l])\n                    l += 1\n            else:\n                r, l, c = max(0, i - m + 1), min(i, n - 1), max(0, i)\n                while l <= r:\n                    res.append(matrix[l][c - l])\n                    l += 1\n        return res\n\n# 64 번\n\nclass Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n        ans, cur = float('-inf'), 0\n        players = list(zip(scores, ages))\n        players.sort(key = lambda player: (player[0], -player[1]))\n        for player in players:\n            cur = max(cur, player[1])\n            ans = max(ans, player[0] + cur)\n        return ans\n\n\n# 67 번\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        n, max_len = len(nums), 0\n        dp = [1] * n\n        count = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    if dp[i] < dp[j] + 1:\n                        dp[i] = dp[j] + 1\n                        count[i] = count[j]\n                    elif dp[i] == dp[j] + 1:\n                        count[i] += count[j]\n            if max_len < dp[i]:\n                max_len = dp[i]\n        res = 0\n        for i in range(n):\n            if max_len == dp[i]:\n                res += count[i]\n        return res\n\n\n# 68 번\n\nclass Solution:\n    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:\n        res = []\n        left, right = 0, len(arr) - 1\n        while right - left + 1 > k:\n            if x - arr[left] > arr[right] - x:\n                left += 1\n            else:\n                right -= 1\n        while right - left + 1 < k:\n            if right + 1 < len(arr) and abs(arr[right + 1] - x) <= abs(arr[right] - x):\n                right += 1\n            else:\n                left -= 1\n        while right - left + 1 > k:\n            if abs(arr[left] - x) <= abs(arr[right] - x):\n                left += 1\n            else:\n                right -= 1\n        return sorted(arr[left:right + 1])\n\n# 71 번\n\nclass Solution:\n    def simplifyPath(self, path: str) -> str:\n        stk = []\n        for x in path.split(\"/\"):\n            if x in [\"\", \".\"]:\n                continue\n            elif x == \"..\":\n                if stk:\n                    stk.pop()\n            else:\n                stk.append(x)\n        return \"/\" + \"/\".join(stk)\n\n# 72 번\n\nclass Solution:\n    def __init__(self):\n        self.res = []\n        self.ans = float('inf')\n        \n    def minPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        l, r = 0, len(nums) - 1\n        while l < r:\n            s = nums[l] + nums[r]\n            self.ans = min(self.ans, s)\n            self.res.append(s)\n            l += 1\n            r -= 1\n        return self.ans\n\n# 74 번\n\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        cur, sum, cnt = 0, 0, 0\n        n = len(gas)\n        while cnt < n:\n            if gas[cnt] < cost[cnt]:\n                cnt += 1\n                cur = 0\n                sum = 0\n            else:\n                sum += gas[cnt] - cost[cnt]\n                cur += gas[cnt] - cost[cnt]\n                cnt += 1\n                if cur < 0:\n                    continue\n                elif cur >= 0:\n                    return cnt - 1\n        return -1\n\n# 77 번\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        dic = {}\n        res = []\n        for i in strs:\n            s = ''.join(sorted(i))\n            if s not in dic:\n                dic[s] = []\n            dic[s].append(i)\n        for key, value in dic.items():\n            res.append(value)\n        return res\n\n# 78 번\n\nclass Solution:\n    def findLength(self, A: List[int], B: List[int]) -> int:\n        m = len(A) + 1\n        n = len(B) + 1\n        dp = [[0] * (n) for i in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                if A[i-1] == B[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n        return max(max(x) for x in dp)\n\n# 79 번\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        n, m = len(board), len(board[0])\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == word[0]:\n                    if self.word_find(board, word, i, j, 0):\n                        return True\n        return False\n                \n    def word_find(self, board, word, i, j, idx):\n        if idx == len(word) - 1:\n            return True\n        n, m = len(board), len(board[0])\n        if i < 0 or i >= n or j < 0 or j >= m or board[i][j] != word[idx]:\n            return", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/26", "content": "", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/27", "content": "\n  \n  \n\ndef Solution(nums:List[int])->int:\n    b = sorted(set(x - i for i, x in enumerate(nums)))\n    t = BIT(len(b) + 1)\n    for i, x in enumerate(nums):\n        j = bisect_left(b, x - i) + 1\n        f = max(t.pre_max(j), 0) + x\n        t.update(j, f)\n    return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n:int):\n        self.tree = [float(\"-inf\")]*n\n\n    def update(self, i:int, val:int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i:int) -> int:\n        mx = self.tree[0]\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n    \nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))\n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1\n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))  \n", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/28", "content": "\n\n\n\n", "groundtruth": "\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/29", "content": "\n", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/30", "content": "", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/31", "content": "", "groundtruth": "\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/32", "content": "\nAnswers\n\n# @cache\ndef dfs(i: int, j: int, fa: int) -> int:\n    res1 = (coins[i] >> j) - k\n    res2 = coins[i] >> (j + 1)\n    for ch in g[i]:\n        if ch != fa:\n            res1 += dfs(ch, j, i)  \n            if j < 13:  \n                res2 += dfs(ch, j + 1, i)  \n    return max(res1, res2)\nreturn dfs(0, 0, -1)", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/33", "content": "```\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = ____\n            res2 = ____\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i)  \n                    if j < 13:  \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/34", "content": "", "groundtruth": " class Solution:     def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:         g = [[] for _ in coins]         for x, y in edges:             g[x].append(y)             g[y].append(x)         @cache         def dfs(i: int, j: int, fa: int) -> int:             res1 = (coins[i] >> j) - k             res2 = coins[i] >> (j + 1)             for ch in g[i]:                 if ch != fa:                     res1 += dfs(ch, j, i)                      if j < 13:                          res2 += dfs(ch, j + 1, i)              return max(res1, res2)         return dfs(0, 0, -1) "}
{"task_id": "python/35", "content": "Answer ：\n class Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (4 * n)\n        todo = [0] * (4 * n)\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n            todo[o] = 0\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/36", "content": "", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/37", "content": "```\n\n<details>\n<summary>Answer</summary>\n\n```\n        ...\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += (i - j) * (n - i + 1)\n            ans += s\n            last[x] = i\n        return ans\n```\n\n</details>\n\n### Problem 2\n\nConsider the following code:\n\n```\nclass Solution:\n    def solve(self, nums: List[int]) -> bool:\n        if (3 not in nums):\n            return False\n        if (len(nums) < 7):\n            return False\n        count = 0\n        i = 0\n        while i < len(nums):\n            if (nums[i] == 3):\n                count += 1\n                i += 1\n                if (count >= 3):\n                    return True\n                while (i < len(nums) and nums[i] == 3):\n                    i += 1\n            i += 1\n        return False\n```\n\nThe code is used to find if there exists 3 or more consecutive 3's in a list containing at least 7 integers. Write test code that checks the correctness of the method. (Assume you have imported the solution code into your IDE)\n\n<details>\n<summary>Answer</summary>\n\n```\ns = Solution()\nassert s.solve([1, 2, 3, 4, 5]) == False\nassert s.solve([1, 2, 3, 3, 3, 3]) == True\nassert s.solve([1, 2, 3, 3, 3]) == False\nassert s.solve([1, 2, 3, 4, 5, 6, 7]) == False\nassert s.solve([1, 2, 3, 3, 3, 3, 3, 3]) == True\nassert s.solve([1, 2, 3, 3, 3, 3, 3, 3, 3]) == True\nassert s.solve([1, 2, 3, 3, 3, 3, 3, 3, 3, 3]) == True\n```\n\n</details>\n\n### Problem 3\n\nYou are given a 2D grid consisting of 0s and 1s, where 1 represents land and 0 represents water. Two cells are said to be connected if they are adjacent to each other horizontally, vertically, or diagonally. The grid is completely surrounded by water, and there is only one island (i.e., one or more connected land cells). The island does not have \"lakes\" (water inside that is not connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\nFor example, given the following grid:\n\n```\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n```\n\nThe answer is 16.\n\n<details>\n<summary>Answer</summary>\n\n```python\nclass Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    ans += 4\n                    if i > 0 and grid[i - 1][j] == 1:\n                        ans -= 2\n                    if j > 0 and grid[i][j - 1] == 1:\n                        ans -= 2\n        return ans\n```\n\n</details>", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/38", "content": "\n#code :\n \nclass Solution:     def minChanges(self, s: str) -> int:         cnt = 0         for i in range(0, len(s), 2):             if s[i] != s[i+1]:                 cnt += 1                 print(s)         return cnt\n", "groundtruth": " class Solution:     def minChanges(self, s: str) -> int:         cnt = 0         for i in range(0, len(s), 2):             if len(set(s[i:i + 2])) > 1:                 cnt += 1                 print(s)         return cnt "}
{"task_id": "python/39", "content": "<pre>\n<code><b>class Solution:</b>\n    <b>def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:</b>\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = max(s, x)\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                if f[j] < f[j - x] + 1:\n                    f[j] = f[j - x] + 1\n        return f[-1] if f[-1] > 0 else -1</code></pre>\n", "groundtruth": " class Solution:     def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:         f = [0] + [-inf] * target         s = 0         for x in nums:             s = min(s + x, target)             for j in range(s, x - 1, -1):                 # f[j] = max(f[j], f[j - x] + 1)                 if f[j] < f[j - x] + 1:                     f[j] = f[j - x] + 1         return f[-1] if f[-1] > 0 else -1 "}
{"task_id": "python/40", "content": "\n#\n# Find all possible vertical segments formed by horizontal fences.\n# Find all possible horizontal segments formed by vertical fences.\n# Calculate the maximum area of intersection.\n\n# Vertical segments.\n# Find all possible horizontal segments formed by vertical fences.\n# Calculate the maximum area of intersection.\n\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        # Vertical segments.\n        v = self.f(vFences, n)\n\n        # Horizontal segments.\n        h = self.f(hFences, m)\n\n        # Maximum area of intersection.\n        ans = max(h & v, default=0)\n        return ans * ans % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        \"\"\" Find all possible segments formed by fences. \"\"\"\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n\n#\n# There is a large rectangular field, with dimensions (m - 1) x (n - 1)\n# with corners at (1, 1) and (m, n) containing some horizontal and\n# vertical fences given in arrays hFences and vFences respectively.\n# Horizontal fences are from the coordinates (hFences[i], 1) to\n# (hFences[i], n) and vertical fences are from the coordinates (1,\n# vFences[i]) to (m, vFences[i]). Return the maximum area of a square\n# field that can be formed by removing some fences (possibly none) or\n# -1 if it is impossible to make a square field. Since the answer may\n# be large, return it modulo 10**9 + 7.\n# Note:\n# The field is surrounded by two horizontal fences from the\n# coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical\n# fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n).\n# These fences cannot be removed.\n\n", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/41", "content": "", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/42", "content": "\n# The completed code is as follows:\n\nclass Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1\n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/43", "content": "\n#\n#\n# little test\n# \nclass Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 \n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/44", "content": "", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/45", "content": "Note:\nThe length of source and target is less than or equal to 10.\nThe number of original and changed strings is less than or equal to 100.\nThe length of original and changed strings is less than or equal to 100.\nThe number of operation times is less than or equal to 1000.\nEach original and changed string is different.", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                      continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/46", "content": "\n```\nfrom collections import defaultdict\nfrom functools import cache\ninf = 1e9\nclass Solution:    \n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:        \n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)\n            len_to_strs[len(y)].add(y)\n            dis[x][y] = c\n            dis[x][x] = 0\n            dis[y][y] = 0\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:\n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1)\n            for size, strs in len_to_strs.items():\n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:\n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n```\n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/47", "content": "", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/48", "content": "Note: Your submission will run multiple times with different input values.\n\n\nfrom typing import List\n\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n\n", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/49", "content": "", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/50", "content": "", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/51", "content": "```python\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            if x != fa[x]:\n                fa[x] = find(fa[x])\n            return fa[x]\n\n        def union(a: int, b: int) -> None:\n            root_a, root_b = find(a), find(b)\n            if root_a != root_b:\n                fa[root_b] = root_a\n\n        dist = [math.inf] * n\n        dist[0] = 0\n        ans = []\n        for i in queries:\n            u, v = i[0], i[1]\n            if find(u) != find(v):\n                union(u, v)\n                dist[v] = dist[u] + 1\n                dist[0] = 0\n                for j in range(1, n):\n                    find(j)\n                    dist[0] = min(dist[0], dist[j])\n            ans.append(dist[0])\n        return ans\n```\n", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/52", "content": " \nclass FenwickTree:\n    def __init__(self, n: int):\n        self.sums = [0] * (n + 1)\n        self.n = n\n\n    def update(self, i: int, val: int) -> None:\n        i += 1\n        while i <= self.n:\n            self.sums[i] += val\n            i += i & -i\n\n    def query(self, k: int) -> tuple:\n        if k <= 0:\n            return 0, 0\n        res = 0\n        i = k\n        while i > 0:\n            res += self.sums[i]\n            i -= i & -i\n        return res, k * (k - 1) // 2 - res\n\n", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/53", "content": "", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/54", "content": "\nExample:\n\nInput: nums = [2,7,11,15]\nOutput: true\nExplanation: Alice can choose all double-digit numbers, [11,15] and the sum of these is greater than the sum of all single-digit numbers, [2,7].\n\nHide Hint #1  \nTry all possible combinations for Alice and return true if she can win the game.\n\n\n\n\n\nAlice and Bob play a game that involves sequentially covering numbers from a sequence 1,2,3...n with non-negative integers x_i. Alice starts from covering x_1 while Bob starts from covering x_2. In each turn, the player covers the next uncovered number with the smallest possible non-negative integer.\n\nThe player who cannot make a move loses the game. Given a sequence of length n, determine whether Alice can win the game. \n\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        if len(nums) < 2:\n            return False\n        seen = set()\n        def alice(remain):\n            if remain in seen:\n                return False\n            seen.add(remain)\n            for i in range(1,2):\n                if remain - i > 0 and not bob(remain - i):\n                    return True\n            return False\n        def bob(remain):\n            if remain in seen:\n                return False\n            seen.add(remain)\n            for i in range(1,2):\n                if remain - i > 0 and not alice(remain - i):\n                    return True\n            return False\n        \n        return alice(sum(nums))\n\nTime: O(2^N) where N is the length of the nums.\nSpace: O(N)\n\n\n", "groundtruth": "\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\ndouble=0\nfor it in nums:\nif it>=10: \ndouble=double+it \nelse:\nsingle=single+it  \n        \nreturn single !=double\n "}
{"task_id": "python/55", "content": "\n\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        count = 0\n        left = 0\n        for i, c in enumerate(s):\n            count += int(c)\n            if count ** 2 <= i - left + 1:\n                count = 0\n                left = i + 1\n        return left\n        \n", "groundtruth": "\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/56", "content": "", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/57", "content": "\ndef dfs(i):\n    for j in range(i + 1, len(circles)):\n        if not vis[j] and in_circle(*circles[j], 0, 0):\n            vis[j] = True\n            if dfs(j):\n                return True\n\nreturn dfs(0) or in_circle(0, 0, X, Y) or in_circle(0, 0, X, 0) or in_circle(0, 0, 0, Y)", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/58", "content": "\n```python\n        def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n            if visited[start]:\n                return 0\n            \n            visited[start] = True\n            count = 1\n            for child in graph[start]:\n                count += self.dfs(graph, child, visited)\n            \n            return count\n```\n\n", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/59", "content": "Example 1:\nInput: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]\nOutput: 4\nExplanation:\nEach team has a unique champion in the tournament.\nTeam 0's champion is team 4.\nTeam 1's champion is team 4.\nTeam 2's champion is team 4.\nTeam 3's champion is team 4.\nTeam 4's champion is team 4.\nThus, we return 4 as the answer.\nExample 2:\nInput: n = 6, edges = [[0,1],[1,2],[2,4],[4,1],[4,5]]\nOutput: -1\nExplanation:\nTeam 4 has no champion.\nTeam 5 has no champion.\nThus, there is no unique champion, so we return -1.\n\n```\nfrom collections import defaultdict\n\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        graph = defaultdict(list)\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n\n        visited = [False] * n\n        res = -1\n        for i in range(n):\n            if not visited[i]:\n                tmp = self.dfs(graph, i, visited)\n                if tmp == -1:\n                    return -1\n                res = tmp\n        return res\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        if visited[start]:\n            return -1\n        visited[start] = True\n        for neighbor in graph[start]:\n            tmp = self.dfs(graph, neighbor, visited)\n            if tmp == -1:\n                return start\n        return -1\n\n\n```\n\n", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/60", "content": "", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/61", "content": "\nCode:\n\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        seen = [0] * len(nums)\n        \n        def dfs(u, p = -1):\n            seen[u] = True\n            ret = nums[u]\n            for v, w in edges:\n                if v == u: v, w = w, v\n                if (v != p and not seen[v]) or not seen[w]:\n                    ret = max(ret, dfs(v, u) + dfs(w, u))\n            return ret\n        \n        return dfs(0)[1]\n", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/62", "content": "\nNote: You may have to scroll horizontally to see the entire code.\n\n\n\n", "groundtruth": "class Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/63", "content": "\n\n\ndef findKOr(nums: List[int], k: int) -> int:\n    n = len(nums)\n    result = 0\n    for _ in range(32):\n        count = 0\n        for num in nums:\n            if (num >> _) & 1:\n                count += 1\n        if count >= k:\n            result |= 1 << _\n    return result\n", "groundtruth": "class Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/64", "content": "", "groundtruth": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n\n"}
{"task_id": "python/65", "content": "\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        res = 0\n        for i in range(n-2):\n            if nums[i+1]-nums[i] > k:\n                res += k\n            else:\n                res += nums[i+1]-nums[i]\n                k -= nums[i+1]-nums[i]\n        return res\n", "groundtruth": "class Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/66", "content": "\n\n\n\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            ans = -inf\n            for son in g[i]:\n                if son != fa:\n                    a = dfs(son, j + 1, i)\n                    b = coins[i] - k\n                    c = coins[i] // 2\n                    if b > 0:\n                        ans = max(ans, a + b)\n                    ans = max(ans, a + c)\n            if ans == -inf:\n                return 0\n            else:\n                return ans\n        \n        return dfs(0, 0, -1)", "groundtruth": "class Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/67", "content": "\n\n\ndef query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n    if L > R:\n        return 0\n\n    # print(f'query_and_add {L, R} @ {o, l, r}')\n    if L <= l and r <= R:  # query: [l,r] contained in [L,R]\n        return sum[o]\n\n    m = (l + r) // 2\n    lo = o * 2\n    ro = o * 2 + 1\n\n    # query: [L,R] 相交，需要递归到左右子树\n    if L <= m:\n        ans = query_and_add1(lo, l, m, L, R)\n    else:\n        ans = 0\n\n    if m < R:\n        ans += query_and_add1(ro, m + 1, r, L, R)\n\n    return ans", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/68", "content": "\n\n```python\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L > r or R < l:\n                return 0\n            if L <= l and r <= R:\n                return sum[o]\n            m = (l + r) // 2\n            x = query_and_add1(o * 2 + 1, l, m, L, R) + query_and_add1(o * 2 + 2, m + 1, r, L, R)\n            do(o, l, r, 1)\n            return x\n\n        do(1, 0, n - 1, 1)\n        return sum[1] * sum[1]\n\n```\n", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/69", "content": "\n\n\n\n", "groundtruth": "\nclass Solution:\n    def minChanges(self, s: str) -> int:\n        cnt = 0\n        for i in range(0, len(s), 2):\n            if len(set(s[i:i + 2])) > 1:\n                cnt += 1\n                \n        print(s)\n        return cnt\n"}
{"task_id": "python/70", "content": "\nExample 1:\nInput: nums = [1,3,5,7,9,11,13,15], target = 2\nOutput: 2\nExplanation: The longest subsequence of nums with sum closest to target is [1,3]\n\nExample 2:\nInput: nums = [1,2,3,4,5], target = 10\nOutput: -1\nExplanation: No subsequence of nums sums up to 10.\n\nExample 3:\nInput: nums = [1,2,3,4,5], target = 15\nOutput: 5\nExplanation: The longest subsequence of nums with sum closest to target is [1,2,3,4,5].", "groundtruth": "\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = min(s + x, target)\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                if f[j] < f[j - x] + 1:\n                    f[j] = f[j - x] + 1\n        return f[-1] if f[-1] > 0 else -1\n"}
{"task_id": "python/71", "content": "", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/72", "content": "Example 1:\n\nInput: m = 2, n = 2, hFences = [0], vFences = [0], modulo = 1000000007\nOutput: 1\nExplanation: Without any fences it is possible to get a square with side length 1.\nExample 2:\n\nInput: m = 2, n = 2, hFences = [0], vFences = [1], modulo = 1000000007\nOutput: 0\nExplanation: We cannot remove any fences to obtain a square with side length 1.\nExample 3:\n\nInput: m = 3, n = 3, hFences = [1], vFences = [1], modulo = 1000000007\nOutput: 4\nExplanation: The largest square has side length 2. It is not possible to get a square with side length 3.\n \n\nConstraints:\n\n2 <= n, m <= 10**4\n0 <= hFences.length <= min(m - 1, 10**5)\n0 <= vFences.length <= min(n - 1, 10**5)\n0 <= hFences[i] < m\n0 <= vFences[i] < n\n*/\n\nclass Solution {\npublic:\n    int maximizeSquareArea(int m, int n, vector<int>& hFences, vector<int>& vFences) {\n        return (int)sqrt(mod(maxArea(hFences) * maxArea(vFences), 1000000007)) - 1;\n    }\n\nprivate:\n    long long maxArea(vector<int>& pos) {\n        long long res = 0, mod = 1000000007;\n        sort(pos.begin(), pos.end());\n\n        for (int l = 1, r = 0; l < pos.size(); ++l) {\n            while (pos[l] - pos[r] > pos[l] - pos[r - 1]) ++r;\n            res = max(res, (long long)(l - r + 1) * (pos[l] - pos[r - 1]) % mod);\n        }\n\n        return res;\n    }\n};\n", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/73", "content": "\nCode:\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        dp = [[0] * (len(source) + 1) for _ in range(len(target) + 1)]\n        for i in range(1, len(target) + 1):\n            for j in range(1, len(source) + 1):\n                if target[i - 1] == source[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][k] + cost[j - 1] for k in range(j))\n\n        for original_char, changed_char in zip(original, changed):\n            for i in range(len(target)):\n                if target[i] == original_char:\n                    dp[i + 1][j] = dp[i][j - 1] + cost[j - 1]\n                    break\n\n        return dp[-1][-1] if dp[-1][-1] < float('inf') else -1\n", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        dis = [[inf] * 26 for _ in range(26)]\n        for i in range(26):\n            dis[i][i] = 0\n\n        for x, y, c in zip(original, changed, cost):\n            x = ord(x) - ord('a')\n            y = ord(y) - ord('a')\n            dis[x][y] = min(dis[x][y], c)\n\n        for k in range(26):\n            for i in range(26):\n                for j in range(26):\n                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/74", "content": "", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/75", "content": "\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        ____\n        \n        @cache\n        def dfs(i: int) -> int:\n            ____\n            \n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n```\n\nAnswer:\n\n```python\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        inf = float(\"inf\")\n        \n        @functools.lru_cache(maxsize=None)\n        def dfs(i: int) -> int:\n            if i == len(source):\n                return 0 if source == target else inf\n            \n            if i in dp:\n                return dp[i]\n            \n            ans = dfs(i + 1)\n            \n            for j in range(len(original)):\n                x = source[i:i + len(original[j])]\n                y = changed[j]\n                \n                if original[j] != x or y not in target or len(y) != len(original[j]):\n                    continue\n                \n                z = cost[j]\n                \n                if z >= ans:\n                    continue\n                \n                j = target.index(y, i + 1)\n                if (j - i) * (j - i + 1) // 2 <= len(original):\n                    continue\n                \n                ans = min(ans, z + dfs(j + 1))\n                \n            dp[i] = ans\n            return ans\n            \n        ans = dfs(0)\n        return ans if ans < inf else -1\n\n```\n\n", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "cpp/0", "content": "\nSolution:-\n```\nclass Solution {\npublic:\n    static const int mod = 1e9 + 7;\n    int specialPerm(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> f(1 << n, vector<int>(n, -1));\n        function<int(int, int)> dfs = [&](int state, int i) {\n            if (f[state][i] != -1) {\n                return f[state][i];\n            }\n            if (state == (1 << i)) {\n                return 1;\n            }\n            f[state][i] = 0;\n            for (int j = 0; j < n; j++) {\n                if (i == j || !(state >> j & 1)) {\n                    continue;\n                }\n                if (nums[i] % nums[j] != 0 && nums[j] % nums[i] != 0) {\n                    continue;\n                }\n                f[state][i] = (f[state][i] + dfs(state | (1 << j), j)) % mod;\n            }\n            return f[state][i];\n        };\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            res = (res + dfs(1 << i, i)) % mod;\n        }\n        return res;\n    }\n};\n```", "groundtruth": "class Solution {public:static const int mod = 1e9 + 7;int specialPerm(vector<int>& nums) {int n = nums.size();vector<vector<int>> f(1 << n, vector<int>(n, -1));function<int(int, int)> dfs = [&](int state, int i) {if (f[state][i] != -1) {return f[state][i];}if (state == (1 << i)) {return 1;}f[state][i] = 0;for (int j = 0; j < n; j++) {if (i == j || !(state >> j & 1)) {continue;}if (nums[i] % nums[j] != 0 && nums[j] % nums[i] != 0) {continue;}f[state][i] = (f[state][i] + dfs(state ^ (1 << i), j)) % mod;}return f[state][i];};int res = 0;for (int i = 0; i < n; i++) {res = (res + dfs((1 << n) - 1, i)) % mod;}return res;}};"}
{"task_id": "cpp/1", "content": "\n \nExample 1:\n\nInput: cost = [1,2,3], time = [1,2,1]\nOutput: 4\nExplanation:\nIn the beginning, you have 2 painters, and you must hire the paid painter at a cost of 1.\n\nYou assign the free painter to paint the 2nd wall.\nYou assign the paid painter to paint the 1st and 3rd walls.\n\nNote that there may be 0, 1, or 2 free painters that you must hire at a cost of 0.\nIf there are 0 free painters, you may paint the first wall in 1 unit of time.\nIf there is 1 free painter, you may paint the second wall in 2 units of time.\nIf there are 2 free painters, you may paint the second and third walls in 2 + 1 = 3 units of time.\nExample 2:\n\nInput: cost = [3,1,1], time = [1,1,1]\nOutput: 3\nExplanation:\nIf you hire the free painter at a cost of 0, you may assign the paid painter to paint the 1st and 3rd walls and paint the second wall in 2 units of time.\nIf you hire the paid painter at a cost of 3, you may assign the free painter to paint the 2nd wall and paint the first and third walls in 3 + 1 = 4 units of time.\n\nclass Solution {public:int paintWalls(vector<int>& cost, vector<int>& time) {int n = cost.size();vector<int> f(n * 2 + 1, INT_MAX / 2);f[n] = 0;for (int i = 0; i < n; ++i) {vector<int> g(n * 2 + 1, INT_MAX / 2);for (int j = 0; j <= n * 2; ++j) {if (j > 0) {g[j - 1] = min(g[j - 1], f[j]);}if (j < 2 * n) {g[j + 1] = min(g[j + 1], f[j] + cost[i]);}}f = move(g);}return *min_element(f.begin() + n, f.end());}};\n", "groundtruth": "class Solution {public:int paintWalls(vector<int>& cost, vector<int>& time) {int n = cost.size();vector<int> f(n * 2 + 1, INT_MAX / 2);f[n] = 0;for (int i = 0; i < n; ++i) {vector<int> g(n * 2 + 1, INT_MAX / 2);for (int j = 0; j <= n * 2; ++j) {// 付费g[min(j + time[i], n * 2)] = min(g[min(j + time[i], n * 2)], f[j] + cost[i]);// 免费if (j > 0) {g[j - 1] = min(g[j - 1], f[j]);}}f = move(g);}return *min_element(f.begin() + n, f.end());}};"}
{"task_id": "cpp/2", "content": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <unordered_map>\n#include <string>\n#include <set>\n#include <sstream>\n#include <iterator>\n#include <unordered_set>\n#include <string>\n#include <numeric>\nclass Solution\n{\npublic:\n  string smallestString(string s)\n  {\n    char target = 'a';\n    auto it = std::find_if(s.begin(), s.end(), [target](char c) {return c != target;});\n    int indexOfFirstNonA = std::distance(s.begin(), it);\n    if (indexOfFirstNonA == s.length())\n    {\n      return s.substr(0, s.length() - 1) + 'z';\n    }\n    size_t indexOfFirstA_AfterFirstNonA = s.find('a', indexOfFirstNonA);\n    if (indexOfFirstA_AfterFirstNonA == std::string::npos)\n    {\n      indexOfFirstA_AfterFirstNonA = s.length();\n    }\n    string res;\n    for (int i = 0; i < s.length(); ++i)\n    {\n      if (i >= indexOfFirstNonA && i < indexOfFirstA_AfterFirstNonA)\n      {\n        res.push_back(static_cast<char>(s[i] - 1));\n      }\n      else\n      {\n        res.push_back(s[i]);\n      }\n    }\n    return res;\n  }\n};\n\nint main()\n{\n  Solution solution;\n  string s1 = \"ba\";\n  std::cout << solution.smallestString(s1) << std::endl;\n  return 0;\n}", "groundtruth": "class Solution {public:string smallestString(string s) {char target = 'a';auto it = std::find_if(s.begin(), s.end(), [target](char c) {return c != target;});int indexOfFirstNonA = std::distance(s.begin(), it);if (indexOfFirstNonA == s.length()) {return s.substr(0, s.length() - 1) + 'z';}size_t indexOfFirstA_AfterFirstNonA = s.find('a', indexOfFirstNonA);if (indexOfFirstA_AfterFirstNonA == string::npos) {indexOfFirstA_AfterFirstNonA = s.length();}string res;for (int i = 0; i < s.length(); ++i) {if (indexOfFirstNonA <= i && i < indexOfFirstA_AfterFirstNonA) {res.push_back(static_cast<char>(s[i] - 1));} else {res.push_back(s[i]);}}return res;}};"}
{"task_id": "cpp/3", "content": "The code is:\nclass Solution {\n    public:\n        long long minCost(vector<int>& nums, int x) {\n            int n = nums.size();\n            vector<int> f(nums);\n            long long ans = *min_element(f.begin(), f.end());\n            for (int k = 1; k < n; ++k) {\n                for (int i = 0; i < n; ++i) {\n                    f[i] = min(f[i], nums[(i + k) % n]);\n                }\n                ans = min(ans, *min_element(f.begin(), f.end()));\n            }\n            return ans;\n        }\n};\n", "groundtruth": "class Solution {public:long long minCost(vector<int>& nums, int x) {int n = nums.size();vector<int> f(nums);long long ans = accumulate(f.begin(), f.end(), 0LL);for (int k = 1; k < n; ++k) {for (int i = 0; i < n; ++i) {f[i] = min(f[i], nums[(i + k) % n]);}ans = min(ans, static_cast<long long>(k) * x + accumulate(f.begin(), f.end(), 0LL));}return ans;}};"}
{"task_id": "cpp/4", "content": "\n\n\n/*\n 5 6\n 0 0 1 2 2 4\n 1 2 1 4 6 2\n\n\n\n\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n//  Definition for a binary tree node.\n\n\nvoid in_order(vector<vector<int>> v){\n    for(int i=0; i<v.size(); i++){\n        for(int j=0; j<v[0].size();j++){\n            cout<<v[i][j]<<\" \";\n        }\n        cout<<endl;\n    }\n}\n\nvoid solution(int i, vector<pair<int, int>> v, int* stack){\n    while(i < v.size() && v[i].first >= y){\n        int num1 = v[i].first;\n        int num2 = v[i].second;\n        while(i < v.size() && v[i].first >= y){\n            i++;\n            //cout<<\"stack pop\"<<endl;\n        }\n\n        if(i >= v.size()) break;\n\n        if(v[i].second >= y){\n            //cout<<\"stack emp\"<<endl;\n            stack[i] = v[i].second;\n            i++;\n        }\n\n        if(v[i].second >= y) continue;\n\n        stack[i] = num1 + num2;\n        //cout<<\"ans update\"<<endl;\n    }\n\n    int k = 0;\n    while(k < v.size() && v[k].second <= y) k++;\n    if(k < v.size()) {\n        //cout<<\"ans update\"<<endl;\n        ans[__] = __;\n    }\n}\n\nvector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {\n    vector<int> ans(queries.size(), -1);\n    vector<pair<int, int>> sortedNums;\n    for(int i=0; i<nums1.size(); i++) sortedNums.emplace_back(nums1[i], nums2[i]);\n    sort(sortedNums.begin(), sortedNums.end(), greater<pair<int, int>>());\n    vector<tuple<int, int, int>> sortedQueries;\n    for(int i=0; i<queries.size(); i++) sortedQueries.emplace_back(i, queries[i][0], queries[i][1]);\n    sort(sortedQueries.begin(), sortedQueries.end(), [](tuple<int, int, int>& a, tuple<int, int, int>& b){return get<1>(a) > get<1>(b);});\n\n    vector<pair<int, int>> stk;\n    int j = 0;\n    for(auto& [i, x, y]: sortedQueries){\n        solution(i, sortedNums, ans);\n    }\n    return ans;\n}\n\nint main() {\n    int n, m;\n    cin>>n>>m;\n    vector<int> nums1(n, 0), nums2(n, 0), queries(n*m, 0);\n    vector<vector<int>> query(m, vector<int>(n,0));\n    for(int i=0; i<n; i++) cin>>nums1[i];\n    for(int i=0; i<n; i++) cin>>nums2[i];\n    for(int i=0; i<m; i++) {\n        for(int j=0; j<n; j++) cin>>query[i][j];\n    }\n    vector<int> ans = maximumSumQueries(nums1, nums2, query);\n\n    return 0;\n}", "groundtruth": "class Solution {public:vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {vector<pair<int, int>> sortedNums;vector<tuple<int, int, int>> sortedQueries;for (int i = 0; i < nums1.size(); i++) {sortedNums.emplace_back(nums1[i], nums2[i]);}sort(sortedNums.begin(), sortedNums.end(), greater<pair<int, int>>());for (int i = 0; i < queries.size(); i++) {sortedQueries.emplace_back(i, queries[i][0], queries[i][1]);}sort(sortedQueries.begin(), sortedQueries.end(), [](tuple<int, int, int> &a, tuple<int, int, int> &b) {return get<1>(a) > get<1>(b);});vector<pair<int, int>> stk;vector<int> answer(queries.size(), -1);int j = 0;for (auto &[i, x, y] : sortedQueries) {while (j < sortedNums.size() && sortedNums[j].first >= x) {auto [num1, num2] = sortedNums[j];while (!stk.empty() && stk.back().second <= num1 + num2) {stk.pop_back();}if (stk.empty() || stk.back().first < num2) {stk.emplace_back(num2, num1 + num2);}j++;}int k = lower_bound(stk.begin(), stk.end(), make_pair(y, 0)) - stk.begin();if (k < stk.size()) {answer[i] = stk[k].second;}}return answer;}};"}
{"task_id": "cpp/5", "content": "Answer:\nclass Solution {public:int longestSemiRepetitiveSubstring(string s) {int ans = 1, left = 0, same = 0, n = s.length();for (int right = 1; right < n; right++) {if (s[right] == s[right - 1] && ++same > 1) {left = same == 2 ? right - 1 : left;same = 1;}ans = max(ans, right - left + 1);}return ans;}};\n", "groundtruth": "class Solution {public:int longestSemiRepetitiveSubstring(string s) {int ans = 1, left = 0, same = 0, n = s.length();for (int right = 1; right < n; right++) {if (s[right] == s[right - 1] && ++same > 1) {for (left++; s[left] != s[left - 1]; left++);same = 1;}ans = max(ans, right - left + 1);}return ans;}};"}
{"task_id": "cpp/6", "content": "The code can be executed in leetcode.com website.\nThe code is as follows:\n\nint sumDistance(vector<int> &nums, string s, int d) {\n  int n = nums.size();\n  vector<long long> pos(n);\n  for (int i = 0; i < n; i++) {\n    if (s[i] == 'L') {\n      pos[i] = nums[i] - d;\n    } else {\n      pos[i] = nums[i] + d;\n    }\n  }\n  sort(pos.begin(), pos.end());\n  long long res = 0;\n  for (int i = 1; i < n; i++) {\n    res += pos[i] - pos[i - 1];\n    res %= mod;\n  }\n  return res;\n}\n", "groundtruth": "class Solution {public:static constexpr int mod = 1e9 + 7;int sumDistance(vector<int>& nums, string s, int d) {int n = nums.size();vector<long long> pos(n);for (int i = 0; i < n; i++) {if (s[i] == 'L') {pos[i] = (long long) nums[i] - d;} else {pos[i] = (long long) nums[i] + d;}}sort(pos.begin(), pos.end());long long res = 0;for (int i = 1; i < n; i++) {res += 1ll * (pos[i] - pos[i - 1]) * i % mod * (n - i) % mod;res %= mod;}return res;}};"}
{"task_id": "cpp/7", "content": "\n```C++\nclass Solution {\n    public:\n        vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n            vector<int> ans;\n            unordered_map<int, int> mp;\n            int m = grid.size();\n            int n = grid[0].size();\n            for (int j = 0; j < m; j++) {\n                int st = 0;\n                for (int i = 0; i < n; i++) {\n                    st |= (grid[j][i] << i);\n                }\n                mp[st] = j;\n            }\n            if (mp.count(0)) {\n                return ans;\n            }\n            for (auto [x, i] : mp) {\n                for (auto [y, j] : mp) {\n                    if (x & y == x && mp.count(x ^ y)) {\n                        return {min(i, j), max(i, j)};\n                    }\n                }\n            }\n            return ans;\n        }\n};\n```\n", "groundtruth": "class Solution {public:vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {vector<int> ans;unordered_map<int, int> mp;int m = grid.size();int n = grid[0].size();for (int j = 0; j < m; j++) {int st = 0;for (int i = 0; i < n; i++) {st |= (grid[j][i] << i);}mp[st] = j;}if (mp.count(0)) {ans.push_back(mp[0]);return ans;}for (auto [x, i]: mp) {for (auto [y, j]: mp) {if (!(x & y)) {return {min(i, j), max(i, j)};}}}return ans;}};"}
{"task_id": "cpp/8", "content": "\n\n#include<unordered_set>\nusing namespace std;\nclass Solution {\npublic:\n  long long matrixSumQueries(int n, vector<vector<int>> &queries) {\n        long long ans = 0;\n        unordered_set<int> vis[2];\n        for (int i = queries.size() - 1; i >= 0; i--) {\n            auto &q = queries[i];\n            int type = q[0], index = q[1], val = q[2];\n            if (!vis[type].count(index)) {\n                vis[type].insert(index);\n                ans += ((long long) (n - vis[type ^ 1].size()) * val);\n            }\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "class Solution {public:long long matrixSumQueries(int n, vector<vector<int>> &queries) {long long ans = 0;unordered_set<int> vis[2];for (int i = queries.size() - 1; i >= 0; i--) {auto &q = queries[i];int type = q[0], index = q[1], val = q[2];if (!vis[type].count(index)) { // 后面（>i）没有对这一行/列的操作// 这一行/列还剩下 n-vis[type^1].size() 个可以填入的格子ans += (long long) (n - vis[type ^ 1].size()) * val;vis[type].insert(index);}}return ans;}};"}
{"task_id": "cpp/9", "content": "\n", "groundtruth": "class Solution {static constexpr int N = 23;static constexpr int M = 401;static constexpr int MOD = 1e9 + 7;int d[N][M];string num;int min_sum;int max_sum;int dfs(int i, int j, bool limit) {if (j > max_sum) {return 0;}if (i == -1) {return j >= min_sum;}if (!limit && d[i][j] != -1) {return d[i][j];}int res = 0;int up = limit ? num[i] - '0' : 9;for (int x = 0; x <= up; x++) {res = (res + dfs(i - 1, j + x, limit && x == up)) % MOD;}if (!limit) {d[i][j] = res;}return res;}int get(string num) {reverse(num.begin(), num.end());this->num = num;return dfs(num.size() - 1, 0, true);}// 求解 num - 1，先把最后一个非 0 字符减去 1，再把后面的 0 字符变为 9string sub(string num) {int i = num.size() - 1;while (num[i] == '0') {i--;}num[i]--;i++;while (i < num.size()) {num[i] = '9';i++;}return num;}public:int count(string num1, string num2, int min_sum, int max_sum) {memset(d, -1, sizeof d);this->min_sum = min_sum;this->max_sum = max_sum;return (get(num2) - get(sub(num1)) + MOD) % MOD;}};"}
{"task_id": "cpp/10", "content": "\nInput:\narr = [1,2,3,4]\nmat = [[1,2,3],[4,5,6]]\nOutput:\n1\nExplanation:\nmat = [ \n[1, 2, 3], \n[4, 5, 6]]\nPainting arr[1]=2.\nmat = [ \n[1, X, 3], \n[4, X, 6]]\nReturn the smallest index i at which either a row or a column will be completely painted in mat.\n", "groundtruth": "class Solution {public:int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {int n = mat.size();int m = mat[0].size();unordered_map<int, pair<int, int>> mp;for (int i = 0; i < n; ++i) {for (int j = 0; j < m; ++j) {mp[mat[i][j]] = {i, j};}}vector<int> rowCnt(n, 0);vector<int> colCnt(m, 0);for (int i = 0; i < arr.size(); ++i) {auto& v = mp[arr[i]];++rowCnt[v.first];if (rowCnt[v.first] == m) {return i;}++colCnt[v.second];if (colCnt[v.second] == n) {return i;}}return -1;}};"}
{"task_id": "cpp/11", "content": "Input Format \nThere is only one test case.\n\nOutput Format \nOutput one line: the answer.\n\nSample Input \nstart=[0, 0]\ntarget=[2, 2]\nspecialRoads=[[0, 0, 1, 1, 100], [1, 1, 2, 2, 20]]\n\nSample Output \n23\nExplanation \nGoing directly from (0, 0) to (2, 2) costs 10 + 10 + 4 + 4 = 28. However, using the special road costs 100 + 20 = 120. This is the minimum cost required, so we output 120.", "groundtruth": "class Solution {public:int minimumCost(vector<int> &start, vector<int> &target, vector <vector<int>> &specialRoads) {using LL = long long;LL t = (LL) target[0] << 32 | target[1];unordered_map<LL, int> dis = {{(LL) start[0] << 32 | start[1], 0}, {t, INT_MAX}};unordered_set<LL> vis;for (;;) {LL v = -1;int dv = -1;for (auto &[p, d]: dis)if (!vis.count(p) && (dv < 0 || d < dv))v = p, dv = d;if (v == t) return dv; // 到终点的最短路已确定vis.insert(v);int vx = v >> 32, vy = v & UINT32_MAX;// 更新到终点的最短路dis[t] = min(dis[t], dv + target[0] - vx + target[1] - vy);for (auto &r: specialRoads) {int d = dv + abs(r[0] - vx) + abs(r[1] - vy) + r[4];LL w = (LL) r[2] << 32 | r[3];if (!dis.count(w) || d < dis[w])dis[w] = d;}}}};"}
{"task_id": "cpp/12", "content": "\n\n\n\n\n\n\nclass Solution {public:string smallestBeautifulString(string s, int k) {for (int i = s.length() - 1; i >= 0; --i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {blockedCharacters.insert(s[i - j]);}}for (int j = 1; j <= 3; ++j) {if (s[i] - 'a' + j + 1 <= k && blockedCharacters.find(s[i] + j) == blockedCharacters.end()) {return generate(s, i, j);}}}return \"\";}string generate(string s, int idx, int offset) {s[idx] += offset;for (int i = idx + 1; i < s.length(); ++i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {blockedCharacters.insert(s[i - j]);}}for (int j = 0; j < 3; ++j) {if (blockedCharacters.find('a' + j) == blockedCharacters.end()) {s[i] = 'a' + j;break;}}}return s;}};\n\n\n\n\n\n\n", "groundtruth": "class Solution {public:string smallestBeautifulString(string s, int k) {for (int i = s.length() - 1; i >= 0; --i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {____}}for (int j = 1; j <= 3; ++j) {if (s[i] - 'a' + j + 1 <= k && blockedCharacters.find(s[i] + j) == blockedCharacters.end()) {return generate(s, i, j);}}}return \"\";}string generate(string s, int idx, int offset) {s[idx] += offset;for (int i = idx + 1; i < s.length(); ++i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {blockedCharacters.insert(s[i - j]);}}for (int j = 0; j < 3; ++j) {if (____) {s[i] = 'a' + j;break;}}}return s;}};"}
{"task_id": "cpp/13", "content": "\n\ndef findThePrefixCommonArray(A, B):\n    n = len(A)\n    ans = [0] * n\n    p = q = 0\n    for i in range(n):\n        p |= 1 << A[i]\n        q |= 1 << B[i]\n        ans[i] = bin(p & q).count('1')\n    return ans\n", "groundtruth": "class Solution {public:vector<int> findThePrefixCommonArray(vector<int> &a, vector<int> &b) {int n = a.size();vector<int> ans(n);long long p = 0, q = 0;for (int i = 0; i < n; ++i) {p |= 1LL << a[i];q |= 1LL << b[i];ans[i] = __builtin_popcountll(p & q);}return ans;}};"}
{"task_id": "cpp/14", "content": "\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (____)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (____)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动if (grid[x + d[0]][y + d[1]] > 0)sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};\n\n\n\nclass Solution {static constexpr int dirs[4][2] = {{-1, 0}, {", "groundtruth": "class Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};"}
{"task_id": "cpp/15", "content": "#include<vector>  \nclass Solution {  \npublic:  \n   long long countOperationsToEmptyArray(vector<int>& nums) {  \n   int n = nums.size();  \n   long long res=n;  \n   BIT t(n+1);  \n   int pre=1;  \n   for(int i=0;i<n;i++){  \n       int idx=nums[i]+1;  \n       if(idx>=pre){  \n           res+=idx-pre;  \n           t.inc(idx);  \n           pre=idx;  \n       }else{  \n           res+=t.query(pre,idx)+(n-pre);  \n           t.inc(idx);  \n           pre=idx;  \n       }  \n   }  \n   return res;  \n   }  \n};\n\n", "groundtruth": "// 树状数组模板class BIT {vector<int> tree;public:BIT(int n) : tree(n) {}// 将下标 i 上的数加一void inc(int i) {while (i < tree.size()) {++tree[i];i += i & -i;}}// 返回闭区间 [1, i] 的元素和int sum(int x) {int res = 0;while (x > 0) {res += tree[x];x &= x - 1;}return res;}// 返回闭区间 [left, right] 的元素和int query(int left, int right) {return sum(right) - sum(left - 1);}};class Solution {public:long long countOperationsToEmptyArray(vector<int> &nums) {int n = nums.size(), id[n];iota(id, id + n, 0);sort(id, id + n, [&](int i, int j) {return nums[i] < nums[j];});long long ans = n; // 先把 n 计入答案BIT t(n + 1); // 下标从 1 开始int pre = 1; // 上一个最小值的位置，初始为 1for (int k = 0; k < n; ++k) {int i = id[k] + 1; // 下标从 1 开始if (i >= pre) // 从 pre 移动到 i，跳过已经删除的数ans += i - pre - t.query(pre, i);else // 从 pre 移动到 n，再从 1 移动到 i，跳过已经删除的数ans += n - pre + i - k + t.query(i, pre - 1);t.inc(i); // 删除 ipre = i;}return ans;}};"}
{"task_id": "cpp/16", "content": "", "groundtruth": "class Solution {public:vector<int> getSubarrayBeauty(vector<int> &nums, int k, int x) {const int BIAS = 50;int cnt[BIAS * 2 + 1]{}, n = nums.size();for (int i = 0; i < k - 1; ++i) // 先往窗口内添加 k-1 个数++cnt[nums[i] + BIAS];vector<int> ans(n - k + 1);for (int i = k - 1; i < n; ++i) {++cnt[nums[i] + BIAS]; // 进入窗口（保证窗口有恰好 k 个数）int left = x;for (int j = 0; j < BIAS; ++j) { // 暴力枚举负数范围 [-50,-1]left -= cnt[j];if (left <= 0) { // 找到美丽值ans[i - k + 1] = j - BIAS;break;}}--cnt[nums[i - k + 1] + BIAS]; // 离开窗口}return ans;}};"}
{"task_id": "cpp/17", "content": "\nInput: nums = [5,2,6]\nOutput: 4\n\nInput: nums = [1]\nOutput: 0\n\nInput: nums = [1,2]\nOutput: 1\n\nInput: nums = [3,4,8,3]\nOutput: 4\n\nInput: nums = [1,1,1,1]\nOutput: 0\n\nInput: nums = [4,5]\nOutput: 2\n\nInput: nums = [16,7,13,11]\nOutput: 6\n\nInput: nums = [3,4,8,3]\nOutput: 4\n\nInput: nums = [4,6,7,7]\nOutput: 3\n\nInput: nums = [12,8,6,8]\nOutput: 5\n\nInput: nums = [8,5,13,14]\nOutput: 4\n\nInput: nums = [13,14,14,7]\nOutput: 5\n\nInput: nums = [13,4,14,15,12]\nOutput: 6\n\nInput: nums = [12,5,14,15,10]\nOutput: 6\n\nInput: nums = [7,13,9,9,13,10]\nOutput: 7\n\nInput: nums = [2,6,3,7,12,10]\nOutput: 5\n\nInput: nums = [2,7,3,5,12,5,7]\nOutput: 4\n\nInput: nums = [6,1,4,7,7,3,2,5,4]\nOutput: 6\n\nInput: nums = [3,12,11,5,16,2,18,16,18]\nOutput: 8\n\nInput: nums = [15,17,16,6,7,16,17,13,19]\nOutput: 15\n\nInput: nums = [4,18,2,19,19,3,12,8,7,14]\nOutput: 10\n\nInput: nums = [7,11,11,6,8,6,14,3,20]\nOutput: 6\n\nInput: nums = [1,4,8,5,13,9,17,16,7,14,16,1,10,14,4]\nOutput: 9\n\nInput: nums = [11,10,18,7,14,6,3,8,16,6,18]\nOutput: 12\n\nInput: nums = [12,7,11,11,14,18,11,3,7,6,1,9,3]\nOutput: 16\n\nInput: nums = [14,17,16,15,12,3,6,10,5,4,8,2,13]\nOutput: 10\n\nInput: nums = [16,6,1,16,2,15,12,4,1,5,4,3,12,9,7,15,17]\nOutput: 26\n\nInput: nums = [4,9,18,15,15,10,12,11,7,5,12,5,15,8,3,11,11]\nOutput: 26\n\nInput: nums = [11,11,9,13,10,16,13,3,15,12,13,2,14,11,17,5]\nOutput: 31\n\nInput: nums = [17,15,11,12,13,4,6,12,5,15,9,8,2,9,6,3,16]\nOutput: 39\n\nInput: nums = [2,3,11,8,9,11,6,12,18,11,7,6,11,2,7,13,15]\nOutput: 39\n\nInput: nums = [19,14,19,10,8,11,19,15,11,18,9,19,10,18,12,18]\nOutput: 53\n\nInput: nums = [14,17,13,8,13,4,18,12,15,6,15,5,18,1,17,19,3]\nOutput: 59\n\nInput: nums = [17,14,19,8,15,15,8,5,17,1,13,17,18,15,13,15,13]\nOutput: 66\n\nInput: nums = [14,11,15,17,1,3,13,11,12,19,16,5,6,19,6,15,10,9]\nOutput: 74\n\nInput: nums = [16,11,5,9,3,6,8,14,15,12,19,9,5,15,7,10,6,19,4]\nOutput: 77\n\nInput: nums = [7,17,3,7,5,12,17,15,5,9,8,3,18,9,13,9,12,13,18]\nOutput: 83\n\nInput: nums = [5,9,7,15,3,12,18,15,6,7,9,13,13,6,17,8,5,16,18]\nOutput: 85\n\nInput: nums = [17,11,5,3,15,1,13,11,14,15,7,18,17,18,7,1,15,18]\nOutput: 96\n\nInput: nums = [18,18,15,1,15,3,3,16,1,15,1,7,10,10,8,6,15,18,11]\nOutput: 100\n\nInput: nums = [7,12,19,7,4,1,7,19,13,10,13,18,14,15,11,12,18,15,6]\nOutput: 103\n\nInput: nums = [19,10,18,18,3,13,15,15,15,12,15,5,18,6,14,8,10,14,7]\nOutput: 106\n\nInput: nums = [12,1,10,17,13,10,7,14,3,7,8,11,10,11,13,10,5,9,18]\nOutput: 107\n\nInput: nums = [7,3,14,19,14,4,12,7,5,5,11,6,10,1,9,17,4,19,18,13]\nOutput: 108\n\nInput: nums = [13,1,9,16,12,12,9,12,5,3,17,5,10,11,17,7,1,14,18,11]\nOutput: 110\n\nInput: nums = [10,5,10,8,3,8,10,7,9,18,17,19,18,19,11,15,7,3,15,19]\nOutput: 112\n\nInput: nums = [10,7,12,1,6,7,10,12,8,17,16,17,14,9,10,18,12,17,16,3]\nOutput: 113\n\n", "groundtruth": "class Solution {public:int minOperations(vector<int> &nums) {int n = nums.size(), gcd_all = 0, cnt1 = 0;for (int x: nums) {gcd_all = gcd(gcd_all, x);cnt1 += x == 1;}if (gcd_all > 1) return -1;if (cnt1) return n - cnt1;int min_size = n;for (int i = 0; i < n; ++i) {int g = 0;for (int j = i; j < n; ++j) {g = gcd(g, nums[j]);if (g == 1) {// 这里本来是 j-i+1，把 +1 提出来合并到 return 中min_size = min(min_size, j - i);break;}}}return min_size + n - 1;}};"}
{"task_id": "cpp/18", "content": "Answer\nclass Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        int cnt = -1, ans = 0;\n        for (int i = 0; i < divisors.size(); i++) {\n            int tmp = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                if (nums[j] % divisors[i] == 0) {\n                    tmp++;\n                }\n            }\n            if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {\n                cnt = tmp;\n                ans = divisors[i];\n            }\n        }\n        return ans;\n    }\n};\n\n\n", "groundtruth": "class Solution {public:int maxDivScore(vector<int>& nums, vector<int>& divisors) {int cnt = -1, ans = 0;for (int i = 0; i < divisors.size(); i++) {int tmp = 0;for (int j = 0; j < nums.size(); j++) {if (nums[j] % divisors[i] == 0) {tmp++;}}if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {ans = divisors[i];cnt = tmp;}}return ans;}};"}
{"task_id": "cpp/19", "content": "\n", "groundtruth": "class Solution {public:int addMinimum(string word) {int n = word.size();vector<int> d(n + 1);for (int i = 1; i <= n; i++) {d[i] = d[i - 1] + 2;if (i > 1 && word[i - 1] > word[i - 2]) {d[i] = d[i - 1] - 1;}}return d[n];}};"}
{"task_id": "cpp/20", "content": "\n\n\n\nclass Solution {\npublic:\n    int minimumTotalPrice(int n, vector<vector<int>> &edges, vector<int> &price, vector<vector<int>> &trips) {\n        vector<vector<int>> next(n);\n        for (auto &edge : edges) {\n            next[edge[0]].push_back(edge[1]);\n            next[edge[1]].push_back(edge[0]);\n        }\n        vector<int> count(n);\n        function<bool(int, int, int)> dfs = [&](int node, int parent, int end) -> bool {\n            if (node == end) {\n                count[node]++;\n                return true;\n            }\n            for (int child : next[node]) {\n                if (child == parent) {\n                    continue;\n                }\n                if (dfs(child, node, end)) {\n                    count[node]++;\n                    return true;\n                }\n            }\n            return false;\n        };\n        for (auto &trip: trips) {\n            dfs(trip[0], -1, trip[1]);\n        }\n        function<pair<int, int>(int, int)> dp = [&](int node, int parent) -> pair<int, int> {\n            pair<int, int> res = {price[node] * count[node], 0};\n            for (int child : next[node]) {\n                if (child == parent) {\n                    continue;\n                }\n                auto [x, y] = dp(child, node);\n                res.second += x; // node 没有减半，因此可以取子树的两种情况的最小值\n                res.first += y; // node 减半，只能取子树没有减半的情况\n            }\n            return res;\n        };\n        auto [x, y] = dp(0, -1);\n        return min(x, y);\n    }\n};\n", "groundtruth": "class Solution {public:int minimumTotalPrice(int n, vector<vector<int>> &edges, vector<int> &price, vector<vector<int>> &trips) {vector<vector<int>> next(n);for (auto &edge : edges) {next[edge[0]].push_back(edge[1]);next[edge[1]].push_back(edge[0]);}vector<int> count(n);function<bool(int, int, int)> dfs = [&](int node, int parent, int end) -> bool {if (node == end) {count[node]++;return true;}for (int child : next[node]) {if (child == parent) {continue;}if (dfs(child, node, end)) {count[node]++;return true;}}return false;};for (auto &trip: trips) {dfs(trip[0], -1, trip[1]);}function<pair<int, int>(int, int)> dp = [&](int node, int parent) -> pair<int, int> {pair<int, int> res = {price[node] * count[node], price[node] * count[node] / 2};for (int child : next[node]) {if (child == parent) {continue;}auto [x, y] = dp(child, node);res.first += min(x, y); // node 没有减半，因此可以取子树的两种情况的最小值res.second += x; // node 减半，只能取子树没有减半的情况}return res;};auto [x, y] = dp(0, -1);return min(x, y);}};"}
{"task_id": "cpp/21", "content": "", "groundtruth": "class Solution {public:vector<long long> findPrefixScore(vector<int>& nums) {vector<long long> ans;int tmp = nums[0];ans.push_back(nums[0] * 2);for (int i = 1; i < nums.size(); ++i) {if (nums[i] > tmp) tmp = nums[i];ans.push_back(nums[i] + tmp + ans[i - 1]);}return ans;}};"}
{"task_id": "cpp/22", "content": "\nclass Solution {\npublic:\n    TreeNode* replaceValueInTree(TreeNode* root) {\n        vector<TreeNode*> q = {root};\n        root->val = 0;\n        while (!q.empty()) {\n            vector<TreeNode*> q2;\n            int sum = 0;\n            for (auto fa : q) {\n                if (fa->left) {\n                    q2.push_back(fa->left);\n                    fa->left->val += sum;\n                }\n                if (fa->right) {\n                    q2.push_back(fa->right);\n                    fa->right->val += sum;\n                }\n            }\n            for (auto fa : q) {\n                int child_sum = (fa->left ? fa->left->val : 0) + (fa->right ? fa->right->val : 0);\n                if (fa->left) {\n                    fa->left->val = child_sum;\n                }\n                if (fa->right) {\n                    fa->right->val = child_sum;\n                }\n            }\n            q = move(q2);\n        }\n        return root;\n    }\n};\n", "groundtruth": "class Solution {public:TreeNode* replaceValueInTree(TreeNode* root) {vector<TreeNode*> q = {root};root->val = 0;while (!q.empty()) {vector<TreeNode*> q2;int sum = 0;for (auto fa : q) {if (fa->left) {q2.push_back(fa->left);sum += fa->left->val;}if (fa->right) {q2.push_back(fa->right);sum += fa->right->val;}}for (auto fa : q) {int child_sum = (fa->left ? fa->left->val : 0) +(fa->right ? fa->right->val : 0);if (fa->left) {fa->left->val = sum - child_sum;}if (fa->right) {fa->right->val = sum - child_sum;}}q = move(q2);}return root;}};"}
{"task_id": "cpp/23", "content": "\n\n```c++\nclass Graph {public:using pii = pair<int, int>;Graph(int n, vector<vector<int>>& edges) {this->graph = vector<vector<pii>>(n);for (auto &vec : edges) {int x = vec[0];int y = vec[1];int cost = vec[2];graph[x].emplace_back(y, cost);}}void addEdge(vector<int> edge) {int x = edge[0];int y = edge[1];int cost = edge[2];graph[x].emplace_back(y, cost);}int shortestPath(int node1, int node2) {priority_queue<pii, vector<pii>, greater<pii>> pq;vector<int> dist(graph.size(), INT_MAX);dist[node1] = 0;pq.emplace(0, node1);while (!pq.empty()) {auto [cost, cur] = pq.top();pq.pop();if (cur == node2) {return cost;}for (auto &[next, ncost] : graph[cur]) {if (dist[next] > cost + ncost) {dist[next] = cost + ncost;pq.emplace(dist[next], next);}}}}return -1;}private:vector<vector<pii>> graph;};\n\n```", "groundtruth": "class Graph {public:using pii = pair<int, int>;Graph(int n, vector<vector<int>>& edges) {this->graph = vector<vector<pii>>(n);for (auto &vec : edges) {int x = vec[0];int y = vec[1];int cost = vec[2];graph[x].emplace_back(y, cost);}}void addEdge(vector<int> edge) {int x = edge[0];int y = edge[1];int cost = edge[2];graph[x].emplace_back(y, cost);}int shortestPath(int node1, int node2) {priority_queue<pii, vector<pii>, greater<pii>> pq;vector<int> dist(graph.size(), INT_MAX);dist[node1] = 0;pq.emplace(0, node1);while (!pq.empty()) {auto [cost, cur] = pq.top();pq.pop();if (cur == node2) {return cost;}for (auto [next, ncost] : graph[cur]) {if (dist[next] > cost + ncost) {dist[next] = cost + ncost;pq.emplace(cost + ncost, next);}}}return -1;}private:vector<vector<pii>> graph;};"}
{"task_id": "cpp/24", "content": "\n提示：\n0 <= n <= 10^5\n0 <= nums[i] <= n\nThe sum of nums.length over all test cases does not exceed 5 \\* 10^5.\nIt is guaranteed that nums.length equals n in all test cases.\nIt is guaranteed that all elements of nums are unique in all test cases.\n\n以下为提交代码\n-------------------------------------------------------------------------------------------------------------------\nclass Solution {public:vector<long long> distance(vector<int> &nums) {int n = nums.size();unordered_map<int, vector<int>> groups;for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标vector<long long> ans(n);long long s[n + 1];s[0] = 0;for (auto &[_, a]: groups) {int m = a.size();for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和for (int i = 0; i < m; ++i) {long long target = a[i];____ // 蓝色面积long long right = s[m] - s[i] - target * (m - i); // 绿色面积____}}return ans;}};\n-------------------------------------------------------------------------------------------------------------------\n以下为参考代码\n-------------------------------------------------------------------------------------------------------------------\nclass Solution {\npublic:\n    vector<long long> distance(vector<int>& nums) {\n        int n = nums.size();\n        unordered_map<int, vector<int>> groups;\n        for (int i = 0; i < n; ++i) {\n            groups[nums[i]].push_back(i);\n        }\n        vector<long long> ans(n);\n        long long s[n + 1];\n        s[0] = 0;\n        for (auto &[_, a] : groups) {\n            int m = a.size();\n            for (int i = 0; i < m; ++i) {\n                s[i + 1] = s[i] + a[i];\n            }\n            for (int i = 0; i < m; ++i) {\n                long long target = a[i];\n                long long left = s[i];\n                long long right = s[m] - s[i] - target * (m - i);\n                ans[target] = left + right;\n            }\n        }\n        return ans;\n    }\n};\n", "groundtruth": "class Solution {public:vector<long long> distance(vector<int> &nums) {int n = nums.size();unordered_map<int, vector<int>> groups;for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标vector<long long> ans(n);long long s[n + 1];s[0] = 0;for (auto &[_, a]: groups) {int m = a.size();for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和for (int i = 0; i < m; ++i) {long long target = a[i];long long left = target * i - s[i]; // 蓝色面积long long right = s[m] - s[i] - target * (m - i); // 绿色面积ans[target] = left + right;}}return ans;}};"}
{"task_id": "cpp/25", "content": "", "groundtruth": "class Solution {public:int minimizeMax(vector<int> &nums, int p) {sort(nums.begin(), nums.end());int left = -1, right = nums.back() - nums[0]; // 开区间while (left + 1 < right) { // 开区间int mid = left + (right - left) / 2, cnt = 0;for (int i = 0; i < nums.size() - 1; ++i)if (nums[i + 1] - nums[i] <= mid) { // 都选++cnt;++i;}(cnt >= p ? right : left) = mid;}return right;}};"}
{"task_id": "cpp/26", "content": "\nAnswer:\n\nclass Solution {public:int minimumVisitedCells(vector<vector<int>>& grid) {int m = grid.size(), n = grid[0].size();vector<vector<int>> dist(m, vector<int>(n, -1));dist[0][0] = 1;vector<priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>>> row(m), col(n);auto update = [](int& x, int y) {if (x == -1 || y < x) {x = y;}};for (int i = 0; i < m; ++i) {for (int j = 0; j < n; ++j) {while (!row[i].empty() && row[i].top().second + grid[i][row[i].top().second] < j) {row[i].pop();}if (!row[i].empty()) {update(dist[i][j], row[i].top().first);}while (!col[j].empty() && col[j].top().second + grid[col[j].top().second][j] < i) {col[j].pop();}if (!col[j].empty()) {update(dist[i][j], col[j].top().first);}if (dist[i][j] != -1) {row[i].emplace(dist[i][j], j);col[j].emplace(dist[i][j], i);}}}return dist[m - 1][n - 1];}};\n\n", "groundtruth": "class Solution {public:int minimumVisitedCells(vector<vector<int>>& grid) {int m = grid.size(), n = grid[0].size();vector<vector<int>> dist(m, vector<int>(n, -1));dist[0][0] = 1;vector<priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>>> row(m), col(n);auto update = [](int& x, int y) {if (x == -1 || y < x) {x = y;}};for (int i = 0; i < m; ++i) {for (int j = 0; j < n; ++j) {while (!row[i].empty() && row[i].top().second + grid[i][row[i].top().second] < j) {row[i].pop();}if (!row[i].empty()) {update(dist[i][j], dist[i][row[i].top().second] + 1);}while (!col[j].empty() && col[j].top().second + grid[col[j].top().second][j] < i) {col[j].pop();}if (!col[j].empty()) {update(dist[i][j], dist[col[j].top().second][j] + 1);}if (dist[i][j] != -1) {row[i].emplace(dist[i][j], j);col[j].emplace(dist[i][j], i);}}}return dist[m - 1][n - 1];}};"}
{"task_id": "cpp/27", "content": "\nAnswer: class Solution {public:vector<vector<int>> findMatrix(vector<int> &nums) {unordered_map<int, int> cnt;for (int x: nums) ++cnt[x];vector<vector<int>> ans;while (!cnt.empty()) {vector<int> row;for (auto it = cnt.begin(); it != cnt.end();) {row.push_back(it->first);if (row.size() == it->second) {cnt.erase(it++);} else {++it;} ans.push_back(row);}return ans;}};", "groundtruth": "class Solution {public:vector<vector<int>> findMatrix(vector<int> &nums) {unordered_map<int, int> cnt;for (int x: nums) ++cnt[x];vector<vector<int>> ans;while (!cnt.empty()) {vector<int> row;for (auto it = cnt.begin(); it != cnt.end();) {row.push_back(it->first);if (--it->second == 0) it = cnt.erase(it);else ++it;}ans.push_back(row);}return ans;}};"}
{"task_id": "cpp/28", "content": "Example 1:\nInput: reward1 = [5,3,7], reward2 = [2,6,9], k = 2Output: 15Explanation: Both mice can earn 15 points by taking:Mouse 1 eats cheese 0 and cheese 1 for a total reward of 5 + 3 = 8 points.Mouse 2 eats cheese 1 and cheese 2 for a total reward of 6 + 9 = 15 points.\nExample 2:\nInput: reward1 = [4,5,5], reward2 = [1,1,1], k = 1Output: 4Explanation: The first mouse can earn 4 points by taking:Mouse 1 eats cheese 0 for a total reward of 4 + 1 = 5 points.Mouse 2 can earn 0 points by taking cheese 1 and getting a reward of 1 point.Mouse 2 can earn 0 points by taking cheese 2 and getting a reward of 1 point.In this way, the first mouse can earn 4 points.\n \n\nConstraints:\nn == reward1.length == reward2.length <= 10^5\n1 <= reward1[i], reward2[i] <= 10^4\n1 <= k <= n\n\n```C++\nclass Solution {public:int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {int ans = 0;int n = reward1.size();vector<int> diffs(n);for (int i = 0; i < n; i++) {diffs[i] = reward1[i] - reward2[i];}sort(diffs.begin(), diffs.end());for (int i = 1; i <= k; i++) {ans += diffs[i - 1];}return ans;}};\n\n```\n", "groundtruth": "class Solution {public:int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {int ans = 0;int n = reward1.size();vector<int> diffs(n);for (int i = 0; i < n; i++) {ans += reward2[i];diffs[i] = reward1[i] - reward2[i];}sort(diffs.begin(), diffs.end());for (int i = 1; i <= k; i++) {ans += diffs[n - i];}return ans;}};"}
{"task_id": "cpp/29", "content": "\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {\n        unordered_set<int> ban{banned.begin(), banned.end()};\n        set<int> sets[2];\n        for (int i = 0; i < n; ++i)if (i != p)sets[i % 2].insert(i);\n        sets[0].insert(n);\n        sets[1].insert(n);\n        vector<int> ans(n, -1);\n        vector<int> q = {p};\n        for (int step = 0; !q.empty(); ++step) {\n            vector<int> nq;\n            for (int i : q) {\n                ans[i] = step;\n                int mn = max(i - k + 1, k - i - 1);\n                auto &s = sets[mn % 2];\n                for (auto it = s.lower_bound(mn); *it <= mn + 2 * k - 1; it = s.erase(it))\n                    if (!ban.count(*it))\n                        nq.push_back(*it);\n            }\n            q = move(nq);\n        }\n        return ans;\n    }\n};", "groundtruth": "class Solution {public:vector<int> minReverseOperations(int n, int p, vector<int> &banned, int k) {unordered_set<int> ban{banned.begin(), banned.end()};set<int> sets[2];for (int i = 0; i < n; ++i)if (i != p && !ban.count(i))sets[i % 2].insert(i);sets[0].insert(n);sets[1].insert(n); // 哨兵vector<int> ans(n, -1);vector<int> q = {p};for (int step = 0; !q.empty(); ++step) {vector<int> nq;for (int i: q) {ans[i] = step;// 从 mn 到 mx 的所有位置都可以翻转到int mn = max(i - k + 1, k - i - 1);int mx = min(i + k - 1, n * 2 - k - i - 1);auto &s = sets[mn % 2];for (auto it = s.lower_bound(mn); *it <= mx; it = s.erase(it))nq.push_back(*it);}q = move(nq);}return ans;}};"}
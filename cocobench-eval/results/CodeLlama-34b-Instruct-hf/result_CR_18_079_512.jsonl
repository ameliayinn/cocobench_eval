{"task_id": "python/0", "content": "\n\"\"\"\n\nimport requests\n\ndef fetch_and_process_data(user_url):\n    data = requests.get(user_url)\n    processed_data = []\n    if data.status_code == 200:\n        content = data.json()\n        for item in content['results']:\n            if type(item) is str:\n                processed_data.append(item.lower())\n    else:\n        print('Failed to fetch data')\n    return processed_data\n", "groundtruth": {"syntax_errors": {"lines": ["data = request.get(user_url)"]}, "logical_errors": {"lines": ["continue"]}, "performance_issues": {"lines": ["processed_data.append(item.lower())"]}, "security_issues": {"lines": ["eval('print(processed_data)')"]}}}
{"task_id": "python/1", "content": "\n\n\n\n\n\ndef aggregate_file_data(file_path):\n    try:\n        file = open(file_path, 'r')\n        data = file.readlines()\n        aggregated_data = sum([int(d) for d in data if d.strip().isdigit()])\n    except Exception as e:\n        print('Failed to process file:', e)\n    finally:\n        file.close()\n    print(aggregated_data)\n\n\n# Test case 1:\nprint(aggregate_file_data.__doc__)\nif aggregate_file_data.__doc__ is None:\n    print(\"The function has no documentation\")\nelse:\n    print(aggregate_file_data.__doc__)\n\n\n\n\n\n\n", "groundtruth": {"syntax_errors": {"lines": ["file = open(file_pth, 'r')"]}, "logical_errors": {"lines": ["aggregated_data = sum([int(d) for d in data if d.strip().isdigit()])"]}, "performance_issues": {"lines": ["// No explicit performance issue, but could be implied by inefficient data handling."]}, "security_issues": {"lines": ["eval('print(aggregated_data)')"]}}}
{"task_id": "python/2", "content": "'''\n\ndef aggregate_data(sources):\n    results = []\n    for source in sources:\n        data = fetch_data(source)\n        if data is not None:\n            results.extend(data)\n        else:\n            print('No data found for:', source)\n    return results\n\ndef fetch_data(source):\n    # Simulated fetch operation\n    return [1, 2, 3] if source == 'source1' else None\n\nerrors = {\n    \"performance_issues\": \"\",\n    \"security_issues\": \"\",\n    \"syntax_errors\": \"results.extend(data\",\n    \"logical_errors\": \"\"\n}\n", "groundtruth": {"syntax_errors": {"lines": ["results.extend(data"]}}}
{"task_id": "python/3", "content": "", "groundtruth": {"syntax_errors": {"lines": ["thread = threading.Thread(target=perform_task, args=(data))", "threads.append(thread"]}}}
{"task_id": "python/4", "content": "\n# Please fill in this dictionary\nerror_dict = {\n    \"performance_issues\": None,\n    \"security_issues\": None,\n    \"syntax_errors\": None,\n    \"logical_errors\": None\n}\n\ndef read_file_process_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        results = [line.strip().split(',') for line in lines]\n        return results\n", "groundtruth": {"syntax_errors": {"lines": ["results = [line.strip().split(',') for line in lines"]}}}
{"task_id": "python/5", "content": "", "groundtruth": {"syntax_errors": {"lines": ["elif x < arr[mid]"]}}}
{"task_id": "python/6", "content": "", "groundtruth": {"syntax_errors": {"lines": ["processed = [x**2 for x in data_list if x > 0", "except ValueError, e:"]}}}
{"task_id": "python/7", "content": "'''\ndef check_password_strength(password):\n    if len(password) < 8:\n        return 'Weak'\n    elif '123' in password:\n        return 'Weak'\n    else:\n        return 'Strong'\n\nprint(check_password_strength('password'))\nprint(check_password_strength('1234567890'))\n'''\n", "groundtruth": {"logical_errors": {"lines": ["if '123' in password:"], "description": "The check for '123' in the password should be independent of the length check to correctly assess the weakness."}}}
{"task_id": "python/8", "content": "\n\"\"\"\n\ndef sum_even_numbers(numbers):\n    total = 0\n    for number in numbers:\n        if number % 2 == 0:\n            total += number\n    return total\n\nprint(sum_even_numbers([1, 2, 3, 4, 5, 6]))\n\n\"\"\"\n\n", "groundtruth": {"logical_errors": {"lines": ["if number % 2 != 0:"], "description": "The continue statement should be executed when the number is odd, but the condition is incorrectly stated to continue when the number is even."}}}
{"task_id": "python/9", "content": "\n\"\"\"\ndef calculate_average(scores):\n    if not scores:\n        return 0\n    return sum(scores) / len(scores)\n\"\"\"\n", "groundtruth": {"logical_errors": {"lines": ["if not scores:"], "description": "Returning 0 for an empty list might be misleading if the context expects a distinction between 'no data' and 'zero average'."}}}
{"task_id": "python/10", "content": "", "groundtruth": {"logical_errors": {"lines": ["elif code < 100 or code >= 300:"], "description": "This condition might catch codes that are meant to be successful or pending due to incorrect use of 'or' in the logical expression."}}}
{"task_id": "python/11", "content": "\n# Please fill in the blanks to make the code correct\n\n# performance_issues\n\n# security_issues\n\n# syntax_errors\n\n# logical_errors\n\ndef process_numbers(numbers):\n    for i in range(len(numbers)):\n        min_index = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[j] < numbers[min_index]:\n                min_index = j\n        numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\n    return numbers\n", "groundtruth": {"performance_issues": {"lines": ["numbers_copy = numbers[:]", "for j in range(i + 1, len(numbers)):"], "description": "Using a selection sort which is inefficient for large data sets and copying the list unnecessarily."}}}
{"task_id": "python/12", "content": "\nSolution\n\nThe code has performance issues.\n\nThe function is inefficiently updating the dictionary inside a loop.\n\nThe following is the corrected code:\ndef update_records(data):\n    records = {}\n    for item in data:\n        records[item['id']] = records.get(item['id'], []) + [item]\n    return records\n\nTherefore, the correct answer is\n{\n    \"performance_issues\": \"records[item['id']] = records.get(item['id'], []) + [item]\"\n}\n", "groundtruth": {"performance_issues": {"lines": ["records[item['id']] = [item]"], "description": "Inefficient dictionary updates within a loop which can be optimized using collections.defaultdict."}}}
{"task_id": "python/13", "content": "\n\ndef execute_expression(user_input):\n    # Dangerous use of eval\n    # security_issues\n    result = None\n    return result\n", "groundtruth": {"security_issues": {"lines": ["result = eval(user_input)"], "description": "Using 'eval' to execute user-supplied input can lead to arbitrary code execution."}}}
{"task_id": "python/14", "content": "'''\n\n# Please edit this code as needed.\n\ndef store_user_credentials(username, password):\n    credentials = {}\n    credentials['username'] = username\n    credentials['password'] = password\n    return credentials\n\ndef get_credentials():\n    return store_user_credentials(input(\"Enter username: \"), getpass.getpass())\n\ndef print_credentials(credentials):\n    print(\"Username: {}\".format(credentials['username']))\n    print(\"Password: {}\".format(credentials['password']))\n\ndef main():\n    credentials = get_credentials()\n    print_credentials(credentials)\n\nif __name__ == \"__main__\":\n    main()\n", "groundtruth": {"security_issues": {"lines": ["credentials['password'] = password"], "description": "Storing passwords in plain text can lead to security breaches if the data is accessed unauthorizedly."}}}
{"task_id": "python/15", "content": "\n\ndef authenticate_user(uName, uPassword):\n    stored_pwds = {'admin': '12345', 'user': 'password'}\n    for user, pwd in stored_pwds.items():\n        if uName == user and pwd == uPassword:\n            return True\n    return False\n\n# Performance issues\ndef authenticate_user(uName, uPassword):\n    stored_pwds = {'admin': '12345', 'user': 'password'}\n    for user, pwd in stored_pwds.items():\n        if uName == user and pwd == uPassword:\n            return True\n    return False\n\n# Security issues\ndef authenticate_user(uName, uPassword):\n    stored_pwds = {'admin': '12345', 'user': 'password'}\n    for user, pwd in stored_pwds.items():\n        if uName == user and pwd == uPassword:\n            return True\n    return False\n\n# Logical errors\ndef authenticate_user(uName, uPassword):\n    stored_pwds = {'admin': '12345', 'user': 'password'}\n    for user, pwd in stored_pwds.items():\n        if uName == user and pwd == uPassword:\n            return True\n    return False\n\n# Syntax errors\ndef authenticate_user(uName, uPassword):\n    stored_pwds = {'admin': '12345', 'user': 'password'}\n    for user, pwd in stored_pwds.items():\n        if uName == user and pwd == uPassword:\n            return True\n    return False\n", "groundtruth": {"logical_errors": {"lines": ["authenticated = True"]}, "performance_issues": {"lines": ["sleep(2)"]}, "security_issues": {"lines": ["global usr_access"]}, "irregular_naming": {"lines": ["usr_access = 'Denied'"]}}}
{"task_id": "python/16", "content": "\nSOLUTION:\n\ndef insert_data_badly(db_data):\n    conn = mysql.connector.connect(host='localhost', user='root', passwd='password123', database='testdb')  # Inefficient DB connection in loop and security issue\n    cursor = conn.cursor()\n    insert_query = 'INSERT INTO students VALUES (%s, %s)'\n    for record in db_data:\n        studentData = (record['id'], record['name'])  # Irregular naming convention\n        try:\n            cursor.execute(insert_query, studentData)\n        except DB_Error as e:\n            print('Failed to insert data', e)\n    conn.close()\n", "groundtruth": {"performance_issues": {"lines": ["conn = mysql.connector.connect(host='localhost', user='root', passwd='password123', database='testdb')"], "description": "Opening a database connection inside a loop can lead to performance issues due to frequent opening and closing of connections."}, "security_issues": {"lines": ["conn = mysql.connector.connect(host='localhost', user='root', passwd='password123', database='testdb')"], "description": "Using hard-coded database credentials poses a significant security risk."}}}
{"task_id": "python/17", "content": "\n\ndef check_user_permission(user):\n    if user['role'] == 'admin':\n        return True\n    elif user['role'] == 'user':\n        return False\n    else:\n        raise Exception('Unknown role: ' + user['role'])\n", "groundtruth": {"logical_errors": {"lines": ["elif user['role'] != 'user':"], "description": "This condition unnecessarily complicates the function logic for checking user permissions and may incorrectly deny access to users with 'user' role."}, "security_issues": {"lines": ["raise Exception('Unknown role: ' + user['role'])"], "description": "Returning detailed error information about user roles can expose internal information useful for malicious actors."}}}
{"task_id": "python/18", "content": "\n# Please fill in the blanks\n{\n    \"performance_issues\": \"_____\",\n    \"security_issues\": \"_____\",\n    \"syntax_errors\": \"_____\",\n    \"logical_errors\": \"_____\"\n}\n", "groundtruth": {"logical_errors": {"lines": ["for i in range(len(sorted_list) - 1):"], "description": "The loop and swapping logic reimplements sorting incorrectly and redundantly as sorted() already sorts the list."}, "performance_issues": {"lines": ["sorted_list = sorted(dict_list, key=lambda x: x[sort_key], reverse=False)"], "description": "Using a lambda function in the sorted method can lead to performance issues for large datasets."}}}
{"task_id": "python/19", "content": "'''\n\nimport hashlib\nimport os\n\ndef hash_password(password):\n    #salt = 'staticSalt'\n    salt = os.urandom(32)\n    hashed_pw = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    return hashed_pw  # Static salt compromises security\n\n\n", "groundtruth": {"security_issues": {"lines": ["salt = 'staticSalt'"], "description": "Using a static salt for hashing passwords can compromise security by making it easier for attackers to use rainbow tables."}}}
{"task_id": "python/20", "content": "\n\ndef unique_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0 and number not in even_numbers:\n            even_numbers.append(number)\n    return sorted(even_numbers)\n\n\ndef test_unique_even_numbers():\n    assert unique_even_numbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n\n\nif __name__ == \"__main__\":\n    test_unique_even_numbers()\n\n", "groundtruth": {"logical_errors": {"lines": ["return sorted(even_numbers)"], "description": "The function intends to return unique even numbers but does not remove duplicates before returning, leading to potential logical inconsistencies."}, "performance_issues": {"lines": ["if number % 2 == 0 and number not in even_numbers:"], "description": "Checking 'number not in even_numbers' within a loop is inefficient for larger lists."}}}
{"task_id": "python/21", "content": "\n", "groundtruth": {"logical_errors": {"lines": ["if lower_case_s ==  reversed_s:"], "description": "The logical check correctly compares the variables for palindrome but has unexpected whitespace causing readability issues."}}}
{"task_id": "python/22", "content": "\n\ndef recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n-1)  # Incorrect recursion call\n    return result\n", "groundtruth": {"logical_errors": {"lines": ["return n * recursive_factorial(n)"], "description": "Incorrect recursive call without decrementing 'n' leads to an infinite recursion and a runtime error."}}}
{"task_id": "python/23", "content": "\"\"\"\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\"\"\"\n\n\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\n\"\"\"\n\n\n\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\n\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\n\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\n\ndef fetch_user_details(user_id):\n    database.execute(\"SELECT * FROM users WHERE id = \" + str(user_id))  # Potential SQL injection\n    # Missed handling for no result found\n    result = database.fetch_all()\n    if result:\n        return result\n    return \"No such user\"\n\"\"\"\n\n\ndef fetch_user_details(user_id):\n    database.", "groundtruth": {"logical_errors": {"lines": ["return database.fetch_all()"], "description": "The code does not handle the case where no user details are found, which might lead to unpredictable behavior."}, "security_issues": {"lines": ["query = \"SELECT * FROM users WHERE id = \" + str(user_id)"], "description": "Concatenating user input directly into SQL queries can lead to SQL injection vulnerabilities."}}}
{"task_id": "python/24", "content": "\"\"\"\n\n# Please add your code here\nperformance_issues = \"\"\nsecurity_issues = \"\"\nsyntax_errors = \"\"\nlogical_errors = \"\"\n\ndef logError(msg, ErrorCode):\n    with open('log.txt', 'a') as logFile:\n        logFile.write(f'ERROR: {msg}, CODE: {ErrorCode}')\n\n    return {\n        \"performance_issues\": performance_issues,\n        \"security_issues\": security_issues,\n        \"syntax_errors\": syntax_errors,\n        \"logical_errors\": logical_errors\n    }\n", "groundtruth": {"performance_issues": {"lines": ["for i in range(1000):"], "description": "Unnecessary loop with no operation inside, causing performance degradation."}}}
{"task_id": "python/25", "content": "\n\ndef delete_even_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]\n", "groundtruth": {"logical_errors": {"lines": ["for num in numbers:", "numbers.remove(num)"], "description": "Modifying a list while iterating over it can lead to unexpected behavior due to the changing list size."}, "performance_issues": {"lines": ["numbers.remove(num)"], "description": "Removing items from a list within a loop is inefficient. Building a new list with items to keep would be more performance-friendly."}}}
{"task_id": "python/26", "content": "\n\ndef SendEmail(to, subject, body, emailPass):\n    smtp_server = 'smtp.example.com'\n    user_name = 'example_user'\n    if emailPass == '':\n        print('Error: Password is empty')\n        return False\n    # Email sending logic\n    return True\n", "groundtruth": {"security_issues": {"lines": ["if emailPass == '':", "def SendEmail(to, subject, body, emailPass):"], "description": "Passing sensitive information like email password as a function argument can lead to accidental exposure."}}}
{"task_id": "python/27", "content": "\nSOLUTION:\n\nimport hashlib\n\ndef user_login(username, input_password):\n    stored_password = get_stored_password(username)  # Mock function\n    hashed_input_password = hashlib.md5(input_password.encode()).hexdigest()\n    if hashed_input_password == stored_password:\n        return True\n    else:\n        return False\n", "groundtruth": {"security_issues": {"lines": ["if input_password == stored_password:"], "description": "Directly comparing a plaintext password against a stored value without hashing exposes the application to security risks."}}}
{"task_id": "python/28", "content": "", "groundtruth": {"security_issues": {"lines": ["hashlib.md5((plainText + salt).encode()).hexdigest()"], "description": "MD5 is a weak hashing mechanism for secure applications like password storage, and the salt is also insecurely hardcoded."}}}
{"task_id": "python/29", "content": "\n# Answer\n{\n    \"performance_issues\": \"def getUserDetails(userID):\n    users = {'101': {'name': 'John', 'age': 30}, '102': {'name': 'Jane', 'age': 25}}\n    if userID in users:\n        userDetail = users[userID]\n        print('User Name:', userDetail['name'], '| Age:', userDetail['age'])\",\n    \"security_issues\": \"def getUserDetails(userID):\n    users = {'101': {'name': 'John', 'age': 30}, '102': {'name': 'Jane', 'age': 25}}\n    userDetail = users[userID]\n    print('User Name:', userDetail['name'], '| Age:', userDetail['age'])\",\n    \"syntax_errors\": \"def getUserDetails(userID):\n    users = {'101': {'name': 'John', 'age': 30}, '102': {'name': 'Jane', 'age': 25}}\n    userDetail = users[userID]\n    print('User Name:', userDetail['name'], '| Age:', userDetail['age'])\",\n    \"logical_errors\": \"def getUserDetails(userID):\n    users = {'101': {'name': 'John', 'age': 30}, '102': {'name': 'Jane', 'age': 25}}\n    userDetail = users[userID]\n    print('User Name:', userDetail['name'], '| Age:', userDetail['age'])\"\n}\n", "groundtruth": {"logical_errors": {"lines": ["userDetail = users[userID]"], "description": "Does not check if the userID exists in the users dictionary, which can raise a KeyError if the userID is not found."}}}
{"task_id": "python/30", "content": "", "groundtruth": {"logical_errors": {"lines": ["if url[:5] != 'https'"], "description": "The logic incorrectly skips adding 'https' URLs to the list by using '!=' instead of '==', allowing insecure URLs."}, "performance_issues": {"lines": ["secure_urls = secure_urls + [url]"], "description": "Inefficient string concatenation within a loop. It's more efficient to use the append method."}}}
{"task_id": "python/31", "content": "\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n# Function call\nprint(fibonacci(10))\n", "groundtruth": {"logical_errors": {"lines": ["return fibonacci(n-1) + fibonacci(n-1)"], "description": "Incorrectly calculates Fibonacci sequence due to a logical error in the recursion formula."}, "performance_issues": {"lines": ["return fibonacci(n-1) + fibonacci(n-1)"], "description": "Inefficient recursive calls, should be 'fibonacci(n-1) + fibonacci(n-2)'."}}}
{"task_id": "python/32", "content": "", "groundtruth": {"performance_issues": {"lines": ["if value not in result_list:"], "description": "Checking 'not in' on a list for each element is inefficient, especially for large datasets."}}}
{"task_id": "python/33", "content": "'''\ndef calculate_factorial(n):\n    if n < 0:\n        raise ValueError('The value of n must be a non-negative integer.')\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\n# Test\nprint(calculate_factorial(5))\n'''\n{\n    \"performance_issues\": \"\",\n    \"security_issues\": \"\",\n    \"syntax_errors\": \"\",\n    \"logical_errors\": \"if n < 0: raise ValueError('The value of n must be a non-negative integer.')\"\n}\n", "groundtruth": {"logical_errors": {"lines": ["if n == 0:"], "description": "Function does not handle negative inputs, which leads to incorrect behavior (infinite recursion)."}, "security_issues": {"lines": ["return n * calculate_factorial(n-1)"], "description": "Potential stack overflow due to recursion without base case for negative numbers, posing a security risk."}}}
{"task_id": "python/34", "content": "", "groundtruth": {"logical_errors": {"lines": ["if list1[i] < list2[i]:"], "description": "Comparison should be between list1[i] and list2[j], not list2[i], causing incorrect merges."}, "performance_issues": {"lines": ["mergedList += list1[i:] + list2[j:]"], "description": "Concatenating lists at the end of while loop can be inefficient for large lists."}}}
{"task_id": "java/0", "content": "", "groundtruth": "class Solution {    public int findChampion(int n, int[][] edges) {        int[] degree = new int[n];        for (int[] e : edges) {            degree[e[1]]++;        }        int champion = -1;        for (int i = 0; i < n; i++) {            if (degree[i] == 0) {                if (champion == -1) {                    champion = i;                } else {                    return -1;                }            }        }        return champion;    }}"}
{"task_id": "java/1", "content": "The test data is as follows:\nInput: edges = [[0,1],[0,2]], values = [1,2,3]\nOutput: 4\nExplanation: The tree is:\n0 -- 1\n|   |\n2 -- 3\nIn this example, the optimal way to choose a node is to:\n- Choose node 2 and add 3 to the score.\nThe tree becomes:\n0 -- 1\n|   |\n2 -- 3\nThe sum of values on the path from the root to the leaf is 3 - 0 = 3, which is different from zero.\nInput: edges = [[0,1],[1,2],[0,3],[1,4],[2,5],[3,6],[4,7]], values = [1,2,3,4,5,6,7]\nOutput: 15\nInput: edges = [[0,1],[1,2],[2,3],[2,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15]], values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nOutput: 15\nInput: edges = [[0,1],[1,2],[2,3],[2,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15],[13,16],[14,17],[15,18],[16,19],[17,20],[18,21],[19,22],[20,23],[21,24],[22,25],[23,26],[24,27],[25,28],[26,29],[27,30],[28,31],[29,32],[30,33],[31,34],[32,35],[33,", "groundtruth": "class Solution {    public long maximumScoreAfterOperations(int[][] edges, int[] values) {        List<Integer>[] g = new ArrayList[values.length];        Arrays.setAll(g, e -> new ArrayList<>());        g[0].add(-1);         for (int[] e : edges) {            int x = e[0], y = e[1];            g[x].add(y);            g[y].add(x);        }        long ans = 0;        for (int v : values) {            ans += v;        }        return ans - dfs(0, -1, g, values);    }    private long dfs(int x, int fa, List<Integer>[] g, int[] values) {        if (g[x].size() == 1) {             return values[x];        }        long loss = 0;         for (int y : g[x]) {            if (y != fa) {                loss += dfs(y, x, g, values);             }        }        return Math.min(values[x], loss);     }}"}
{"task_id": "java/2", "content": "\n \n\nExample 1:\nInput: nums = [1,2,2]\nOutput: \"isosceles\"\nExplanation: The given array can form an isosceles triangle with sides of length 1, 2, and 2.\nExample 2:\nInput: nums = [3,4,5]\nOutput: \"none\"\nExplanation: The given array cannot form a triangle.\nExample 3:\nInput: nums = [1,1,1]\nOutput: \"equilateral\"\nExplanation: The given array can form an equilateral triangle with all sides of length 1.\nExample 4:\nInput: nums = [2,2,3]\nOutput: \"scalene\"\nExplanation: The given array can form a scalene triangle with sides of length 2, 2, and 3.\n \n\nConstraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 2000\n*/\n\nclass Solution {\n    public String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) {\n            return \"none\";\n        }\n        if (x == z) {\n            return \"equilateral\";\n        }\n        if (y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }\n}\n", "groundtruth": "class Solution {    public String triangleType(int[] nums) {        Arrays.sort(nums);        int x = nums[0];        int y = nums[1];        int z = nums[2];        if (x + y <= z) { // 排序后，只需比较 x+y 和 z            return 'none';        }        if (x == z) { // 排序了，说明 y 也和 x z 相等            return 'equilateral';        }        if (x == y || y == z) {            return 'isosceles';        }        return 'scalene';    }}"}
{"task_id": "java/3", "content": "", "groundtruth": "class Solution {    public int numberOfPairs(int[][] points) {        int pairs = 0;        Arrays.sort(points, (a, b) -> {            if (a[0] != b[0]) {                return a[0] - b[0];            } else {                return b[1] - a[1];            }        });        int n = points.length;        for (int i = 0; i < n; i++) {            for (int j = i + 1; j < n; j++) {                if (points[i][1] >= points[j][1] && isGood(points, i, j)) {                    pairs++;                }            }        }        return pairs;    }    public boolean isGood(int[][] points, int index1, int index2) {        int n = points.length;        for (int i = 0; i < n; i++) {            if (i == index1 || i == index2) {                continue;            }            if (points[i][0] >= points[index1][0] && points[i][0] <= points[index2][0] && points[i][1] >= points[index2][1] && points[i][1] <= points[index1][1]) {                return false;            }        }        return true;    }}"}
{"task_id": "java/4", "content": "", "groundtruth": "class Solution {    public long maximumSubarraySum(int[] nums, int k) {        long ans = Long.MIN_VALUE;        long sum = 0;        Map<Integer, Long> minS = new HashMap<>();        for (int x : nums) {            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);            ans = Math.max(ans, sum + x - Math.min(s1, s2));            minS.merge(x, sum, Math::min);            sum += x;        }        return ans > Long.MIN_VALUE / 4 ? ans : 0;    }}"}
{"task_id": "java/5", "content": "Note:\n\nThe binary string contains only '0' and '1'.\nThe length of the binary string is in the range [1, 5000].\nThe binary string is always valid.\n\nExample 1:\nInput: s = \"0110\"\nOutput: 2\nExplanation: The binary string has a total of two substring that contains only '1's.\nExample 2:\nInput: s = \"10101\"\nOutput: 4\nExplanation: The binary string has a total of four substring that contains only '1's.\n\n \n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/number-of-substrings-with-only-1s\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = s.size();\n        int *a = new int[n + 1];\n        int m = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a[m++] = i;\n            }\n        }\n        a[m] = n;\n        int ans = 0;\n        int i = 0;\n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left;\n            }\n            for (int k = i; k < m; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 >= a[k] - left - (k - i)) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += (cnt1 - cnt0) * (cnt", "groundtruth": "class Solution {    public int numberOfSubstrings(String S) {        char[] s = S.toCharArray();        int n = s.length;        int m = 0;        int[] a = new int[n + 1];        for (int i = 0; i < n; i++) {            if (s[i] == '0') {                a[m++] = i;            }        }        int tot1 = n - m;        a[m] = n; // 哨兵        int ans = 0;        int i = 0; // >= left 的第一个 0 的下标是 a[i]        for (int left = 0; left < n; left++) {            if (s[left] == '1') {                ans += a[i] - left; // 不含 0 的子串个数            }            for (int k = i; k < m; k++) {                int cnt0 = k - i + 1;                if (cnt0 * cnt0 > tot1) {                    break;                }                int cnt1 = a[k] - left - (k - i);                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);            }            if (s[left] == '0') {                i++; // 这个 0 后面不会再枚举到了            }        }        return ans;    }}"}
{"task_id": "java/6", "content": "\n", "groundtruth": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        boolean[] vis = new boolean[circles.length];\n        for (int i = 0; i < circles.length; i++) {\n            long x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (inCircle(x, y, r, 0, 0) || // 圆 i 包含矩形左下角\n                inCircle(x, y, r, X, Y) || // 圆 i 包含矩形右上角\n                // 圆 i 是否与矩形上边界/左边界相交相切\n                !vis[i] && (x <= X && Math.abs(y - Y) <= r ||\n                            y <= Y && x <= r ||\n                            y > Y && inCircle(x, y, r, 0, Y)) && dfs(i, X, Y, circles, vis)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n    private boolean inCircle(long ox, long oy, long r, long x, long y) {\n        return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r;\n    }\n\n    private boolean dfs(int i, int X, int Y, int[][] circles, boolean[] vis) {\n        long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n        // 圆 i 是否与矩形右边界/下边界相交相切\n        if (y1 <= Y && Math.abs(x1 - X) <= r1 ||\n            x1 <= X && y1 <= r1 ||\n            x1 > X && inCircle(x1, y1, r1, X, 0)) {\n            return true;\n        }\n        vis[i] = true;\n        for (int j = 0; j < circles.length; j++) {\n            long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n            // 在两圆相交相切的前提下，点 A 是否严格在矩形内\n            if (!vis[j] &&\n                (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) &&\n                x1 * r2 + x2 * r1 < (r1 + r2) * X &&\n                y1 * r2 + y2 * r1 < (r1 + r2) * Y &&\n                dfs(j, X, Y, circles, vis)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/7", "content": "", "groundtruth": "class Solution {\n    public long flowerGame(int n, int m) {\n        long a = ((long)n/2) * ((long)m-((long)m/2));\n        long b = ((long)m/2) * ((long)n-((long)n/2));\n        return a + b;\n    }\n}\n"}
{"task_id": "java/8", "content": "\n\n\nNote: The input/output format and the examples below are used for system testing. You should output the answer to the problem and not print anything else.\n\n\n\nExample 1:\n\nInput: nums = [3,2,2,3], k = 2\nOutput: 7\nExplanation: We can first reduce the array to [3, 3] by operating on the second and third elements.\nThen, we can reduce the array to [3] by operating on the first element.\nThe resulting array is [3], which has a minimum value of 3.\n\nExample 2:\n\nInput: nums = [1,2,3,2,3], k = 3\nOutput: 4\nExplanation: We can first reduce the array to [1, 3, 3] by operating on the second and third elements.\nThen, we can reduce the array to [1, 3] by operating on the first element.\nThe resulting array is [1, 3], which has a minimum value of 4.\n\n\n\nConstraints:\n\n    1 <= nums.length <= 10^5\n    1 <= nums[i] <= 10^9\n    1 <= k <= 10^5\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; // 操作次数\n            int and = -1; // -1 的二进制全为 1\n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; // 合并 x，操作次数加一\n                } else {\n                    and = -1; // 准备合并下一段\n                }\n            }\n            if (cnt > k) {\n                ans |= mask; // 答案的这个比特位必须", "groundtruth": "class Solution {\n    public int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; // 操作次数\n            int and = -1; // -1 的二进制全为 1\n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; // 合并 x，操作次数加一\n                } else {\n                    and = -1; // 准备合并下一段\n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; // 答案的这个比特位必须是 1\n                mask ^= 1 << b; // 后面不考虑这个比特位\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/9", "content": "\n \n\nNote:\n\n1 <= n <= 100\n1 <= x, y <= n\nThe values of x and y are all different.\nThe value of x is not equal to y.\n\n \n\nExample 1:\n\nInput: n = 3, x = 1, y = 2\nOutput: [2,1,1]\nExplanation:\nThere are two pairs of houses (1, 2) and (3, 1).\nHouse 1 is reachable from house 2 in 1 street.\nHouse 2 is reachable from house 1 in 1 street.\nHouse 1 is reachable from house 3 in 2 streets.\nHouse 2 is reachable from house 3 in 2 streets.\nHouse 3 is reachable from house 1 in 2 streets.\nHouse 3 is reachable from house 2 in 2 streets.\n\nExample 2:\n\nInput: n = 4, x = 1, y = 3\nOutput: [1,1,1,3]\nExplanation: The two pairs of houses are (1, 2) and (3, 4).\n\nExample 3:\n\nInput: n = 5, x = 3, y = 5\nOutput: [1,1,1,1,1]\nExplanation: The five pairs of houses are (1, 2), (3, 4), (5, 1), (5, 2) and (5, 3).\n \n\nConstraints:\n\n1 <= n <= 100\n1 <= x, y <= n\nx != y\n\n```\n/*\n * @lc app=leetcode.cn id=1172 lang=java\n *\n * [1172] 餐厅过菜问题\n */\nclass Solution {\n    public int[] countPairs(int n, int[][] favorite) {\n        int[] res = new int[n];\n        for (int[] f : favorite) {\n            res[f[0] - 1]++;\n            res[f[1] - 1]++;\n        }\n        return res;\n    }\n}\n", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n        return result;\n    }\n}\n"}
{"task_id": "java/10", "content": "\nPlease fill in the blank space with your answer.\n\nclass Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        \n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n\n        //最终再遍历一次��", "groundtruth": "class Solution {\n    public int[] countOfPairs(int n, int x, int y) {\n        int w[][] = new int[n + 1][n + 1];\n        int INF = Integer.MAX_VALUE / 2;\n        \n        //初始化 邻接矩阵。\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                w[i][j] = (i == j ? 0 : INF);\n\n        //额外的捷径的权值是1。但不能是自身到自身，因为自身到自身的权值本来就是0.\n        if (x != y) {\n            w[x][y] = 1;\n            w[y][x] = 1;\n        }\n\n        //建图，前后相邻 权值都是1。\n        for (int i = 1; i < n; i++) {\n            w[i][i + 1] = 1;\n            w[i + 1][i] = 1;\n        }\n\n        //佛洛依德算法\n        for (int p = 1; p <= n; p++)\n            for (int st = 1; st <= n; st++)\n                for (int end = 1; end <= n; end++)\n                    w[st][end] = Math.min(w[st][end], w[st][p] + w[p][end]);\n\n        //先用下标从0开始的数组来求结果。\n        int[] res = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= n; j++)\n                if (w[i][j] != INF)\n                    res[w[i][j]]++;\n\n        //最终再遍历一次把求得的结果放到 下标从1开始的result数组。\n        int[] result  = new int[n];\n        for (int i = 0; i < n; i++)\n            result[i] = res[i + 1];\n\n        return result;\n    }\n}\n"}
{"task_id": "java/11", "content": "\nNote: The number of bits of an integer is the number of 1s in its binary representation. For example, the number of bits of 1 is 1, the number of bits of 2 is 1, and the number of bits of 3 is 2.\n\nExample 1:\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: After 5 operations, nums will be sorted in ascending order.\n1. Swap nums[0] and nums[1], nums becomes [2,1,3,4,5].\n2. Swap nums[0] and nums[1], nums becomes [1,2,3,4,5].\n3. Swap nums[2] and nums[3], nums becomes [1,2,4,3,5].\n4. Swap nums[2] and nums[3], nums becomes [1,2,3,4,5].\n5. Swap nums[4] and nums[5], nums becomes [1,2,3,4,5].\n\nExample 2:\nInput: nums = [1,2,3,3,3,3,3,3,3,3]\nOutput: false\nExplanation:\nNo matter how many times the operation is performed, nums will always be [1,2,3,3,3,3,3,3,3,3].\nSince nums is already sorted, no operation is needed and there is no way to sort it.\n\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\n", "groundtruth": "class Solution {\n    public boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "java/12", "content": "\n", "groundtruth": "class Solution {\n    public int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }\n}\n"}
{"task_id": "java/13", "content": "\nclass Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        k--;\n        sumL = nums[0];\n        for (int i = 1; i < dist + 2; i++) {\n            sumL += nums[i];\n            L.merge(nums[i], 1, Integer::sum);\n        }\n        sizeL = dist + 1;\n        while (sizeL > k) {\n            l2r();\n        }\n\n        long ans = sumL;\n        for (int i = dist + 2; i < nums.length; i++) {\n            // 移除 out\n            int out = nums[i - dist - 1];\n            if (L.containsKey(out)) {\n                sumL -= out;\n                sizeL--;\n                removeOne(L, out);\n            } else {\n                removeOne(R, out);\n            }\n\n            // 添加 in\n            int in = nums[i];\n            if (in < L.lastKey()) {\n                sumL += in;\n                sizeL++;\n                R.merge(in, 1, Integer::sum);\n            } else {\n                L.merge(in, 1, Integer::sum);\n            }\n\n            // 维护大小\n            if (sizeL == k - 1) {\n                r2l();\n            } else if (sizeL == k + 1) {\n                l2r();\n            }\n\n            ans = Math.min(ans, sumL);\n        }\n        return ans;\n    }\n\n    private long sumL;\n    private int sizeL;\n    private final TreeMap<Integer, Integer> L = new TreeMap<>();\n    private final TreeMap<Integer, Integer> R = new TreeMap<>();\n\n    private void l2r() {\n        int x = L.lastKey();\n        removeOne(L, x);\n        sumL -= x;\n        sizeL--;\n        R.merge(x, 1, Integer::sum);\n    }\n\n    private void r2l() {\n        int x = R.firstKey();", "groundtruth": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        k--;\n        sumL = nums[0];\n        for (int i = 1; i < dist + 2; i++) {\n            sumL += nums[i];\n            L.merge(nums[i], 1, Integer::sum);\n        }\n        sizeL = dist + 1;\n        while (sizeL > k) {\n            l2r();\n        }\n\n        long ans = sumL;\n        for (int i = dist + 2; i < nums.length; i++) {\n            // 移除 out\n            int out = nums[i - dist - 1];\n            if (L.containsKey(out)) {\n                sumL -= out;\n                sizeL--;\n                removeOne(L, out);\n            } else {\n                removeOne(R, out);\n            }\n\n            // 添加 in\n            int in = nums[i];\n            if (in < L.lastKey()) {\n                sumL += in;\n                sizeL++;\n                L.merge(in, 1, Integer::sum);\n            } else {\n                R.merge(in, 1, Integer::sum);\n            }\n\n            // 维护大小\n            if (sizeL == k - 1) {\n                r2l();\n            } else if (sizeL == k + 1) {\n                l2r();\n            }\n\n            ans = Math.min(ans, sumL);\n        }\n        return ans;\n    }\n\n    private long sumL;\n    private int sizeL;\n    private final TreeMap<Integer, Integer> L = new TreeMap<>();\n    private final TreeMap<Integer, Integer> R = new TreeMap<>();\n\n    private void l2r() {\n        int x = L.lastKey();\n        removeOne(L, x);\n        sumL -= x;\n        sizeL--;\n        R.merge(x, 1, Integer::sum);\n    }\n\n    private void r2l() {\n        int x = R.firstKey();\n        removeOne(R, x);\n        sumL += x;\n        sizeL++;\n        L.merge(x, 1, Integer::sum);\n    }\n\n    private void removeOne(Map<Integer, Integer> m, int x) {\n        int cnt = m.get(x);\n        if (cnt > 1) {\n            m.put(x, cnt - 1);\n        } else {\n            m.remove(x);\n        }\n    }\n}\n"}
{"task_id": "java/14", "content": "\nExample 1:\n\nInput: s = \"bcbcba\", a = \"b\", b = \"c\", k = 2\nOutput: [1,2,4,5,7]\nExplanation:\n- \"b\" is found at index 1 and index 4.\n- \"c\" is found at index 2 and index 5.\n- The indices where a and b are found are: [1,2,4,5,7].\nExample 2:\n\nInput: s = \"abcbc\", a = \"a\", b = \"bc\", k = 1\nOutput: [1,2,3]\nExplanation:\n- \"a\" is found at index 1.\n- \"bc\" is found at index 2.\n- The indices where a and b are found are: [1,2,3].\nExample 3:\n\nInput: s = \"babaab\", a = \"b\", b = \"b\", k = 1\nOutput: [1,2,3,4]\nExplanation:\n- \"b\" is found at index 1 and index 4.\n- The indices where a and b are found are: [1,2,3,4].\n \n\nConstraints:\n\n1 <= s.length <= 1000\n1 <= a.length, b.length <= 10\ns, a, and b consist of lowercase English letters.\n0 <= k <= 100", "groundtruth": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        char[] text = s.toCharArray();\n        List<Integer> posA = kmp(text, a.toCharArray());\n        List<Integer> posB = kmp(text, b.toCharArray());\n\n        List<Integer> ans = new ArrayList<>();\n        for (int i : posA) {\n            int bi = lowerBound(posB, i);\n            if (bi < posB.size() && posB.get(bi) - i <= k ||\n                bi > 0 && i - posB.get(bi - 1) <= k) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    private List<Integer> kmp(char[] text, char[] pattern) {\n        int m = pattern.length;\n        int[] pi = new int[m];\n        int c = 0;\n        for (int i = 1; i < m; i++) {\n            char v = pattern[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            pi[i] = c;\n        }\n\n        List<Integer> res = new ArrayList<>();\n        c = 0;\n        for (int i = 0; i < text.length; i++) {\n            char v = text[i];\n            while (c > 0 && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            if (c == m) {\n                res.add(i - m + 1);\n                c = pi[c - 1];\n            }\n        }\n        return res;\n    }\n\n    // 开区间写法\n    private int lowerBound(List<Integer> nums, int target) {\n        int left = -1, right = nums.size(); // 开区间 (left, right)\n        while (left + 1 < right) { // 区间不为空\n            // 循环不变量：\n            // nums[left] < target\n            // nums[right] >= target\n            int mid = (left + right) >>> 1;\n            if (nums.get(mid) < target) {\n                left = mid; // 范围缩小到 (mid, right)\n            } else {\n                right = mid; // 范围缩小到 (left, mid)\n            }\n        }\n        return right;\n    }\n}\n"}
{"task_id": "java/15", "content": "Note: This problem has multiple correct answers. The judger will choose one of them as the answer of this problem. If you doubt, please feel free to ask.\n\nExample 1:\nInput: k = 3, x = 2\nOutput: 6\nExplanation:\nThe binary representation of the numbers from 1 to 6 are:\n1 (0001)\n2 (0010)\n3 (0011)\n4 (0100)\n5 (0101)\n6 (0110)\n\nThe accumulated price for numbers 1 to 6 is (0 + 1 + 2 + 1 + 2 + 3) = 12.\nThe greatest number for which the accumulated price is less than or equal to k (3) is 6.\nExample 2:\nInput: k = 7, x = 2\nOutput: 10\nExplanation:\nThe binary representation of the numbers from 1 to 10 are:\n1 (0001)\n2 (0010)\n3 (0011)\n4 (0100)\n5 (0101)\n6 (0110)\n7 (0111)\n8 (1000)\n9 (1001)\n10 (1010)\n\nThe accumulated price for numbers 1 to 10 is (0 + 1 + 2 + 1 + 2 + 3 + 2 + 3 + 4 + 3) = 25.\nThe greatest number for which the accumulated price is less than or equal to k (7) is 10.\n\nConstraints:\n1 <= k <= 109\n1 <= x <= 100\n\nSolution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        this.x = x;\n        long left = 0;\n        long right = (k + 1) << x;\n        while (left + 1 < right) {\n            long mid = (left + right) >>> 1;\n            if (countDigitOne(mid) <= k) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n\n    private int x;\n    private long num;\n    private long memo[][];\n\n    private long countDigitOne(long num) {\n        this.num = num;\n        int m = 64 - Long.numberOfLeadingZeros(num);\n        memo = new long[m][m + 1];\n        for (long[] row : memo) {\n            Arrays.fill(row, -1);\n        }\n        return dfs(m - 1, 0, true);\n    }\n\n    private long dfs(int i, int cnt1, boolean isLimit) {\n        if (i < 0) return cnt1;\n        if (!isLimit && memo[i][cnt1] != -1) return memo[i][cnt1];\n        int up = isLimit ? (int) (num >> i & 1) : 1;\n        long res = 0;\n        for (int d = 0; d <= up; d++) {\n            res += dfs(i - 1, cnt1 + (d == 1 && (i + 1) % x == 0 ? 1 : 0), isLimit && d == up);\n        }\n        if (!isLimit) memo[i][cnt1] = res;\n        return res;\n    }\n}\n"}
{"task_id": "java/16", "content": "\nThe output is:\n[\n    \"0110\",\n    \"0101\",\n    \"1001\",\n    \"1100\",\n    \"1011\",\n    \"1110\",\n    \"1101\"\n]\n\nThe code that fills in the blank is as follows:\nint mask = (1 << n) - 1;", "groundtruth": "class Solution {\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        int mask = (1 << n) - 1;\n        for (int i = 0; i < (1 << n); i++) {\n            int x = mask ^ i;\n            if (((x >> 1) & x) == 0) {\n                ans.add(Integer.toBinaryString((1 << n) | i).substring(1));\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/17", "content": "\n", "groundtruth": "class Solution {\n    public int numberOfSubmatrices(char[][] grid) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][][] sum = new int[m + 1][n + 1][2];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1][0] = sum[i + 1][j][0] + sum[i][j + 1][0] - sum[i][j][0];\n                sum[i + 1][j + 1][1] = sum[i + 1][j][1] + sum[i][j + 1][1] - sum[i][j][1];\n                if (grid[i][j] != '.') {\n                    sum[i + 1][j + 1][grid[i][j] & 1]++;\n                }\n                if (sum[i + 1][j + 1][0] > 0 && sum[i + 1][j + 1][0] == sum[i + 1][j + 1][1]) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/18", "content": "", "groundtruth": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        char[] t = target.toCharArray();\n        int n = t.length;\n\n        final int MOD = 1_070_777_777;\n        final int BASE = (int) 8e8 + new Random().nextInt((int) 1e8);\n        int[] powBase = new int[n + 1];\n        int[] preHash = new int[n + 1];\n        powBase[0] = 1;\n        for (int i = 0; i < n; i++) {\n            powBase[i + 1] = (int) ((long) powBase[i] * BASE % MOD);\n            preHash[i + 1] = (int) (((long) preHash[i] * BASE + t[i]) % MOD);\n        }\n\n        Map<Integer, Map<Integer, Integer>> minCost = new TreeMap<>();\n        for (int i = 0; i < words.length; i++) {\n            long h = 0;\n            for (char b : words[i].toCharArray()) {\n                h = (h * BASE + b) % MOD;\n            }\n            minCost.computeIfAbsent(words[i].length(), k -> new HashMap<>())\n                   .merge((int) h, costs[i], Integer::min);\n        }\n\n        int[] f = new int[n + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (Map.Entry<Integer, Map<Integer, Integer>> e : minCost.entrySet()) {\n                int len = e.getKey();\n                if (len > i) {\n                    break;\n                }\n                int subHash = (int) (((preHash[i] - (long) preHash[i - len] * powBase[len]) % MOD + MOD) % MOD);\n                f[i] = Math.min(f[i], f[i - len] + e.getValue().getOrDefault(subHash, Integer.MAX_VALUE / 2));\n            }\n        }\n        return f[n] == Integer.MAX_VALUE / 2 ? -1 : f[n];\n    }\n}\n"}
{"task_id": "java/19", "content": "", "groundtruth": "class Solution {\n    public ListNode modifiedList(int[] nums, ListNode head) {\n        Set<Integer> set = new HashSet<>(nums.length); // 预分配空间\n        for (int x : nums) {\n            set.add(x);\n        }\n        ListNode dummy = new ListNode(0, head);\n        ListNode cur = dummy;\n        while (cur.next != null) {\n            if (set.contains(cur.next.val)) {\n                cur.next = cur.next.next; // 删除\n            } else {\n                cur = cur.next; // 向后移动\n            }\n        }\n        return dummy.next;\n    }\n}\n"}
{"task_id": "java/20", "content": "\nPlease select the following radio button(s) before submitting the task:\n\nI have read and understood the task\nI have written the code myself\nI have only used publicly available information to solve the task\nI have not used any form of unauthorized assistance (plagiarism)\n", "groundtruth": "class Solution {\n    public int minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int[][][][] dp = new int[m][n][m][n];\n        for (int i1 = 0; i1 < m; i1++) {\n            for (int j1 = 0; j1 < n; j1++) {\n                for (int i2 = 0; i2 < m; i2++) {\n                    Arrays.fill(dp[i1][j1][i2], Integer.MAX_VALUE);\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j][i][j] = 0;\n            }\n        }\n        for (int rowCount = 1; rowCount <= m; rowCount++) {\n            for (int colCount = 1; colCount <= n; colCount++) {\n                for (int i1 = 0, i2 = rowCount - 1; i2 < m; i1++, i2++) {\n                    for (int j1 = 0, j2 = colCount - 1; j2 < n; j1++, j2++) {\n                        for (int midRow = i1; midRow < i2; midRow++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], horizontalCut[midRow] + dp[i1][j1][midRow][j2] + dp[midRow + 1][j1][i2][j2]);\n                        }\n                        for (int midCol = j1; midCol < j2; midCol++) {\n                            dp[i1][j1][i2][j2] = Math.min(dp[i1][j1][i2][j2], verticalCut[midCol] + dp[i1][j1][i2][midCol] + dp[i1][midCol + 1][i2][j2]);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[0][0][m - 1][n - 1];\n    }\n}\n"}
{"task_id": "java/21", "content": "\n", "groundtruth": "class Solution {\n    public boolean doesAliceWin(String s) {\n        for (char c : s.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "java/22", "content": "", "groundtruth": "class Solution {\n    public int maxOperations(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int cnt1 = 0;\n        for (int i = 0; i < s.length; i++) {\n            if (s[i] == '1') {\n                cnt1++;\n            } else if (i > 0 && s[i - 1] == '1') {\n                ans += cnt1;\n            }\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/23", "content": "\nPlease fill in the blank with the correct values.\n", "groundtruth": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long s = target[0] - nums[0];\n        long ans = Math.abs(s);\n        for (int i = 1; i < nums.length; i++) {\n            int k = (target[i] - target[i - 1]) - (nums[i] - nums[i - 1]);\n            if (k > 0) {\n                ans += s >= 0 ? k : Math.max(k + s, 0);\n            } else {\n                ans -= s <= 0 ? k : Math.min(k + s, 0);\n            }\n            s += k;\n        }\n        return ans;\n    }\n}\n"}
{"task_id": "java/24", "content": "", "groundtruth": "class Solution {\n    private static final int MX = 31622;\n    private static final int[] PI = new int[MX + 1];\n\n    static {\n        for (int i = 2; i <= MX; i++) {\n            if (PI[i] == 0) { // i 是质数\n                PI[i] = PI[i - 1] + 1;\n                for (int j = i * i; j <= MX; j += i) {\n                    PI[j] = -1; // 标记 i 的倍数为合数\n                }\n            } else {\n                PI[i] = PI[i - 1];\n            }\n        }\n    }\n\n    public int nonSpecialCount(int l, int r) {\n        return r - l + 1 - (PI[(int) Math.sqrt(r)] - PI[(int) Math.sqrt(l - 1)]);\n    }\n}\n"}
{"task_id": "python/0", "content": "\nExample 1:\nInput: grid = [[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]], value = 1\nOutput: [1,1,2,2,3,3]\nExplanation: The neighbors of 1 are [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15]. The diagonal neighbors are [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15].\n\nConstraints:\n\nn == grid.length == grid[i].length\n1 <= n <= 1000\n0 <= grid[i][j] < n2\nThere are at most 10000 calls in total to adjacentSum and diagonalSum.\n0 <= value < n2\n\"\"\"\n\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [ [0] * 4 for _ in range(n * n) ]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n    \n\n\n# Your neighborSum object will be instantiated and called as such:\n# obj = neighborSum(", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n    "}
{"task_id": "python/1", "content": "\n", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n "}
{"task_id": "python/2", "content": "\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n\n#Tests\ngrid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nns = neighborSum(grid)\nassert ns.adjacentSum(0) == 0\nassert ns.adjacentSum(1) == 0\nassert ns.adjacentSum(2) == 0\nassert ns.diagonalSum(0) == 0\nassert ns.diagonalSum(1) == 0\nassert ns.diagonalSum(2) == 0\n\ngrid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\nns = neighborSum(grid)\nassert ns.adjacentSum(0) == 0\nassert ns.adjacentSum(1) == 0\nassert ns.adjacentSum(2) == 0\nassert ns.diagonalSum(0) == 0\nassert ns.diagonalSum(1) == 0\nassert ns.diagonalSum(2) == 0\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nns = neighborSum(grid)\nassert ns.adjacentSum(0) == 6\nassert ns.adjacentSum(1) == 10\nassert ns.", "groundtruth": " DIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/3", "content": "", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n  "}
{"task_id": "python/4", "content": "\n \n\nExample 1:\n\nInput: n = 3, queries = [[0,1],[1,2],[0,2],[x,y]]\nOutput: [3,3,3,3]\nExplanation:\nAt the beginning, there is a path between every pair of cities.\nAfter the first query, the path between cities 0 and 1 is removed, and the length of the shortest path between cities 0 and 1 is 3.\nAfter the second query, the path between cities 1 and 2 is removed, and the length of the shortest path between cities 0 and 2 is 3.\nAfter the third query, the path between cities 0 and 2 is removed, and the length of the shortest path between cities 0 and 2 is 3.\nAfter the fourth query, there are no paths between any two cities, so the length of the shortest path between cities 0 and 1 is 3.\nExample 2:\n\nInput: n = 5, queries = [[0,4],[1,2],[2,3],[0,3],[0,4]]\nOutput: [0,0,0,0,0]\nExplanation:\nAfter the first query, city 0 and city 4 are connected, and the length of the shortest path between them is 0.\nAfter the second query, city 1 and city 2 are connected, and the length of the shortest path between them is 0.\nAfter the third query, city 2 and city 3 are connected, and the length of the shortest path between them is 0.\nAfter the fourth query, city 0 and city 3 are connected, and the length of the shortest path between them is 0.\nAfter the fifth query, city 0 and city 4 are still connected, and the length of the shortest path between them is 0.\nExample 3:\n\nInput: n = 6, queries = [[0,4],[1,4],[2,5],[0,3],[1,4]]\nOutput: [0,0,0,0,0,0]\nExplanation:\nAfter the first query, city 0 and city 4 are connected, and the length of the shortest path between them is 0.\nAfter the second", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/5", "content": "The code is in Python.\n\n\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/6", "content": "\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, find(fa[x])\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/7", "content": "\n \n\nExample 1:\n\nInput: n = 6, queries = [[0,1],[1,3],[2,4],[0,5]]\nOutput: [6,5,4,3]\nExplanation: The shortest path to city 0 after processing each query is:\n[0,1] -> [0,1,3,4,5]\n[1,3] -> [0,1,3,4,5]\n[2,4] -> [0,1,2,3,4,5]\n[0,5] -> [0,1,2,3,4,5]\nExample 2:\n\nInput: n = 6, queries = [[0,1],[1,2],[3,4],[4,5]]\nOutput: [6,5,4,3]\nExample 3:\n\nInput: n = 10, queries = [[1,5],[7,9]]\nOutput: [4,3]\n \n\nConstraints:\n\n2 <= n <= 10^4\n1 <= queries.length <= 10^5\nqueries[i].length == 2\n0 <= ui, vi <= n - 1\nui != vi\n\n```\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(l)\n            i = l\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n```", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/8", "content": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i += 1\n            ans.append(cnt)\n        return ans\n", "groundtruth": " class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/9", "content": "", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/10", "content": "\nThe test data are as follows:\n\na = [1, 2, 3, 4, 5, 6]\nqueries = [[1, 1], [1, 2], [2, 2, 2], [2, 4, 1], [1, 5], [1, 5]]\nExpected results are as follows:\n\n[1, 1, 2, 3, 2, 1]\nNote that in this example, the 2nd query asks for the number of alternating groups with size 2. In the array, there is only one group with this size.\n\nThe 4th query asks for the number of alternating groups with size 4. In the array, there are 3 groups with this size.", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/11", "content": "\nThe test case contains several queries of the first type. For each query, return the result of the query in the corresponding order.\nThe output of the program is the array of integers that contains the result of each query.\n\nPlease enter the number of queries: 3\nEnter the type of query: 1, and the size: 2\nEnter the type of query: 2, and the index: 2, and the color: 0\nEnter the type of query: 1, and the size: 1\n\nThe expected result:\n2\n1\n2\n\n", "groundtruth": " from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/12", "content": "\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\n        double=0\n        for it in nums:\n            if it>=10: \n                double=double+it\n            else:\n                single=single+it\n        \n        return single !=double\n    \n\n## 506. Relative Ranks\n\nclass Solution:\n    def findRelativeRanks(self, nums: List[int]) -> List[str]:\n        temp = nums[:]\n        temp.sort(reverse=True)\n        res = []\n        for i in nums:\n            for j in range(len(temp)):\n                if i == temp[j]:\n                    if j == 0:\n                        res.append(\"Gold Medal\")\n                    elif j == 1:\n                        res.append(\"Silver Medal\")\n                    elif j == 2:\n                        res.append(\"Bronze Medal\")\n                    else:\n                        res.append(str(len(nums)-j))\n                    break\n        return res\n\n## 507. Perfect Number\n\nclass Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        sum = 1\n        for i in range(2, int(num ** 0.5 + 1)):\n            if num % i == 0:\n                sum += i\n                if num // i != i:\n                    sum += num // i\n        return sum == num\n\n## 508. Most Frequent Subtree Sum\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        def sum(root):\n            if not root:\n                return 0\n            return root.val + sum(root.left) + sum(root.right)\n        dic = collections.defaultdict(int)\n        ans = []\n        def dfs(root):\n            if not root:\n                return 0\n            temp = root.val + dfs(root.left) + dfs", "groundtruth": " class Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\n        double=0\n        for it in nums:\n            if it>=10: \n                double=double+it \n            else:\n                single=single+it  \n        \n        return single !=double\n "}
{"task_id": "python/13", "content": "\n \n\nExample 1:\n\nInput: l = 2, r = 11\nOutput: 2\nExplanation: The number of non-special numbers in the range [2, 11] is 2: 4 and 8.\nExample 2:\n\nInput: l = 1, r = 10\nOutput: 4\nExplanation: The number of non-special numbers in the range [1, 10] is 4: 1, 3, 5, and 7.\n \n\nConstraints:\n\n1 <= l <= r <= 10000\n */\n\n/* my solution */\n// solution-1, ms, defeat 100%\n// time limit exceeded\nclass Solution {\npublic:\n    int countPrimes(int n) {\n        vector<int> v(n, 0);\n        for (int i = 2; i < n; i++) {\n            if (!v[i])\n                for (int j = i; j < n; j += i)\n                    v[j]++;\n        }\n        \n        int res = 0;\n        for (int i = 2; i < n; i++)\n            if (v[i] != 2)\n                res++;\n        \n        return res;\n    }\n};\n\n// solution-2, 102ms, defeat 75.38%\n// 考虑到题目的要求是返回[l, r]之间的不是特殊数字的个数，所以不能先统计出所有特殊数字的个数，然后再从[l, r]中排除掉这些数字\nclass Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        int cnt = 0;\n        for (int i = l; i <= r; i++) {\n            bool special = false;\n            for (int j = 2; j <= i / j; j++) {\n                if (i % j == 0) {\n                    special = true;\n                    break;\n                }\n            }\n           ", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n"}
{"task_id": "python/14", "content": "\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        res = 0\n        for i in range(l, r + 1):\n            res += pi[i]\n        return res\n\n", "groundtruth": " MX = 31622\npi = [0] * (MX + 1)\nfor i in range(2, MX + 1):\n    if pi[i] == 0:  # i 是质数\n        pi[i] = pi[i - 1] + 1\n        for j in range(i * i, MX + 1, i):\n            pi[j] = -1  # 标记 i 的倍数为合数\n    else:\n        pi[i] = pi[i - 1]\n\nclass Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        return r - l + 1 - (pi[isqrt(r)] - pi[isqrt(l - 1)])\n "}
{"task_id": "python/15", "content": "\nNote: \nThe length of the binary string s will not exceed 10^5.\n\nSolution:\n```\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += 1  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b =='0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n```\n\n\n", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n "}
{"task_id": "python/16", "content": "\nNote: 10^5 <= s.length <= 10^5, s[i] is either '0' or '1'.\n\nThe output is the number of substrings with dominant ones.\n\nSolution：\n\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = a[k + 1] - a[k]\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k + 1] - a[k] - cnt0\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n\n", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/17", "content": "The code format is as follows:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)\n        ans = i = 0\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                ans += cnt0 * cnt1 >= cnt1 * cnt0\n            if b == '0':\n                i += 1\n        return ans\n\n\n \nThe output of the testcase will be the number of substrings with dominant ones.\nExample 1:\nInput: s = \"011001\"\nOutput: 5\nExplanation: The 5 substrings with dominant ones are underlined below:\n\"011001\"\n\"011001\"\n\"011001\"\n\"011001\"\n\"011001\"\n\n\nExample 2:\nInput: s = \"10101\"\nOutput: 2\nExplanation: The 2 substrings with dominant ones are underlined below:\n\"10101\"\n\"10101\"\n\n\nExample 3:\nInput: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only one 1, so the number of substrings with dominant ones is 21.\n\n\nConstraints:\n\n3 <= s.length <= 5 * 104\ns[i] is either '0' or '1'.\ns[0] == '0'\n", "groundtruth": " class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/18", "content": "\nNote: The length of circles will not exceed 1000.\n\n\n\nExample 1:\n\nInput: xCorner = 2, yCorner = 1, circles = [[1,0,1]]\nOutput: false\nExplanation: \nThe corner (2,1) is not in any circle.\nExample 2:\n\nInput: xCorner = 1, yCorner = 2, circles = [[1,1,1]]\nOutput: true\nExplanation: \nThe corner (1,2) is inside the circle (1,1,1).\nExample 3:\n\nInput: xCorner = 1, yCorner = 1, circles = [[1,0,2],[1,2,1]]\nOutput: false\nExplanation: \nThe corner (1,1) is outside the circle (1,0,2) and inside the circle (1,2,1).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": " class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n    "}
{"task_id": "python/19", "content": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, ", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/20", "content": "\nThe time limit for this problem is 1 seconds.\n\nThe input contains multiple test cases. The first line contains an integer t (1≤t≤10), denoting the number of test cases.\n\nFor each test case, there are two lines of input. The first line contains two integers xCorner and yCorner (1≤xCorner,yCorner≤100), representing the length and width of the rectangle. The second line contains an integer n (1≤n≤50), denoting the number of circles. Each of the following n lines contains three integers xi,yi,ri (1≤xi,yi,ri≤100), denoting the center and radius of the circle.\n\nThe output contains one line for each test case. If the path exists, print \"YES\", otherwise print \"NO\".\n\nSample Input 1:\n1\n5 5\n3\n1 1 1\n2 2 2\n3 3 3\nSample Output 1:\nNO\nSample Input 2:\n2\n5 5\n3\n1 1 1\n2 2 2\n3 3 3\n5 5\n3\n1 1 1\n2 2 2\n3 3 3\nSample Output 2:\nNO\nYES\n", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or                x1 <= X and y1 <= r1 or                x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and                    (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and                    x1 * r2 + x2 * r1 < (r1 + r2) * X and                    y1 * r2 + y2 * r1 < (r1 + r2) * Y and                    dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or                in_circle(x, y, r, X, Y) or                not vis[i] and (x <= X and abs(y - Y) <= r or                                y <= Y and x <= r or                                y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/21", "content": "\nThe input parameter is a 2D boolean matrix, and the output is an integer. Do not print the output parameter. The output parameter is the only output, and you only need to print a single line to output the result.\n\nSample Input 1:\n[[1, 1, 0], [0, 1, 0], [1, 1, 1]]\nSample Output 1:\n2\nSample Input 2:\n[[1, 0, 0], [0, 1, 0], [0, 1, 1]]\nSample Output 2:\n0\n\n\n# @param {Integer[][]} grid\n# @return {Integer}\ndef find_champion(grid)\n    n = grid.size\n    strongest = nil\n    for i in 0...n\n        strong = true\n        for j in 0...n\n            if grid[i][j] == 0\n                strong = false\n                break\n            end\n        end\n        if strong\n            strongest = i\n        end\n    end\n    strongest\nend\n\n# @param {Integer[][]} grid\n# @return {Integer}\ndef find_champion(grid)\n    n = grid.size\n    strongest = nil\n    for i in 0...n\n        strong = true\n        for j in 0...n\n            if grid[i][j] == 0\n                strong = false\n                break\n            end\n        end\n        if strong\n            strongest = i\n        end\n    end\n    strongest\nend\n\n# @param {Integer[][]} grid\n# @return {Integer}\ndef find_champion(grid)\n    n = grid.size\n    strongest = nil\n    for i in 0...n\n        strong = true\n        for j in 0...n\n            if grid[i][j] == 0\n                strong = false\n                break\n            end\n        end\n        if strong\n            strongest = i\n        end\n    end\n    strongest\nend\n\n# @param {Integer[][]} grid\n# @return {Integer}\ndef find_champion(grid)\n    n = grid.size\n    strongest = nil\n    for i in", "groundtruth": "\nclass Solution:\n    def findChampion(self, grid: List[List[int]]) -> int:\n        def check(i):\n            for j in range(n):\n                if i == j:\n                    continue\n                elif grid[i][j] == 1 and grid[j][i] == 0:\n                    continue\n                else:\n                    return False\n            return True\n        n = len(grid)\n        for i in range(n):\n            if check(i):\n                return i\n"}
{"task_id": "python/22", "content": "\nThe given incomplete code is assumed to work. You are not allowed to change the given code.\n\nInput: n = 4, edges = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: The team with number 3 is the champion because there is no team that can defeat them.\nThe team with number 0 and the team with number 1 are not champions, because they can be defeated by the team with number 3.\nThe team with number 2 is not a champion, because they can be defeated by the team with number 3.\n\nInput: n = 8, edges = [[1,5],[2,5],[3,6],[4,7],[5,7],[5,8],[6,8]]\nOutput: 5\nExplanation: The team with number 5 is the champion because there is no team that can defeat them.\nThe teams with numbers 0, 1, 2, 3, and 4 are not champions, because they can be defeated by the team with number 5.\nThe teams with numbers 6 and 7 are not champions, because they can be defeated by the team with number 8.\nThe team with number 8 is not a champion, because they can be defeated by the team with number 5.\n\nInput: n = 1, edges = []\nOutput: 0\nExplanation: There is only one team, so it is the champion.\n\nInput: n = 10, edges = [[9,8],[1,3],[7,8],[4,9],[2,6],[7,3],[5,0],[6,5],[1,8]]\nOutput: 2\nExplanation: The team with number 2 is the champion because there is no team that can defeat them.\nThe team with number 1 is not a champion, because they can be defeated by the team with number 2.\nThe teams with numbers 0, 3, 4, 5, 6, and 7 are not champions, because they can be defeated by the team with number 8.\nThe team with number 8 is not a champion, because they can be defeated by the team with number 9.\nThe team with number 9 is not a champion, because they can be defeated by the team with number ", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/23", "content": "", "groundtruth": "\nclass Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/24", "content": "\n\n\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], dp1 + max(dp0, dp1)\n            \n        return dfs(0)[1]", "groundtruth": "\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/25", "content": "", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/26", "content": "\nNote: The input/output format is the same as that of the LeetCode submission. Please do not modify your code based on this information.\n", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/27", "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/28", "content": "", "groundtruth": "\nclass Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/29", "content": "\nConstraints:\n1 <= nums1.length, nums2.length <= 10^5\n1 <= nums1[i], nums2[i] <= 10^5\n\nExample 1:\nInput: nums1 = [0, 0], nums2 = [0, 0]\nOutput: 0\nExplanation: 0 + 0 = 0, 0 + 0 = 0.\n\nExample 2:\nInput: nums1 = [0, 0], nums2 = [1, 1]\nOutput: 2\nExplanation: 0 + 1 = 1, 1 + 0 = 1.\n\nExample 3:\nInput: nums1 = [1, 1], nums2 = [0, 0]\nOutput: 2\nExplanation: 1 + 0 = 1, 1 + 0 = 1.\n\nExample 4:\nInput: nums1 = [1, 1], nums2 = [1, 1]\nOutput: 2\nExplanation: 1 + 1 = 2, 1 + 1 = 2.\n\nExample 5:\nInput: nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0]\nOutput: 0\nExplanation: 0 + 0 = 0, 0 + 0 = 0, 0 + 0 = 0.\n\nSolution:\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = len([x for x in nums1 if x == 0])\n        zero2 = len([x for x in nums2 if x == 0])\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/30", "content": "\n\n# Complete the minSum function below.\ndef minSum(nums1, nums2):\n    sum1, sum2 = sum(nums1), sum(nums2)\n    zero1 = sum(1 for num in nums1 if num == 0)\n    zero2 = sum(1 for num in nums2 if num == 0)\n    \n    if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n    if zero1 == 0:\n        if sum1 < sum2 + zero2: \n            for i in range(zero2): nums2[i] = sum1 - sum2 + 1\n        else: return sum1\n\n    if zero2 == 0:\n        if sum1 + zero1 > sum2: \n            for i in range(zero1): nums1[i] = sum2 - sum1 + 1\n        else: return sum2\n\n    if sum1 + zero1 < sum2 + zero2: \n        for i in range(zero1): nums1[i] = sum2 - sum1 + 1\n    return sum1 + zero1\n\n", "groundtruth": "\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n"}
{"task_id": "python/31", "content": "", "groundtruth": "\nclass Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/32", "content": "\nNote: The solution is in Python 3.\n", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/33", "content": "\n \n\nInput: edges = [[0,1],[0,2],[1,3],[0,4],[4,5],[5,6],[3,7],[7,8],[8,9],[3,11],[11,12],[12,13]], coins = [1,1,1,1,1,1,1,1,1,1,1,1], k = 3\nOutput: 24\nExplanation: The image shows the given tree. The optimal way to collect coins is to:\n- Collect 1 coin at node 0 and lose 3 points.\n- Collect 1 coin at node 1 and lose 3 points.\n- Collect 1 coin at node 2 and lose 3 points.\n- Collect 1 coin at node 3 and lose 3 points.\n- Collect 1 coin at node 4 and lose 3 points.\n- Collect 1 coin at node 5 and lose 3 points.\n- Collect 1 coin at node 6 and lose 3 points.\n- Collect 1 coin at node 7 and lose 3 points.\n- Collect 1 coin at node 8 and lose 3 points.\n- Collect 1 coin at node 9 and lose 3 points.\n- Collect 1 coin at node 11 and lose 3 points.\n- Collect 1 coin at node 12 and lose 3 points.\n- Collect 1 coin at node 13 and lose 3 points.\nThe total amount of coins collected is 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 13 and the total loss is 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3 = 30. The maximum total points is 13 - 30 = -17.\n\n\nConstraints:\n\nedges.length == n - 1\n2 <= n <= 10^5\nedges[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi\ncoins.length == n\n1 <= coins[i]", "groundtruth": "\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/34", "content": "\nExample 1:\nInput: edges = [[0,1],[0,2],[1,3],[0,4],[4,5],[3,5],[1,6]], coins = [10,20,30,40,50,60], k = 5\nOutput: 200\nExplanation:\nThe root node (0) is considered to have 0 points.\nNode 1 has 10 coins with a value of 20 points.\nNode 2 has 20 coins with a value of 40 points.\nNode 3 has 30 coins with a value of 60 points.\nNode 4 has 40 coins with a value of 80 points.\nNode 5 has 50 coins with a value of 100 points.\nNode 6 has 60 coins with a value of 120 points.\nSo the total points will be 120 + 120 + 120 + 120 + 100 + 120 = 200.\n\nExample 2:\nInput: edges = [[0,1],[0,2],[1,3],[0,4],[4,5],[3,5],[1,6]], coins = [10,20,30,40,50,60], k = 10\nOutput: 200\nExplanation:\nThe root node (0) is considered to have 0 points.\nNode 1 has 10 coins with a value of 20 points.\nNode 2 has 20 coins with a value of 40 points.\nNode 3 has 30 coins with a value of 60 points.\nNode 4 has 40 coins with a value of 80 points.\nNode 5 has 50 coins with a value of 100 points.\nNode 6 has 60 coins with a value of 120 points.\nSo the total points will be 120 + 120 + 120 + 120 + 100 + 120 = 200.\n\nExample 3:\nInput: edges", "groundtruth": " class Solution:     def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:         g = [[] for _ in coins]         for x, y in edges:             g[x].append(y)             g[y].append(x)         @cache         def dfs(i: int, j: int, fa: int) -> int:             res1 = (coins[i] >> j) - k             res2 = coins[i] >> (j + 1)             for ch in g[i]:                 if ch != fa:                     res1 += dfs(ch, j, i)                      if j < 13:                          res2 += dfs(ch, j + 1, i)              return max(res1, res2)         return dfs(0, 0, -1) "}
{"task_id": "python/35", "content": "\nclass Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * 2 ** n         todo = [0] * 2 ** n         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 \n\nThe following is the result of testing the code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/36", "content": "\n\nNote: The input/output format and example test cases are provided as follows. The code must meet the input/output format and pass all test cases.\n \n\nInput/Output Format:\n\nThere are three methods in this problem:\n\nThe constructor method takes an integer array as input.\nThe sumCounts method takes no input and returns the sum of squares of distinct counts of all subarrays of nums.\nThe reset method resets nums to its original state and returns void.\nNote that the original state of nums is the array nums in the constructor method.\n\nExample 1:\n\nInput: [\"Solution\",\"sumCounts\",\"reset\",\"sumCounts\"]\n[[[1,2,3,2,1]],[],[],[]]\nOutput: [null,5,null,5]\nExplanation: Solution solution = new Solution([1,2,3,2,1]);\nsolution.sumCounts(); // return 5\n                      // The distinct counts of each subarray are:\n                      // [1, 2, 3, 2, 1]: 1, 2, 2, 2, 1\n                      // [1, 2, 3, 2, 1]: 1, 2, 3, 2, 1\n                      // [1, 2, 3, 2, 1]: 1, 2, 3, 2, 1\n                      // [1, 2, 3, 2, 1]: 1, 2, 2, 2, 1\n                      // [1, 2, 3, 2, 1]: 1, 2, 2, 2, 1\n                      // The sum of the squares of distinct counts is 1^2 + 2^2 + 2^2 + 2^2 + 1^2 = 5\nsolution.reset();\nsolution.sumCounts(); // return 5\nExplanation: The distinct counts of each subarray are the same as before.\n \n\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nAll the values of nums are unique.", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/37", "content": "\n", "groundtruth": " class Solution:     def sumCounts(self, nums: List[int]) -> int:         n = len(nums)         sum = [0] * (n * 4)         todo = [0] * (n * 4)         def do(o: int, l: int, r: int, add: int) -> None:             sum[o] += add * (r - l + 1)             todo[o] += add         # o=1  [l,r] 1<=l<=r<=n         # 把 [L,R] 加一，同时返回加一之前的区间和         def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:             if L <= l and r <= R:                 res = sum[o]                 do(o, l, r, 1)                 return res             m = (l + r) // 2             add = todo[o]             if add:                 do(o * 2, l, m, add)                 do(o * 2 + 1, m + 1, r, add)                 todo[o] = 0             res = 0             if L <= m: res += query_and_add1(o * 2, l, m, L, R)             if m < R: res += query_and_add1(o * 2 + 1, m + 1, r, L, R)             sum[o] = sum[o * 2] + sum[o * 2 + 1]             return res         ans = s = 0         last = {}         for i, x in enumerate(nums, 1):             j = last.get(x, 0)             s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j             ans += s             last[x] = i         return ans % 1_000_000_007 "}
{"task_id": "python/38", "content": "", "groundtruth": " class Solution:     def minChanges(self, s: str) -> int:         cnt = 0         for i in range(0, len(s), 2):             if len(set(s[i:i + 2])) > 1:                 cnt += 1                 print(s)         return cnt "}
{"task_id": "python/39", "content": "The length of nums is in the range [1, 1000].\nThe sum of all the elements in the given array does not exceed 104.\nThe target is in the range [-1000, 1000].\nThe length of the longest subsequence of nums is in the range [0, 1000].\n\n\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestConsecutive(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        \n        if root.left:\n            root.left.val = root.val + root.left.val\n        if root.right:\n            root.right.val = root.val + root.right.val\n        \n        return max(1 + self.longestConsecutive(root.left), 1 + self.longestConsecutive(root.right))\n\n\n\n\n\n\n\n", "groundtruth": " class Solution:     def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:         f = [0] + [-inf] * target         s = 0         for x in nums:             s = min(s + x, target)             for j in range(s, x - 1, -1):                 # f[j] = max(f[j], f[j - x] + 1)                 if f[j] < f[j - x] + 1:                     f[j] = f[j - x] + 1         return f[-1] if f[-1] > 0 else -1 "}
{"task_id": "python/40", "content": "\n\nInput Format\n\nThe first line contains three space-separated integers m, n, and fences, where m and n represent the height and width of the field respectively, and fences is the total number of horizontal and vertical fences.\nThe second line contains m space-separated integers hFences[i], denoting the x-coordinates of the horizontal fences.\nThe third line contains n space-separated integers vFences[i], denoting the y-coordinates of the vertical fences.\n\nOutput Format\n\nReturn the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\n\nSample Input 0\n\n5 4 2\n3 5\n1 2 4\nSample Output 0\n\n12\nExplanation 0\n\nThe field can be divided into 3 squares:\n\n\n\n\nThe maximum area of a square is 4 x 4 = 16, but we cannot make a square with side length 4. The only way to form a square field is to remove the vertical fence at y = 1.\n\nSample Input 1\n\n3 3 0\n1 2 3\n1 2 3\nSample Output 1\n\n9\nExplanation 1\n\nThe maximum area of a square is 3 x 3 = 9.\n\nSample Input 2\n\n2 2 0\n1 2\n1 2\nSample Output 2\n\n-1\nExplanation 2\n\nIt is impossible to make a square field because there is no way to form a square with side length 1.\n\nSample Input 3\n\n2 2 0\n1 2\n2 3\nSample Output 3\n\n-1\nExplanation 3\n\nIt is impossible to make a square field because there is no way to form a square with side length 1.\n\nSample Input 4\n\n1 1 0\n1\n1\nSample Output 4\n\n1\nExplanation 4\n\nThe maximum area of a square is 1 x 1 = 1.\n\n \n\nNote\n\n1 <= m, n <= 10000\n0 <= fences", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/41", "content": "", "groundtruth": " class Solution:     def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:         h = self.f(hFences, m)         v = self.f(vFences, n)         ans = max(h & v, default=0)         return ans ** 2 % 1_000_000_007 if ans else -1      def f(self, a: List[int], mx: int) -> Set[int]:         a.extend([1, mx])         a.sort()         return set(y - x for x, y in combinations(a, 2)) "}
{"task_id": "python/42", "content": "\nNote: inf represents an infinite cost.\n\nExample 1:\nInput: source = \"abc\", target = \"bcd\", original = [\"ab\",\"bc\",\"cd\"], changed = [\"bc\",\"cd\",\"bc\"], cost = [1,2,3]\nOutput: 4\nExplanation: The optimal way to convert source to target is:\n1. Change the first character 'a' to 'b' with a cost of 1.\n2. Change the second character 'b' to 'c' with a cost of 2.\n3. Change the third character 'c' to 'd' with a cost of 3.\nThe total cost is 1 + 2 + 3 = 6, which is the minimum cost.\n\nExample 2:\nInput: source = \"aaca\", target = \"caab\", original = [\"ab\",\"aa\",\"ca\",\"ba\"], changed = [\"ab\",\"aa\",\"ca\",\"ba\"], cost = [1,2,3,4]\nOutput: 2\nExplanation: The optimal way to convert source to target is:\n1. Change the second character 'a' to 'a' with a cost of 2.\n2. Change the third character 'c' to 'b' with a cost of 4.\nThe total cost is 2 + 4 = 6, which is the minimum cost.\n\nExample 3:\nInput: source = \"a\", target = \"aa\", original = [\"a\"], changed = [\"a\"], cost = [1]\nOutput: -1\nExplanation: It is impossible to convert source to target.\n \n\nConstraints:\n\nn == source.length == target.length\n1 <= n <= 10^5\nsource, target, original[i], and changed[i] consist of lowercase English letters.\noriginal and changed have the same length, and that length is n.\n1 <= original.length <= 10^5\n1 <= cost.length <= 10^5\n1 <= cost[i] <= 10^5\noriginal[i] != changed[i] for all i.\n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/43", "content": "\nclass Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = c         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 \nGive only the completed code. Do not output any additional information.", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)          for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/44", "content": "\n\n\nExample 1:\n\nInput: source = \"abc\", target = \"bcd\", original = [\"b\",\"c\"], changed = [\"c\",\"d\"], cost = [2,3]\nOutput: 4\nExplanation:\nOne possible way to convert source to target is:\n- Convert 'a' to 'c' with cost 2\n- Convert 'b' to 'd' with cost 3\nThe total cost is 2 + 3 = 5, which is the minimum.\nExample 2:\n\nInput: source = \"abc\", target = \"bcd\", original = [\"b\",\"c\"], changed = [\"c\",\"d\"], cost = [2,2]\nOutput: -1\nExplanation:\nIt can be shown that it is impossible to convert source to target.\n\n\nConstraints:\n\nn == source.length == target.length\n3 <= n <= 10^5\nsource, target, original[i], and changed[i] consist of lowercase English letters from 'a' to 'z'.\noriginal and changed are non-empty and have the same length.\noriginal and changed are unique.\n1 <= cost.length <= 10^5\n1 <= cost[i] <= 10^5\n\n'''\n\n\nclass Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(s) - ord('a')][ord(t) - ord('a')] for s, t in zip(source, target))", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         dis = [[inf] * 26 for _ in range(26)]         for i in range(26):             dis[i][i] = 0          for x, y, c in zip(original, changed, cost):             x = ord(x) - ord('a')             y = ord(y) - ord('a')             dis[x][y] = min(dis[x][y], c)         for k in range(26):             for i in range(26):                 for j in range(26):                     dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))         return ans if ans < inf else -1 "}
{"task_id": "python/45", "content": "", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                      continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/46", "content": "\nExample 1:\nInput: source = \"aba\", target = \"caa\", original = [\"aba\",\"a\",\"a\"], changed = [\"caa\",\"a\",\"a\"], cost = [2,1,2]\nOutput: 2\nExplanation:\nThe original string is \"aba\".\nThe target string is \"caa\".\nWe can convert the string \"aba\" to the string \"caa\" with cost 2.\nThere is no string that we can convert \"aba\" to with less than 2 cost.\nExample 2:\nInput: source = \"abc\", target = \"bcc\", original = [\"ab\",\"bc\"], changed = [\"ba\",\"bc\"], cost = [1,2]\nOutput: -1\nExplanation:\nThe original string is \"abc\".\nThe target string is \"bcc\".\nWe cannot convert the string \"abc\" to \"bcc\" at any cost.\n\n\nConstraints:\n\nn == source.length == target.length\n1 <= n <= 10^5\nsource, target, and original[i] consist of lowercase English letters.\nchanged[i] is a lowercase English letter.\n1 <= original.length <= changed.length <= 10\noriginal.length == changed.length\noriginal[i] != changed[i] for all i\n1 <= cost.length <= 10\n1 <= cost[i] <= 1000\n\n'''\n\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: float('inf')))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)\n            len_to_strs[len(y)].add(y)\n            dis[x][y] = c\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                   ", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/47", "content": "\n\n", "groundtruth": " class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         len_to_strs = defaultdict(set)         dis = defaultdict(lambda: defaultdict(lambda: inf))         for x, y, c in zip(original, changed, cost):             len_to_strs[len(x)].add(x)              len_to_strs[len(y)].add(y)             dis[x][y] = min(dis[x][y], c)             dis[x][x] = 0             dis[y][y] = 0         for strs in len_to_strs.values():             for k in strs:                 for i in strs:                     if dis[i][k] == inf:                       continue                     for j in strs:                         dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])          @cache         def dfs(i: int) -> int:             if i == 0:                 return 0             res = inf             if source[i - 1] == target[i - 1]:                 res = dfs(i - 1)              for size, strs in len_to_strs.items():                  if i < size:                     continue                 s = source[i - size: i]                 t = target[i - size: i]                 if s in strs and t in strs:                   res = min(res, dis[s][t] + dfs(i - size))             return res         ans = dfs(len(source))         return ans if ans < inf else -1 "}
{"task_id": "python/48", "content": "\n ", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/49", "content": "\n", "groundtruth": "\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1), (1, 1), (-1, 1), (-1, -1), (1, -1))\n\nclass neighborSum:\n    def __init__(self, grid: List[List[int]]):\n        n = len(grid)\n        s = [[0, 0] for _ in range(n * n)]\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                for k, (dx, dy) in enumerate(DIRS):\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n:\n                        s[v][k // 4] += grid[x][y]\n        self.s = s\n\n    def adjacentSum(self, value: int) -> int:\n        return self.s[value][0]\n\n    def diagonalSum(self, value: int) -> int:\n        return self.s[value][1]\n  "}
{"task_id": "python/50", "content": "\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            vis[0] = i\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if vis[v] != i:\n                        vis[v] = i\n                        q.append(v)\n            return vis[-1]\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        g = [[i + 1] for i in range(n - 1)]\n        vis = [-1] * (n - 1)\n\n        def bfs(i: int) -> int:\n            q = deque([0])\n            for step in count(1):\n                tmp = q\n                q = []\n                for x in tmp:\n                    for y in g[x]:\n                        if y == n - 1:\n                            return step\n                        if vis[y] != i:\n                            vis[y] = i\n                            q.append(y)\n            return -1\n\n        ans = [0] * len(queries)\n        for i, (l, r) in enumerate(queries):\n            g[l].append(r)\n            ans[i] = bfs(i)\n        return ans\n "}
{"task_id": "python/51", "content": "\nThe correct code is as follows:\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        def find(x: int) -> int:\n            if x != fa[x]:\n                fa[x] = find(fa[x])\n            return fa[x]\n        \n        def union(x: int, y: int) -> None:\n            fa[find(x)] = find(y)\n        \n        ans = []\n        for [ui, vi] in queries:\n            if find(ui) != find(vi):\n                union(ui, vi)\n            ans.append(len(set(find(i) for i in range(n - 1))))\n        return ans\n", "groundtruth": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        fa = list(range(n - 1))\n\n        # 非递归并查集\n        def find(x: int) -> int:\n            rt = x\n            while fa[rt] != rt:\n                rt = fa[rt]\n            while fa[x] != rt:\n                fa[x], x = rt, fa[x]\n            return rt\n\n        ans = []\n        cnt = n - 1  # 并查集连通块个数\n        for l, r in queries:\n            fr = find(r - 1)\n            i = find(l)\n            while i < r - 1:\n                cnt -= 1\n                fa[i] = fr\n                i = find(i + 1)\n            ans.append(cnt)\n        return ans\n "}
{"task_id": "python/52", "content": "\n \n\nNote:\n\n1 <= colors.length <= 1000\n0 <= colors[i] <= 1\n1 <= queries.length <= 1000\nqueries[i].length == 3\n1 <= queries[i][0] <= 2\n1 <= queries[i][1] <= n\n0 <= queries[i][2] <= 1\n", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/53", "content": "\nThe input is as follows:\nThe first line contains one integer n (2 ≤ n ≤ 1000000) — the number of tiles.\nThe second line contains n space-separated integers colors[i] (0 ≤ colors[i] ≤ 1) — the color of tile i (1-based).\nThe third line contains an integer m (1 ≤ m ≤ 1000000) — the number of queries.\nThe next m lines contain one query each. Each query is a pair of integers [type, parameter]. If type is 1, parameter represents the size of an alternating group; if type is 2, then parameter represents the index of the tile to be changed and the new color of this tile (index — 1-based, color — 0 or 1).\nThe output is as follows:\nThe first line contains m space-separated integers answer[i] — the result of the ith query of the first type. The results are written in the same order as in the input.\n\nThe input format is as follows:\n\nn\ncolors[1] colors[2] … colors[n]\nm\ntype_1 parameter_1\ntype_2 index_2 color_2\n…\ntype_m index_m color_m\n\nThe output format is as follows:\n\nanswer_1\nanswer_2\n…\nanswer_m\n\nNote: The first tile is considered to be adjacent to the last tile.\n\nThe time limit is 2 seconds. The memory limit is 512 MB.\n\nInput\n\nCopy\n\n3\n0 1 1\n3\n1 2\n2 2 1\n1 1\n\nOutput\n\nCopy\n\n2\n0\n\nNote: The example shows that there are 2 alternating groups of size 2 and 1 alternating group of size 1. The first alternating group consists of the first and the second tiles, and the second alternating group consists of the third tile.\n\nInput\n\nCopy\n\n5\n0 1 1 1 1\n2\n1 3\n2 3 0\n\nOutput\n\nCopy\n\n2\n1\n\nNote: There are 2 alternating groups of size 3 and 1 alternating", "groundtruth": "\nfrom sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n: int):\n        self.t = [[0, 0] for _ in range(n + 1)]\n\n    # op=1，添加一个 size\n    # op=-1，移除一个 size\n    def update(self, size: int, op: int) -> None:\n        i = len(self.t) - size\n        while i < len(self.t):\n            self.t[i][0] += op\n            self.t[i][1] += op * size\n            i += i & -i\n\n    # 返回 >= size 的元素个数，元素和\n    def query(self, size: int) -> (int, int):\n        cnt = s = 0\n        i = len(self.t) - size\n        while i > 0:\n            cnt += self.t[i][0]\n            s += self.t[i][1]\n            i &= i - 1\n        return cnt, s\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(a)\n        sl = SortedList()\n        t = FenwickTree(n)\n\n        # op=1，添加一个结束位置 i\n        # op=-1，移除一个结束位置 i\n        def update(i: int, op: int) -> None:\n            idx = sl.bisect_left(i)\n            pre = sl[idx - 1]\n            nxt = sl[idx % len(sl)]\n\n            t.update((nxt - pre - 1) % n + 1, -op)  # 移除/添加旧长度\n            t.update((i - pre) % n, op)\n            t.update((nxt - i) % n, op)  # 添加/移除新长度\n\n        # 添加一个结束位置 i\n        def add(i: int) -> None:\n            if not sl:\n                t.update(n, 1)\n            else:\n                update(i, 1)\n            sl.add(i)\n\n        # 移除一个结束位置 i\n        def remove(i: int) -> None:\n            sl.remove(i)\n            if not sl:\n                t.update(n, -1)\n            else:\n                update(i, -1)\n\n        for i, c in enumerate(a):\n            if c == a[(i + 1) % n]:\n                add(i)  # i 是一个结束位置\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                if not sl:\n                    ans.append(n)  # 每个长为 size 的子数组都符合要求\n                else:\n                    cnt, s = t.query(q[1])\n                    ans.append(s - cnt * (q[1] - 1))\n            else:\n                i, c = q[1], q[2]\n                if a[i] == c:  # 无影响\n                    continue\n                pre, nxt = (i - 1) % n, (i + 1) % n\n                # 修改前，先去掉结束位置\n                if a[pre] == a[i]:\n                    remove(pre)\n                if a[i] == a[nxt]:\n                    remove(i)\n                a[i] = c\n                # 修改后，添加新的结束位置\n                if a[pre] == a[i]:\n                    add(pre)\n                if a[i] == a[nxt]:\n                    add(i)\n        return ans\n "}
{"task_id": "python/54", "content": "\nConstraints:\n\n2 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nThe sum of all elements in nums will not exceed 1000.\n\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: false\nExplanation: The sum of all elements in nums is 6, which is not strictly greater than 6. Hence, Alice cannot win this game.\n\nExample 2:\n\nInput: nums = [1,2,3,-1,-2,-3,3]\nOutput: true\nExplanation: Alice can choose the subarray [3,-1,-2,-3] and the sum of the subarray is 3 + (-1) + (-2) + (-3) = 3.\nThe sum of the subarray is strictly greater than the sum of the remaining elements of nums, which is 3.\n\nExample 3:\n\nInput: nums = [1,2,3,6]\nOutput: true\nExplanation: Alice can choose the subarray [1,2,3] and the sum of the subarray is 1 + 2 + 3 = 6.\nThe sum of the subarray is strictly greater than the sum of the remaining elements of nums, which is 6.\n\nExample 4:\n\nInput: nums = [1,2,3,5,6]\nOutput: false\nExplanation: Any subarray of nums will result in a sum of at least 9, which is not strictly greater than 1 + 2 + 3 + 5 + 6 = 18.\nThus, Alice cannot win this game.", "groundtruth": "\nclass Solution:\n    def canAliceWin(self, nums: List[int]) -> bool:\n        single=0\ndouble=0\nfor it in nums:\nif it>=10: \ndouble=double+it \nelse:\nsingle=single+it  \n        \nreturn single !=double\n "}
{"task_id": "python/55", "content": "The following is the completed code:\n\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        cnt = 0\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == \"1\":\n                    cnt += 1\n                else:\n                    cnt += 1\n        return cnt\n\n", "groundtruth": "\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # 哨兵\n        ans = i = 0  # >= left 的第一个 0 的下标是 a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # 不含 0 的子串个数\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # 可以改成手动比大小，那样更快\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # 这个 0 后面不会再枚举到了\n        return ans\n    "}
{"task_id": "python/56", "content": "\n### Problem 2\n\nThe following code is incomplete. The description is as follows:\nWrite a Python program that accept a sequence of comma-separated numbers as a string from the user and calculate the sum of the numbers. Suppose the string is in the format:\n\nnum1,num2,num3,...\n\nwhere num1, num2, num3, ... are integers.\n\nThe incomplete code is as follows:\n\ndef calculate_sum(numbers):\n    # 将输入字符串拆分成一个列表\n    numbers_list = numbers.split(',')\n    # 计算总和\n    sum = 0\n    for num in numbers_list:\n        sum += int(num)\n    return sum\n\nThe incomplete code is as follows:\n\ndef calculate_sum(numbers):\n    # 将输入字符串拆分成一个列表\n    numbers_list = numbers.split(',')\n    # 计算总和\n    sum = 0\n    for num in numbers_list:\n        sum += int(num)\n    return sum\n\nThe expected output of the program is the sum of the input numbers. Suppose the input string is '1,2,3,4,5', the expected output is 15.\n\nPlease fill in the following incomplete code according to the description. The description is as follows:\nWrite a Python program that accept a sequence of comma-separated numbers as a string from the user and calculate the sum of the numbers. Suppose the string is in the format:\n\nnum1,num2,num3,...\n\nwhere num1, num2, num3, ... are integers.\n\nThe incomplete code is as follows:\n\ndef calculate_sum(numbers):\n    # 将输入字符串拆分成一个列表\n    numbers_list = numbers.split(',')\n    # 计算总和\n    sum = 0\n    for num in numbers_list:\n        sum += int(num)\n    return sum\n\nGive only the completed code. Do not output any additional information.\n\n### Problem 3\n\nThe following code is incomplete. The description is as follows:\nYou are given two lists of strings: list", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/57", "content": "\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            if i < 0 or i >= len(circles):\n                return False\n            if vis[i]:\n                return False\n            vis[i] = True\n            x, y, r = circles[i]\n            return (x == 0 and y == 0) or (x == X and y == Y) or dfs(i - 1) or dfs(i + 1) or dfs(i - X) or dfs(i + X) or dfs(i - Y) or dfs(i + Y) or any(in_circle(ox, oy, r, x, y) for ox, oy in [(0, 0), (X, 0), (0, Y), (X, Y)])\n        return dfs(len(circles) // 2)\n\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            if i < 0 or i >= len(circles):\n                return False\n           ", "groundtruth": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 判断点 (x,y) 是否在圆 (ox,oy,r) 内\n        def in_circle(ox: int, oy: int, r: int, x: int, y: int) -> bool:\n            return (ox - x) * (ox - x) + (oy - y) * (oy - y) <= r * r\n\n        vis = [False] * len(circles)\n        def dfs(i: int) -> bool:\n            x1, y1, r1 = circles[i]\n            # 圆 i 是否与矩形右边界/下边界相交相切\n            if y1 <= Y and abs(x1 - X) <= r1 or \\\n               x1 <= X and y1 <= r1 or \\\n               x1 > X and in_circle(x1, y1, r1, X, 0):\n                return True\n            vis[i] = True\n            for j, (x2, y2, r2) in enumerate(circles):\n                # 在两圆相交相切的前提下，点 A 是否严格在矩形内\n                if not vis[j] and \\\n                   (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2) and \\\n                   x1 * r2 + x2 * r1 < (r1 + r2) * X and \\\n                   y1 * r2 + y2 * r1 < (r1 + r2) * Y and \\\n                   dfs(j):\n                    return True\n            return False\n\n        for i, (x, y, r) in enumerate(circles):\n            # 圆 i 包含矩形左下角 or\n            # 圆 i 包含矩形右上角 or\n            # 圆 i 与矩形上边界/左边界相交相切\n            if in_circle(x, y, r, 0, 0) or \\\n               in_circle(x, y, r, X, Y) or \\\n               not vis[i] and (x <= X and abs(y - Y) <= r or\n                               y <= Y and x <= r or\n                               y > Y and in_circle(x, y, r, 0, Y)) and dfs(i):\n                return False\n        return True\n "}
{"task_id": "python/58", "content": "\nNote: The given graph is guaranteed to be a DAG.\n\nExample 1:\n\nInput: n = 2, edges = [[0,1]]\nOutput: 0\nExplanation: The winner is team 0 because there is no team that is stronger than them.\nExample 2:\n\nInput: n = 3, edges = [[0,1],[1,2],[2,0]]\nOutput: 0\nExplanation: The winner is team 0 because there is no team that is stronger than them.\nExample 3:\n\nInput: n = 3, edges = [[0,1],[1,2],[2,0],[1,1]]\nOutput: -1\nExplanation: Teams 0, 1, and 2 all have a strength of 1. There is no winner in this case.\nExample 4:\n\nInput: n = 6, edges = [[0,1],[1,2],[3,4],[4,5],[5,3]]\nOutput: 3\nExplanation: The teams are shown below:\n0 -- 1 -- 2\n|    |    |\n3 -- 4 -- 5\nTeam 3 is the winner because they have a stronger overall strength than the other teams.\n\nConstraints:\n\n2 <= n <= 100\n1 <= m <= n * (n - 1) / 2\nedges[i].length == 2\n0 <= ui, vi <= n - 1\nui != vi\nThere are no duplicate edges.\n\nHint #1  \nIf we have a team with no outgoing edges, it must be the champion.\n\nHint #2  \nWe need to find a team with no incoming edges.\n\nHint #3  \nWe need to find a team with no incoming edges.\n\nHint #4  \nWe can do a depth-first search from each team to see if it is the champion.\n\nHint #5  \nWe can do a depth-first search from each team to see if it is the champion.\n\nHint #6  \nWe can do a depth-first search from each team to see if it is the champion.\n\nHint #7  \nWe can do a depth-first search from each team to see if it is the champion.\n\nHint #", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/59", "content": "\n# 题意\n给你一个图，图中有n个节点，节点i和i+1是连接的。求出一个节点，该节点能赢过所有的其他节点。如果不存在这样的节点，返回-1。\n\n# 分析\n这道题的关键是在于寻找有多少个节点不存在入度。因为一个有入度的节点，可以被其他节点赢，也就是说有入度的节点不是唯一的赢家。所以我们要找有多少个节点不存在入度，如果有多于一个不存在入度的节点，那么就不存在唯一的赢家。如果只有一个不存在入度的节点，那么它就是唯一的赢家。\n\n# code\n\n    class Solution:\n        def findChampion(self, n: int, edges: List[List[int]]) -> int:\n            graph = [[] for _ in range(n)]\n            for i, j in edges:\n                graph[i].append(j)\n            in_degree = [0] * n\n            for i in range(n):\n                for j in graph[i]:\n                    in_degree[j] += 1\n            res = -1\n            for i in range(n):\n                if in_degree[i] == 0:\n                    if res != -1:\n                        return -1\n                    res = i\n            return res\n", "groundtruth": "class Solution:\n    def findChampion(self, n: int, edges: List[List[int]]) -> int:\n        \n        graph = [[] for _ in range(n)]\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n        for i in range(n):\n            \n            visited = [False] * n\n            count = self.dfs(graph, i, visited)\n            \n            if count == n:\n                return i\n        return -1\n\n    def dfs(self, graph: List[List[int]], start: int, visited: List[bool]):\n        count = 1\n        visited[start] = True\n        next_nodes = graph[start]\n        for next_node in next_nodes:\n            if not visited[next_node]:\n                count += self.dfs(graph, next_node, visited)\n        return count\n"}
{"task_id": "python/60", "content": "The correctness of the code will be verified by testing the following code.\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_case0(self):\n        edges = [[0, 1], [0, 2], [1, 3], [1, 4], [3, 5], [4, 6]]\n        nums = [1, 2, 3, 4, 5, 6, 7]\n        self.assertEqual(13, Solution().maximumScoreAfterOperations(edges, nums))\n\n    def test_case1(self):\n        edges = [[0, 1], [1, 2], [2, 3], [2, 4], [5, 6], [5, 7]]\n        nums = [1, 2, 3, 4, 5, 6, 7]\n        self.assertEqual(28, Solution().maximumScoreAfterOperations(edges, nums))\n\n    def test_case2(self):\n        edges = [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [5, 6]]\n        nums = [1, 2, 3, 4, 5, 6, 7]\n        self.assertEqual(25, Solution().maximumScoreAfterOperations(edges, nums))\n\n    def test_case3(self):\n        edges = [[0, 1], [1, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [4, 8], [5, 9], [6, 10], [7, 11], [8, 12], [9, 13], [10, 14], [11, 15], [12, 16], [13, 17], [14, 18], [15, 19], [16, 20], [17, 21], [18, 22], [19, 2", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/61", "content": "\nThe given code is a python class. Please fill in the blank with appropriate code to make it run.\n\nExample 1:\nInput: edges = [[0,1],[0,2]], values = [1,100,1000]\nOutput: 100\n\nExample 2:\nInput: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]], values = [1,100,1000,100000,100000,100000]\nOutput: 200\n\nSolution:\n\nclass Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        parent = [0] * n\n        for edge in edges:\n            u, v = edge\n            parent[v] = u\n        def dfs(u, p = -1):\n            s = [0, 0]\n            for v in range(n):\n                if parent[v] == u:\n                    t = dfs(v, u)\n                    s[0] += max(t[0], t[1])\n                    s[1] += min(t[0], t[1])\n            s[0] += nums[u]\n            s[1] += nums[u]\n            return s\n        return dfs(0)[1]\n\n\n", "groundtruth": "class Solution:\n    def maximumScoreAfterOperations(self, edges: List[List[int]], nums: List[int]) -> int:\n        n = len(nums)\n        path = [[] for _ in range(n)]\n        for u, v in edges:\n            path[u].append(v)\n            path[v].append(u)\n        \n        def dfs(u, p = -1):\n            dp0, dp1 = 0, 0\n            f = 0\n            for v in path[u]:\n                if v != p:\n                    v0, v1 = dfs(v, u)\n                    dp0 += v0\n                    dp1 += v1\n                    f = 1\n            if not f: return nums[u], 0\n            return dp0 + nums[u], max(dp1 + nums[u], dp0)\n            \n        return dfs(0)[1]\n"}
{"task_id": "python/62", "content": "", "groundtruth": "class Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        b = sorted(set(x - i for i, x in enumerate(nums)))  \n        t = BIT(len(b) + 1)\n        for i, x in enumerate(nums):\n            j = bisect_left(b, x - i) + 1 \n            f = max(t.pre_max(j), 0) + x\n            t.update(j, f)\n        return t.pre_max(len(b))\n\nclass BIT:\n    def __init__(self, n: int):\n        self.tree = [-inf] * n\n\n    def update(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] = max(self.tree[i], val)\n            i += i & -i\n\n    def pre_max(self, i: int) -> int:\n        mx = -inf\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i &= i - 1\n        return mx\n"}
{"task_id": "python/63", "content": "", "groundtruth": "class Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(max(nums).bit_length()):\n            cnt1 = sum(x >> i & 1 for x in nums)\n            if cnt1 >= k:\n                ans |= 1 << i\n        return ans\n"}
{"task_id": "python/64", "content": "", "groundtruth": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero1 = sum(1 for num in nums1 if num == 0)\n        zero2 = sum(1 for num in nums2 if num == 0)\n\n        if zero1 == 0 and zero2 == 0: return sum1 if sum1 == sum2 else -1\n\n        if zero1 == 0:\n            if sum1 < sum2 + zero2: return -1\n            else: return sum1\n\n        if zero2 == 0:\n            if sum1 + zero1 > sum2: return -1\n            else: return sum2\n\n        if sum1 + zero1 < sum2 + zero2: return sum2 + zero2\n        return sum1 + zero1\n\n"}
{"task_id": "python/65", "content": "\nConstraints\n\n    n == nums.length\n    1 <= n <= 10^5\n    1 <= nums[i] <= 10^5\n    1 <= k <= 10^5\n\nExample 1\n\nInput\n\nnums = [1, 1, 2, 3, 4, 5]\nk = 3\n\nOutput\n\n5\n\nExplanation\n\nAfter 3 increments, the array becomes [4, 4, 5, 6, 7, 8].\nAfter 2 more increments, the array becomes [5, 5, 6, 7, 8, 9].\nAfter 1 more increment, the array becomes [6, 6, 7, 8, 9, 10].\nThe array is beautiful, and it can be verified that there are at least 5 ways to achieve this.\n\nExample 2\n\nInput\n\nnums = [1, 2, 3]\nk = 2\n\nOutput\n\n0\n\nExplanation\n\nThe array [1, 2, 3] is already beautiful, so there are 0 increment operations needed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "class Solution:\n    def minIncrementOperations(self, nums: List[int], k: int) -> int:\n        dp1 = dp2 = dp3 = 0\n        for num in nums:\n            dp1, dp2, dp3 = min(dp1, dp2, dp3) + max(0, k - num), dp1, dp2\n        return min(dp1, dp2, dp3)\n"}
{"task_id": "python/66", "content": "\n\nclass Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            coins[i] -= k\n            if coins[i] <= 0:\n                coins[i] = -coins[i]\n                ans += coins[i]\n            else:\n                ans += coins[i] // 2\n                coins[i] //= 2\n            if j:\n                coins[j] //= 2\n            for x in g[i]:\n                if x != fa:\n                    ans += dfs(x, i, i)\n            return ans\n\n        return dfs(0, 0, -1)", "groundtruth": "class Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        g = [[] for _ in coins]\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n\n        @cache\n        def dfs(i: int, j: int, fa: int) -> int:\n            res1 = (coins[i] >> j) - k\n            res2 = coins[i] >> (j + 1)\n            for ch in g[i]:\n                if ch != fa:\n                    res1 += dfs(ch, j, i) \n                    if j < 13: \n                        res2 += dfs(ch, j + 1, i)  \n            return max(res1, res2)\n        return dfs(0, 0, -1)\n"}
{"task_id": "python/67", "content": "\n \n\nExample 1:\n\nInput: nums = [1,2,3,2,1,3]\nOutput: 15\nExplanation:\nThe distinct count of each subarray is:\n[1] = 1\n[1,2] = 2\n[1,2,3] = 3\n[2] = 2\n[2,3] = 3\n[3] = 1\n[2,3,2] = 2\n[2,3,2,1] = 3\n[3,2,1] = 2\n[3,2,1,3] = 3\nThe sum of these values is 15.\n\nExample 2:\n\nInput: nums = [1,2,3,2,1]\nOutput: 9\n\n \n\nConstraints:\n\n    1 <= nums.length <= 105\n    1 <= nums[i] <= 100\n\nAccepted\n66,253\nSubmissions\n150,484\n\n\n\n# 方法一：前缀和+哈希表\n\n```python\nclass Solution:\n    def sumOfDistancesInTree(self, N: int, edges: List[List[int]]) -> List[int]:\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        ans = [0] * (N + 1)\n        # 使用哈希表储存每个结点的前缀和\n        prefix_sum = {0: 0}\n        for i in range(1, N + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + 1\n            for j in graph[i]:\n                prefix_sum[j] = prefix_sum[i] + prefix_sum[j]\n            ans[i] = prefix_sum[i]\n        return ans\n```\n\n\n```python\nclass Solution:\n    def sumOfDistancesInTree(self, N: int, edges: List[List[int]])", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/68", "content": "", "groundtruth": "\nclass Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum = [0] * (n * 4)\n        todo = [0] * (n * 4)\n\n        def do(o: int, l: int, r: int, add: int) -> None:\n            sum[o] += add * (r - l + 1)\n            todo[o] += add\n\n        # o=1  [l,r] 1<=l<=r<=n\n        # 把 [L,R] 加一，同时返回加一之前的区间和\n        def query_and_add1(o: int, l: int, r: int, L: int, R: int) -> int:\n            if L <= l and r <= R:\n                res = sum[o]\n                do(o, l, r, 1)\n                return res\n\n            m = (l + r) // 2\n            add = todo[o]\n            if add:\n                do(o * 2, l, m, add)\n                do(o * 2 + 1, m + 1, r, add)\n                todo[o] = 0\n\n            res = 0\n            if L <= m: res += query_and_add1(o * 2, l, m, L, R)\n            if m < R:  res += query_and_add1(o * 2 + 1, m + 1, r, L, R)\n            sum[o] = sum[o * 2] + sum[o * 2 + 1]\n            return res\n\n        ans = s = 0\n        last = {}\n        for i, x in enumerate(nums, 1):\n            j = last.get(x, 0)\n            s += query_and_add1(1, 1, n, j + 1, i) * 2 + i - j\n            ans += s\n            last[x] = i\n        return ans % 1_000_000_007\n"}
{"task_id": "python/69", "content": "", "groundtruth": "\nclass Solution:\n    def minChanges(self, s: str) -> int:\n        cnt = 0\n        for i in range(0, len(s), 2):\n            if len(set(s[i:i + 2])) > 1:\n                cnt += 1\n                \n        print(s)\n        return cnt\n"}
{"task_id": "python/70", "content": "\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\n1 <= target <= 1000\n\nExample 1:\n\nInput: nums = [1,2,3,4,5], target = 5\nOutput: 3\nExplanation: The subsequence of nums that sums up to target is [1,2,3].\n\nExample 2:\n\nInput: nums = [1,2,3,4,5], target = 2\nOutput: 1\nExplanation: The subsequence of nums that sums up to target is [1].\n\nExample 3:\n\nInput: nums = [1,2,3,4,5], target = 7\nOutput: 0\nExplanation: There is no subsequence of nums that sums up to target.\n\nExample 4:\n\nInput: nums = [1,2,3,4,5], target = 1\nOutput: 1\nExplanation: The subsequence of nums that sums up to target is [1].\n\nExample 5:\n\nInput: nums = [1,2,3,4,5], target = 3\nOutput: 2\nExplanation: The subsequence of nums that sums up to target is [1,2].", "groundtruth": "\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        s = 0\n        for x in nums:\n            s = min(s + x, target)\n            for j in range(s, x - 1, -1):\n                # f[j] = max(f[j], f[j - x] + 1)\n                if f[j] < f[j - x] + 1:\n                    f[j] = f[j - x] + 1\n        return f[-1] if f[-1] > 0 else -1\n"}
{"task_id": "python/71", "content": "", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/72", "content": "\n\n", "groundtruth": "\nclass Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        h = self.f(hFences, m)\n        v = self.f(vFences, n)\n        ans = max(h & v, default=0)\n        return ans ** 2 % 1_000_000_007 if ans else -1\n\n    def f(self, a: List[int], mx: int) -> Set[int]:\n        a.extend([1, mx])\n        a.sort()\n        return set(y - x for x, y in combinations(a, 2))\n"}
{"task_id": "python/73", "content": "\nExample 1:\n\nInput: source = \"abc\", target = \"bcd\", original = [\"ab\",\"bc\",\"cd\"], changed = [\"bc\",\"cd\",\"ab\"], cost = [1,2,3]\nOutput: 4\nExplanation: The minimum cost to convert source to target is 4. One way to convert source to target is:\n1. Change 'a' to 'b' in the first position.\n2. Change 'b' to 'c' in the second position.\n3. Change 'c' to 'd' in the third position.\nThe cost of the operations is:\ncost[0] + cost[1] + cost[2] = 1 + 2 + 3 = 6\nTherefore, 4 is the minimum cost.\n\nExample 2:\n\nInput: source = \"aab\", target = \"bbc\", original = [\"aa\",\"bb\",\"bc\"], changed = [\"ba\",\"ab\",\"bc\"], cost = [1,2,3]\nOutput: 5\nExplanation: The minimum cost to convert source to target is 5. One way to convert source to target is:\n1. Change 'a' to 'b' in the first position.\n2. Change 'a' to 'b' in the second position.\n3. Change 'b' to 'c' in the third position.\nThe cost of the operations is:\ncost[0] + cost[1] + cost[2] = 1 + 2 + 3 = 6\nTherefore, 5 is the minimum cost.\n\nConstraints:\n\nn == source.length == target.length\n1 <= n <= 105\nsource, target, original[i], and changed[i] consist of lowercase English letters.\noriginal and changed do not contain any duplicate elements each.\ncost.length == 1000\n1 <= cost[i] <= 1000\n", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        dis = [[inf] * 26 for _ in range(26)]\n        for i in range(26):\n            dis[i][i] = 0\n\n        for x, y, c in zip(original, changed, cost):\n            x = ord(x) - ord('a')\n            y = ord(y) - ord('a')\n            dis[x][y] = min(dis[x][y], c)\n\n        for k in range(26):\n            for i in range(26):\n                for j in range(26):\n                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        ans = sum(dis[ord(x) - ord('a')][ord(y) - ord('a')] for x, y in zip(source, target))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/74", "content": "\nThe sample test case is as follows:\n\nsource = \"abc\"\ntarget = \"bcd\"\noriginal = [\"abc\",\"bcd\"]\nchanged = [\"bcd\",\"cde\"]\ncost = [1,2]\n\nThe correct answer is:\n\n3\n\nThe first 3 characters of the string source \"abc\" are \"a\", \"b\", and \"c\". The first 3 characters of the string target \"bcd\" are \"b\", \"c\", and \"d\". In the first operation, the substring \"abc\" is picked from the string source, and the substring \"bcd\" is picked from the string target. The substring \"abc\" is changed to \"bcd\" at a cost of 1. The substring \"bcd\" is changed to \"cde\" at a cost of 2. The substring \"bcd\" is changed to \"cde\" at a cost of 2.\n\nThe second 3 characters of the string source \"abc\" are \"b\", \"c\", and \"d\". The second 3 characters of the string target \"bcd\" are \"b\", \"c\", and \"d\". In the second operation, the substring \"abc\" is picked from the string source, and the substring \"bcd\" is picked from the string target. The substring \"abc\" is changed to \"bcd\" at a cost of 1. The substring \"bcd\" is changed to \"cde\" at a cost of 2. The substring \"bcd\" is changed to \"cde\" at a cost of 2.\n\nThus, the minimum cost to convert the string source to the string target using any number of operations is 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "python/75", "content": "", "groundtruth": "\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        len_to_strs = defaultdict(set)\n        dis = defaultdict(lambda: defaultdict(lambda: inf))\n        for x, y, c in zip(original, changed, cost):\n            len_to_strs[len(x)].add(x)  \n            len_to_strs[len(y)].add(y)\n            dis[x][y] = min(dis[x][y], c)\n            dis[x][x] = 0\n            dis[y][y] = 0\n\n        for strs in len_to_strs.values():\n            for k in strs:\n                for i in strs:\n                    if dis[i][k] == inf:  \n                        continue\n                    for j in strs:\n                        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n        @cache\n        def dfs(i: int) -> int:\n            if i == 0:\n                return 0\n            res = inf\n            if source[i - 1] == target[i - 1]:\n                res = dfs(i - 1) \n            for size, strs in len_to_strs.items():  \n                if i < size:\n                    continue\n                s = source[i - size: i]\n                t = target[i - size: i]\n                if s in strs and t in strs:  \n                    res = min(res, dis[s][t] + dfs(i - size))\n            return res\n        ans = dfs(len(source))\n        return ans if ans < inf else -1\n"}
{"task_id": "cpp/0", "content": "", "groundtruth": "class Solution {public:static const int mod = 1e9 + 7;int specialPerm(vector<int>& nums) {int n = nums.size();vector<vector<int>> f(1 << n, vector<int>(n, -1));function<int(int, int)> dfs = [&](int state, int i) {if (f[state][i] != -1) {return f[state][i];}if (state == (1 << i)) {return 1;}f[state][i] = 0;for (int j = 0; j < n; j++) {if (i == j || !(state >> j & 1)) {continue;}if (nums[i] % nums[j] != 0 && nums[j] % nums[i] != 0) {continue;}f[state][i] = (f[state][i] + dfs(state ^ (1 << i), j)) % mod;}return f[state][i];};int res = 0;for (int i = 0; i < n; i++) {res = (res + dfs((1 << n) - 1, i)) % mod;}return res;}};"}
{"task_id": "cpp/1", "content": "\nThe given incomplete code is written in C++.\n\n#include <algorithm>\n#include <climits>\n#include <vector>\nusing namespace std;\nclass Solution {\npublic:\n    int paintWalls(vector<int>& cost, vector<int>& time) {\n        int n = cost.size();\n        vector<int> f(n * 2 + 1, INT_MAX / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            vector<int> g(n * 2 + 1, INT_MAX / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                // 付费____// 免费\n                if (j > 0) {\n                    g[j - 1] = min(g[j - 1], f[j]);\n                }\n            }\n            f = move(g);\n        }\n        return *min_element(f.begin() + n, f.end());\n    }\n};", "groundtruth": "class Solution {public:int paintWalls(vector<int>& cost, vector<int>& time) {int n = cost.size();vector<int> f(n * 2 + 1, INT_MAX / 2);f[n] = 0;for (int i = 0; i < n; ++i) {vector<int> g(n * 2 + 1, INT_MAX / 2);for (int j = 0; j <= n * 2; ++j) {// 付费g[min(j + time[i], n * 2)] = min(g[min(j + time[i], n * 2)], f[j] + cost[i]);// 免费if (j > 0) {g[j - 1] = min(g[j - 1], f[j]);}}f = move(g);}return *min_element(f.begin() + n, f.end());}};"}
{"task_id": "cpp/2", "content": "Note: The string will only contain lowercase English letters.\n", "groundtruth": "class Solution {public:string smallestString(string s) {char target = 'a';auto it = std::find_if(s.begin(), s.end(), [target](char c) {return c != target;});int indexOfFirstNonA = std::distance(s.begin(), it);if (indexOfFirstNonA == s.length()) {return s.substr(0, s.length() - 1) + 'z';}size_t indexOfFirstA_AfterFirstNonA = s.find('a', indexOfFirstNonA);if (indexOfFirstA_AfterFirstNonA == string::npos) {indexOfFirstA_AfterFirstNonA = s.length();}string res;for (int i = 0; i < s.length(); ++i) {if (indexOfFirstNonA <= i && i < indexOfFirstA_AfterFirstNonA) {res.push_back(static_cast<char>(s[i] - 1));} else {res.push_back(s[i]);}}return res;}};"}
{"task_id": "cpp/3", "content": "The code should return the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\n", "groundtruth": "class Solution {public:long long minCost(vector<int>& nums, int x) {int n = nums.size();vector<int> f(nums);long long ans = accumulate(f.begin(), f.end(), 0LL);for (int k = 1; k < n; ++k) {for (int i = 0; i < n; ++i) {f[i] = min(f[i], nums[(i + k) % n]);}ans = min(ans, static_cast<long long>(k) * x + accumulate(f.begin(), f.end(), 0LL));}return ans;}};"}
{"task_id": "cpp/4", "content": "\nConstraints\n\nn == nums1.length == nums2.length\n1 <= n <= 105\n1 <= nums1[i], nums2[i] <= 105\n1 <= xi, yi <= 105\n1 <= queries.length <= 105\nqueries[i].length == 2\nxi <= yi\n\nExample 1\nInput\nnums1 = [5, 4, 3, 2, 1]\nnums2 = [6, 5, 4, 3, 2]\nqueries = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5]]\nOutput\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]\nExplanation\n[1, 1] has a maximum value of 2 = 5 + 1.\n[2, 1] has a maximum value of 4 = 5 + 2.\n[3, 1] has a maximum value of 6 = 5 + 3.\n[4, 1] has a maximum value of 8 = 5 + 4.\n[5, 1] has a maximum value of 10 = 5 + 5.\n[1, 2] has a maximum value of 12 = 6 + 6.\n[2, 2]", "groundtruth": "class Solution {public:vector<int> maximumSumQueries(vector<int>& nums1, vector<int>& nums2, vector<vector<int>>& queries) {vector<pair<int, int>> sortedNums;vector<tuple<int, int, int>> sortedQueries;for (int i = 0; i < nums1.size(); i++) {sortedNums.emplace_back(nums1[i], nums2[i]);}sort(sortedNums.begin(), sortedNums.end(), greater<pair<int, int>>());for (int i = 0; i < queries.size(); i++) {sortedQueries.emplace_back(i, queries[i][0], queries[i][1]);}sort(sortedQueries.begin(), sortedQueries.end(), [](tuple<int, int, int> &a, tuple<int, int, int> &b) {return get<1>(a) > get<1>(b);});vector<pair<int, int>> stk;vector<int> answer(queries.size(), -1);int j = 0;for (auto &[i, x, y] : sortedQueries) {while (j < sortedNums.size() && sortedNums[j].first >= x) {auto [num1, num2] = sortedNums[j];while (!stk.empty() && stk.back().second <= num1 + num2) {stk.pop_back();}if (stk.empty() || stk.back().first < num2) {stk.emplace_back(num2, num1 + num2);}j++;}int k = lower_bound(stk.begin(), stk.end(), make_pair(y, 0)) - stk.begin();if (k < stk.size()) {answer[i] = stk[k].second;}}return answer;}};"}
{"task_id": "cpp/5", "content": "\n\nExample 1:\nInput:s = \"0010\"\nOutput:4\nExplanation:\"0010\" is semi-repetitive because there is only one adjacent pair of the same digit '0'.\nExample 2:\nInput:s = \"002020\"\nOutput:6\nExplanation:\"002020\" is semi-repetitive because there is only one adjacent pair of the same digit '0'.\nExample 3:\nInput:s = \"0123\"\nOutput:4\nExplanation:\"0123\" is semi-repetitive because there is only one adjacent pair of the same digit '0'.\nExample 4:\nInput:s = \"2002\"\nOutput:4\nExplanation:\"2002\" is semi-repetitive because there is only one adjacent pair of the same digit '0'.\nExample 5:\nInput:s = \"54944\"\nOutput:4\nExplanation:\"54944\" is semi-repetitive because there is only one adjacent pair of the same digit '4'.\n \n\nNote:\n\nThe length of s will be in the range [1, 1000].\ns will consist of digits from 0 to 9 only.", "groundtruth": "class Solution {public:int longestSemiRepetitiveSubstring(string s) {int ans = 1, left = 0, same = 0, n = s.length();for (int right = 1; right < n; right++) {if (s[right] == s[right - 1] && ++same > 1) {for (left++; s[left] != s[left - 1]; left++);same = 1;}ans = max(ans, right - left + 1);}return ans;}};"}
{"task_id": "cpp/6", "content": "\n", "groundtruth": "class Solution {public:static constexpr int mod = 1e9 + 7;int sumDistance(vector<int>& nums, string s, int d) {int n = nums.size();vector<long long> pos(n);for (int i = 0; i < n; i++) {if (s[i] == 'L') {pos[i] = (long long) nums[i] - d;} else {pos[i] = (long long) nums[i] + d;}}sort(pos.begin(), pos.end());long long res = 0;for (int i = 1; i < n; i++) {res += 1ll * (pos[i] - pos[i - 1]) * i % mod * (n - i) % mod;res %= mod;}return res;}};"}
{"task_id": "cpp/7", "content": "", "groundtruth": "class Solution {public:vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {vector<int> ans;unordered_map<int, int> mp;int m = grid.size();int n = grid[0].size();for (int j = 0; j < m; j++) {int st = 0;for (int i = 0; i < n; i++) {st |= (grid[j][i] << i);}mp[st] = j;}if (mp.count(0)) {ans.push_back(mp[0]);return ans;}for (auto [x, i]: mp) {for (auto [y, j]: mp) {if (!(x & y)) {return {min(i, j), max(i, j)};}}}return ans;}};"}
{"task_id": "cpp/8", "content": "\n\nConstraints:\nqueries.length == n^2\n1 <= n <= 100\n1 <= queries[i][0] <= 1\n0 <= queries[i][1] < n\n0 <= queries[i][2] < n\nqueries[i][1] and queries[i][2] are distinct for each i.\n \n\nFollow-up: Can you process all the queries in one pass?\n \n\nNote:\nThe tests are generated such that the sum of the number of rows and columns of the matrix is at most 2000.\n \n\nExample 1:\nInput: n = 2, queries = [[0,1,100],[1,1,100],[1,0,100],[0,0,100]]\nOutput: 200\nExplanation: Initial matrix = [[0,0],[0,0]].\nAfter applying all the 4 queries, the matrix becomes [[100,100],[100,100]].\nAll the elements in the matrix are positive, so the sum of the matrix is 200.\n\n## Solution\n\n```c++\nclass Solution {\npublic:\n    long long matrixSumQueries(int n, vector<vector<int>> &queries) {\n        long long ans = 0;\n        unordered_set<int> vis[2];\n        for (int i = queries.size() - 1; i >= 0; i--) {\n            auto &q = queries[i];\n            int type = q[0], index = q[1], val = q[2];\n            if (!vis[type].count(index)) {\n                // 后面（>i）没有对这一行/列的操作\n                // 这一行/列还剩下 n-vis[type^1].size() 个可以填入的格子____vis[type].insert(index);\n                if (type == 0) {\n                    for (int j = 0; j < n; ++j) {\n                        if (!vis[1].count(j)) {\n                            ans += val;\n                        }\n                    }\n", "groundtruth": "class Solution {public:long long matrixSumQueries(int n, vector<vector<int>> &queries) {long long ans = 0;unordered_set<int> vis[2];for (int i = queries.size() - 1; i >= 0; i--) {auto &q = queries[i];int type = q[0], index = q[1], val = q[2];if (!vis[type].count(index)) { // 后面（>i）没有对这一行/列的操作// 这一行/列还剩下 n-vis[type^1].size() 个可以填入的格子ans += (long long) (n - vis[type ^ 1].size()) * val;vis[type].insert(index);}}return ans;}};"}
{"task_id": "cpp/9", "content": "\nThe given code does the following:\nIt defines two global constants:N, the number of digits in num, and M, the maximum sum of digits.It defines a static constant MOD, the modulo for the returned answer.It defines two functions:dfs, which recursively calculates the number of good integers from the beginning of the string to the end, and get, which calls dfs on the string given as an argument.It defines a class Solution with the following member functions:sub, which returns the string obtained by subtracting 1 from the last non-zero character in the given string;and count, which returns the number of good integers between num1 and num2 inclusive, with the sum of the digits in each integer limited by min_sum and max_sum.\nThe code given is incomplete.The function count is not complete, and the function dfs is not complete.\n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n", "groundtruth": "class Solution {static constexpr int N = 23;static constexpr int M = 401;static constexpr int MOD = 1e9 + 7;int d[N][M];string num;int min_sum;int max_sum;int dfs(int i, int j, bool limit) {if (j > max_sum) {return 0;}if (i == -1) {return j >= min_sum;}if (!limit && d[i][j] != -1) {return d[i][j];}int res = 0;int up = limit ? num[i] - '0' : 9;for (int x = 0; x <= up; x++) {res = (res + dfs(i - 1, j + x, limit && x == up)) % MOD;}if (!limit) {d[i][j] = res;}return res;}int get(string num) {reverse(num.begin(), num.end());this->num = num;return dfs(num.size() - 1, 0, true);}// 求解 num - 1，先把最后一个非 0 字符减去 1，再把后面的 0 字符变为 9string sub(string num) {int i = num.size() - 1;while (num[i] == '0') {i--;}num[i]--;i++;while (i < num.size()) {num[i] = '9';i++;}return num;}public:int count(string num1, string num2, int min_sum, int max_sum) {memset(d, -1, sizeof d);this->min_sum = min_sum;this->max_sum = max_sum;return (get(num2) - get(sub(num1)) + MOD) % MOD;}};"}
{"task_id": "cpp/10", "content": "", "groundtruth": "class Solution {public:int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {int n = mat.size();int m = mat[0].size();unordered_map<int, pair<int, int>> mp;for (int i = 0; i < n; ++i) {for (int j = 0; j < m; ++j) {mp[mat[i][j]] = {i, j};}}vector<int> rowCnt(n, 0);vector<int> colCnt(m, 0);for (int i = 0; i < arr.size(); ++i) {auto& v = mp[arr[i]];++rowCnt[v.first];if (rowCnt[v.first] == m) {return i;}++colCnt[v.second];if (colCnt[v.second] == n) {return i;}}return -1;}};"}
{"task_id": "cpp/11", "content": "\n\n\n", "groundtruth": "class Solution {public:int minimumCost(vector<int> &start, vector<int> &target, vector <vector<int>> &specialRoads) {using LL = long long;LL t = (LL) target[0] << 32 | target[1];unordered_map<LL, int> dis = {{(LL) start[0] << 32 | start[1], 0}, {t, INT_MAX}};unordered_set<LL> vis;for (;;) {LL v = -1;int dv = -1;for (auto &[p, d]: dis)if (!vis.count(p) && (dv < 0 || d < dv))v = p, dv = d;if (v == t) return dv; // 到终点的最短路已确定vis.insert(v);int vx = v >> 32, vy = v & UINT32_MAX;// 更新到终点的最短路dis[t] = min(dis[t], dv + target[0] - vx + target[1] - vy);for (auto &r: specialRoads) {int d = dv + abs(r[0] - vx) + abs(r[1] - vy) + r[4];LL w = (LL) r[2] << 32 | r[3];if (!dis.count(w) || d < dis[w])dis[w] = d;}}}};"}
{"task_id": "cpp/12", "content": "\n \n\nExample 1:\nInput: s = \"aabcb\", k = 2\nOutput: \"aabcba\"\nExplanation: \nThe string \"aabcb\" is beautiful because it contains the first 2 letters of the English lowercase alphabet (\"a\" and \"b\").\nWe can reorder the string to be \"aabcba\", which is the lexicographically smallest string that is larger than \"aabcb\" and is beautiful.\nExample 2:\nInput: s = \"aabbcc\", k = 3\nOutput: \"abcabc\"\nExplanation: \nWe can reorder the string to be \"abcabc\", which is the lexicographically smallest string that is larger than \"aabbcc\" and is beautiful.\nExample 3:\nInput: s = \"leetcode\", k = 4\nOutput: \"\"\nExplanation: \nThere is no beautiful string with less than 4 letters.\nExample 4:\nInput: s = \"aabbccd\", k = 3\nOutput: \"abcabcd\"\nExample 5:\nInput: s = \"abcdeeedcba\", k = 4\nOutput: \"abcdeedba\"\n \n\nConstraints:\n\n1 <= s.length <= 105\n1 <= k <= 105\ns contains only lowercase English letters.\n\n \n\nFollow up: Could you solve this problem in O(n) time or O(n log(n)) time?\n\"\"\"\n\n\nclass Solution:\n    def smallestBeautifulString(self, s, k):\n        if k <= len(s):\n            return \"\"\n        if k == len(s) + 1:\n            return \"\".join(sorted(s))\n        return \"\".join(sorted(s)) + chr(ord(\"a\") + (k - len(s)) - 1)\n", "groundtruth": "class Solution {public:string smallestBeautifulString(string s, int k) {for (int i = s.length() - 1; i >= 0; --i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {____}}for (int j = 1; j <= 3; ++j) {if (s[i] - 'a' + j + 1 <= k && blockedCharacters.find(s[i] + j) == blockedCharacters.end()) {return generate(s, i, j);}}}return \"\";}string generate(string s, int idx, int offset) {s[idx] += offset;for (int i = idx + 1; i < s.length(); ++i) {unordered_set<char> blockedCharacters;for (int j = 1; j <= 2; ++j) {if (i - j >= 0) {blockedCharacters.insert(s[i - j]);}}for (int j = 0; j < 3; ++j) {if (____) {s[i] = 'a' + j;break;}}}return s;}};"}
{"task_id": "cpp/13", "content": "", "groundtruth": "class Solution {public:vector<int> findThePrefixCommonArray(vector<int> &a, vector<int> &b) {int n = a.size();vector<int> ans(n);long long p = 0, q = 0;for (int i = 0; i < n; ++i) {p |= 1LL << a[i];q |= 1LL << b[i];ans[i] = __builtin_popcountll(p & q);}return ans;}};"}
{"task_id": "cpp/14", "content": "\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ", "groundtruth": "class Solution {static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};public:int findMaxFish(vector<vector<int>> &grid) {int m = grid.size(), n = grid[0].size(), ans = 0;function<int(int, int)> dfs = [&](int x, int y) -> int {if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0)return 0;int sum = grid[x][y];grid[x][y] = 0; // 标记成访问过for (auto &d: dirs) // 四方向移动sum += dfs(x + d[0], y + d[1]);return sum;};for (int i = 0; i < m; ++i)for (int j = 0; j < n; ++j)ans = max(ans, dfs(i, j));return ans;}};"}
{"task_id": "cpp/15", "content": "\n \n\nExample 1:\n\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: \n[1,2,3] -> [1,3] -> [2] -> []\nSo it takes 3 operations to make nums empty.\nExample 2:\n\nInput: nums = [1,2,3,4,5,6,7,8,9,10]\nOutput: 10\nExplanation: \n[1,2,3,4,5,6,7,8,9,10] -> [1,3,5,7,9] -> [2,4,6,8,10] -> [2,6,10] -> [3,9] -> [4,8] -> [5,7] -> [6] -> [10] -> []\nSo it takes 10 operations to make nums empty.\n \n\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= nums.length\nAll the integers in nums are unique.", "groundtruth": "// 树状数组模板class BIT {vector<int> tree;public:BIT(int n) : tree(n) {}// 将下标 i 上的数加一void inc(int i) {while (i < tree.size()) {++tree[i];i += i & -i;}}// 返回闭区间 [1, i] 的元素和int sum(int x) {int res = 0;while (x > 0) {res += tree[x];x &= x - 1;}return res;}// 返回闭区间 [left, right] 的元素和int query(int left, int right) {return sum(right) - sum(left - 1);}};class Solution {public:long long countOperationsToEmptyArray(vector<int> &nums) {int n = nums.size(), id[n];iota(id, id + n, 0);sort(id, id + n, [&](int i, int j) {return nums[i] < nums[j];});long long ans = n; // 先把 n 计入答案BIT t(n + 1); // 下标从 1 开始int pre = 1; // 上一个最小值的位置，初始为 1for (int k = 0; k < n; ++k) {int i = id[k] + 1; // 下标从 1 开始if (i >= pre) // 从 pre 移动到 i，跳过已经删除的数ans += i - pre - t.query(pre, i);else // 从 pre 移动到 n，再从 1 移动到 i，跳过已经删除的数ans += n - pre + i - k + t.query(i, pre - 1);t.inc(i); // 删除 ipre = i;}return ans;}};"}
{"task_id": "cpp/16", "content": "\n \n\nExample 1:\nInput: nums = [1,2,3,4,5], k = 2, x = 3\nOutput: [2,4,3,4,2]\nExplanation:\nSubarray [1, 2] has only one negative number, whose value is -1.\nSubarray [2, 3] has no negative numbers.\nSubarray [3, 4] has no negative numbers.\nSubarray [4, 5] has only one negative number, whose value is -1.\nSubarray [1, 3] has no negative numbers.\nSubarray [2, 5] has no negative numbers.\nSubarray [3, 5] has only one negative number, whose value is -1.\nSubarray [1, 4] has no negative numbers.\nSubarray [2, 4] has no negative numbers.\nSubarray [4, 5] has only one negative number, whose value is -1.\nHence, the answer is [2, 4, 3, 4, 2].\n\nExample 2:\nInput: nums = [1,2,3,4], k = 2, x = 1\nOutput: [4,3,2,1]\nExplanation:\nSubarray [1, 2] has only one negative number, whose value is -1.\nSubarray [2, 3] has no negative numbers.\nSubarray [3, 4] has no negative numbers.\nSubarray [1, 3] has no negative numbers.\nSubarray [2, 4] has no negative numbers.\nHence, the answer is [4, 3, 2, 1].\n\nExample 3:\nInput: nums = [1,2,3,4,5,6,7,8], k = 3, x = 2\nOutput: [3,2,2,4,2,2,3,4]\nExplanation:\nSubarray [1, 2, 3] has only one negative number, whose value is -1.\nSubarray [2, 3, 4] has no negative numbers.\nSubarray [3, 4, 5] has no negative numbers.\nSubarray [4", "groundtruth": "class Solution {public:vector<int> getSubarrayBeauty(vector<int> &nums, int k, int x) {const int BIAS = 50;int cnt[BIAS * 2 + 1]{}, n = nums.size();for (int i = 0; i < k - 1; ++i) // 先往窗口内添加 k-1 个数++cnt[nums[i] + BIAS];vector<int> ans(n - k + 1);for (int i = k - 1; i < n; ++i) {++cnt[nums[i] + BIAS]; // 进入窗口（保证窗口有恰好 k 个数）int left = x;for (int j = 0; j < BIAS; ++j) { // 暴力枚举负数范围 [-50,-1]left -= cnt[j];if (left <= 0) { // 找到美丽值ans[i - k + 1] = j - BIAS;break;}}--cnt[nums[i - k + 1] + BIAS]; // 离开窗口}return ans;}};"}
{"task_id": "cpp/17", "content": "\nNote: The input n is less than 10^5, and the answer is guaranteed to be less than 2^31 - 1.\n\nExample:\n\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: Replace the last 3 elements with their gcd 1 = 1.\n\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: There is no way to make all the elements of the array equal to 1.\n\nInput: nums = [1,2,3,4,5,6]\nOutput: 5\nExplanation: Replace the last 5 elements with their gcd 1 = 1.\n\n\n\nNote:\n\nnums.length <= 10^5\n1 <= nums[i] <= 10^9\n\n\n\n\n\n\n\n\n\n\n\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int n = nums.size();\n        int gcd_all = 0, cnt1 = 0;\n        for (int x: nums) {\n            gcd_all = gcd(gcd_all, x);\n        }\n        if (gcd_all > 1) return -1;\n        if (cnt1) return n - cnt1;\n        int min_size = n;\n        for (int i = 0; i < n; ++i) {\n            int g = 0;\n            for (int j = i; j < n; ++j) {\n                g = gcd(g, nums[j]);\n                if (g == 1) {\n                    break;\n                }\n            }\n        }\n        return min_size + n - 1;\n    }\n};\n", "groundtruth": "class Solution {public:int minOperations(vector<int> &nums) {int n = nums.size(), gcd_all = 0, cnt1 = 0;for (int x: nums) {gcd_all = gcd(gcd_all, x);cnt1 += x == 1;}if (gcd_all > 1) return -1;if (cnt1) return n - cnt1;int min_size = n;for (int i = 0; i < n; ++i) {int g = 0;for (int j = i; j < n; ++j) {g = gcd(g, nums[j]);if (g == 1) {// 这里本来是 j-i+1，把 +1 提出来合并到 return 中min_size = min(min_size, j - i);break;}}}return min_size + n - 1;}};"}
{"task_id": "cpp/18", "content": "Example:\nInput: nums = [3,6,9,12], divisors = [9,12,3,6]\nOutput: 9\nNote:\n2 <= nums.length <= 10000\n2 <= divisors.length <= 1000\n1 <= nums[i], divisors[i] <= 10000\n\nclass Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        int cnt = -1, ans = 0;\n        for (int i = 0; i < divisors.size(); i++) {\n            int tmp = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                if (nums[j] % divisors[i] == 0) {\n                    tmp++;\n                }\n            }\n            if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {\n                cnt = tmp;\n                ans = divisors[i];\n            }\n        }\n        return ans;\n    }\n};\n", "groundtruth": "class Solution {public:int maxDivScore(vector<int>& nums, vector<int>& divisors) {int cnt = -1, ans = 0;for (int i = 0; i < divisors.size(); i++) {int tmp = 0;for (int j = 0; j < nums.size(); j++) {if (nums[j] % divisors[i] == 0) {tmp++;}}if (tmp > cnt || (tmp == cnt && divisors[i] < ans)) {ans = divisors[i];cnt = tmp;}}return ans;}};"}
{"task_id": "cpp/19", "content": "Input Format\nThe only line of input gives a string word. It is guaranteed that word can be formed by concatenating the string \"abc\" several times.\nConstraints\n1≤word.length≤1000\nword consists of lowercase English letters.\nOutput Format\nThe only line of output gives an integer, the minimum number of letters that must be inserted to make word valid.\nSample Input\naababcabc\nSample Output\n1\nExplanation\nThe first letter of the word is already \"a\", the second letter is already \"a\", the third letter is \"b\", and the fourth letter is \"a\". The fifth letter must be \"b\" and the sixth letter must be \"a\".\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int addMinimum(string word) {\n        int n = word.size();\n        vector<int> d(n + 1);\n        for (int i = 1; i <= n; i++) {\n            if (word[i - 1] == 'a') {\n                d[i] = d[i - 1];\n            } else if (word[i - 1] == 'b') {\n                d[i] = d[i - 1] - 1;\n            } else {\n                d[i] = d[i - 1] - 2;\n            }\n        }\n        return d[n];\n    }\n};", "groundtruth": "class Solution {public:int addMinimum(string word) {int n = word.size();vector<int> d(n + 1);for (int i = 1; i <= n; i++) {d[i] = d[i - 1] + 2;if (i > 1 && word[i - 1] > word[i - 2]) {d[i] = d[i - 1] - 1;}}return d[n];}};"}
{"task_id": "cpp/20", "content": "", "groundtruth": "class Solution {public:int minimumTotalPrice(int n, vector<vector<int>> &edges, vector<int> &price, vector<vector<int>> &trips) {vector<vector<int>> next(n);for (auto &edge : edges) {next[edge[0]].push_back(edge[1]);next[edge[1]].push_back(edge[0]);}vector<int> count(n);function<bool(int, int, int)> dfs = [&](int node, int parent, int end) -> bool {if (node == end) {count[node]++;return true;}for (int child : next[node]) {if (child == parent) {continue;}if (dfs(child, node, end)) {count[node]++;return true;}}return false;};for (auto &trip: trips) {dfs(trip[0], -1, trip[1]);}function<pair<int, int>(int, int)> dp = [&](int node, int parent) -> pair<int, int> {pair<int, int> res = {price[node] * count[node], price[node] * count[node] / 2};for (int child : next[node]) {if (child == parent) {continue;}auto [x, y] = dp(child, node);res.first += min(x, y); // node 没有减半，因此可以取子树的两种情况的最小值res.second += x; // node 减半，只能取子树没有减半的情况}return res;};auto [x, y] = dp(0, -1);return min(x, y);}};"}
{"task_id": "cpp/21", "content": "Example 1:\nInput: nums = [1,3,5,2,3,1]\nOutput: [1,6,12,9,15,13]\nExplanation: The prefix sums are [1,1+3,1+3+5,1+3+5+2,1+3+5+2+3,1+3+5+2+3+1].\n\nclass Solution {public:vector<long long> findPrefixScore(vector<int>& nums) {vector<long long> ans;int tmp = nums[0];ans.push_back(nums[0] * 2);for (int i = 1; i < nums.size(); ++i) {if (nums[i] > tmp) tmp = nums[i];ans.push_back(nums[i] + tmp);}return ans;}};\nExample 2:\nInput: nums = [1,4,2,3]\nOutput: [1,5,4,8]\nExplanation: The prefix sums are [1,1+4,1+4+2,1+4+2+3].\n\nclass Solution {public:vector<long long> findPrefixScore(vector<int>& nums) {vector<long long> ans;int tmp = nums[0];ans.push_back(nums[0] * 2);for (int i = 1; i < nums.size(); ++i) {if (nums[i] > tmp) tmp = nums[i];ans.push_back(nums[i] + tmp);}return ans;}};\n\nConstraints:\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\n", "groundtruth": "class Solution {public:vector<long long> findPrefixScore(vector<int>& nums) {vector<long long> ans;int tmp = nums[0];ans.push_back(nums[0] * 2);for (int i = 1; i < nums.size(); ++i) {if (nums[i] > tmp) tmp = nums[i];ans.push_back(nums[i] + tmp + ans[i - 1]);}return ans;}};"}
{"task_id": "cpp/22", "content": "\n\n\n\n\n\n\n\n\n\n\n\nclass Solution {\npublic:\n    TreeNode* replaceValueInTree(TreeNode* root) {\n        if(!root) return NULL;\n        vector<TreeNode*> q = {root};\n        root->val = 0;\n        while(!q.empty()){\n            vector<TreeNode*> q2;\n            int sum = 0;\n            for(auto fa: q){\n                if(fa->left){\n                    q2.push_back(fa->left);\n                    sum += fa->left->val;\n                }\n                if(fa->right){\n                    q2.push_back(fa->right);\n                    sum += fa->right->val;\n                }\n            }\n            for(auto fa: q){\n                int child_sum = (fa->left ? fa->left->val : 0) +(fa->right ? fa->right->val : 0);\n                if(fa->left){\n                    fa->left->val += sum;\n                }\n                if(fa->right){\n                    fa->right->val += sum;\n                }\n            }\n            q = move(q2);\n        }\n        return root;\n    }\n};\n", "groundtruth": "class Solution {public:TreeNode* replaceValueInTree(TreeNode* root) {vector<TreeNode*> q = {root};root->val = 0;while (!q.empty()) {vector<TreeNode*> q2;int sum = 0;for (auto fa : q) {if (fa->left) {q2.push_back(fa->left);sum += fa->left->val;}if (fa->right) {q2.push_back(fa->right);sum += fa->right->val;}}for (auto fa : q) {int child_sum = (fa->left ? fa->left->val : 0) +(fa->right ? fa->right->val : 0);if (fa->left) {fa->left->val = sum - child_sum;}if (fa->right) {fa->right->val = sum - child_sum;}}q = move(q2);}return root;}};"}
{"task_id": "cpp/23", "content": "\nThe input consists of two lines.\n\nThe first line contains an integer n (1 ≤ n ≤ 100) and an integer m (1 ≤ m ≤ 5000) separated by a space.\nThe second line contains m lines. Each line contains three integers x, y, z (0 ≤ x, y < n, 1 ≤ z ≤ 100000) separated by a space.\nThe integers in the second line describe the edges of the graph.\n\nThe output consists of a single line containing a single integer.\n\nThe minimum cost of a path from node1 to node2. If no path exists, return -1.\n\nA sample input is as follows:\n4 6\n0 1 1\n1 2 2\n0 3 2\n3 1 3\n2 3 3\n3 2 4\nA sample output is as follows:\n5\n\n*/\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\nclass Graph {\npublic:\n    using pii = pair<int, int>;\n    Graph(int n, vector<vector<int>>& edges) {\n        this->graph = vector<vector<pii>>(n);\n        for (auto &vec : edges) {\n            int x = vec[0];\n            int y = vec[1];\n            int cost = vec[2];\n            graph[x].emplace_back(y, cost);\n        }\n    }\n    void addEdge(vector<int> edge) {\n        int x = edge[0];\n        int y = edge[1];\n        int cost = edge[2];\n        graph[x].emplace_back(y, cost);\n    }\n    int shortestPath(int node1, int node2) {\n        priority_queue<pii, vector<pii>, greater<pii>> pq;\n        vector<int> dist(graph.size(), INT_MAX);\n        dist[node1] = 0;\n        pq.emplace(0, node1);\n        while (!pq.empty()) {\n            auto [cost, cur] = pq.top();\n            pq.", "groundtruth": "class Graph {public:using pii = pair<int, int>;Graph(int n, vector<vector<int>>& edges) {this->graph = vector<vector<pii>>(n);for (auto &vec : edges) {int x = vec[0];int y = vec[1];int cost = vec[2];graph[x].emplace_back(y, cost);}}void addEdge(vector<int> edge) {int x = edge[0];int y = edge[1];int cost = edge[2];graph[x].emplace_back(y, cost);}int shortestPath(int node1, int node2) {priority_queue<pii, vector<pii>, greater<pii>> pq;vector<int> dist(graph.size(), INT_MAX);dist[node1] = 0;pq.emplace(0, node1);while (!pq.empty()) {auto [cost, cur] = pq.top();pq.pop();if (cur == node2) {return cost;}for (auto [next, ncost] : graph[cur]) {if (dist[next] > cost + ncost) {dist[next] = cost + ncost;pq.emplace(cost + ncost, next);}}}return -1;}private:vector<vector<pii>> graph;};"}
{"task_id": "cpp/24", "content": "\nThe output is in the form of an array.\n\nThe array consists of long integers, each of which is an integer in the range of [0, 2 * 109].\n\nThe array length does not exceed 104.\n\nExample 1:\nInput: nums = [1,2,3,4,5,6]\nOutput: [5,4,3,2,1,0]\nExplanation:\n1 and 6 have the same value, so they form a group.\n2 and 5 have the same value, so they form a group.\n3 and 4 have the same value, so they form a group.\nThe blue area is the maximum rectangle that can be formed.\nThe red area is the green area.\n\nExample 2:\nInput: nums = [1,1,1,1,1,1]\nOutput: [0,0,0,0,0,0]\n\nExample 3:\nInput: nums = [2,2,2,2,2,2]\nOutput: [0,0,0,0,0,0]\n\nConstraints:\n\n1 <= nums.length <= 104\n1 <= nums[i] <= 105\n*/\n\n\n\nclass Solution {\npublic:\n    vector<long long> distance(vector<int> &nums) {\n        int n = nums.size();\n        unordered_map<int, vector<int>> groups;\n        for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标\n        vector<long long> ans(n);\n        long long s[n + 1];\n        s[0] = 0;\n        for (auto &[_, a]: groups) {\n            int m = a.size();\n            for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和\n            for (int i = 0; i < m; ++i) {\n                long long target = a[i];\n                long long right", "groundtruth": "class Solution {public:vector<long long> distance(vector<int> &nums) {int n = nums.size();unordered_map<int, vector<int>> groups;for (int i = 0; i < n; ++i)groups[nums[i]].push_back(i); // 相同元素分到同一组，记录下标vector<long long> ans(n);long long s[n + 1];s[0] = 0;for (auto &[_, a]: groups) {int m = a.size();for (int i = 0; i < m; ++i)s[i + 1] = s[i] + a[i]; // 前缀和for (int i = 0; i < m; ++i) {long long target = a[i];long long left = target * i - s[i]; // 蓝色面积long long right = s[m] - s[i] - target * (m - i); // 绿色面积ans[target] = left + right;}}return ans;}};"}
{"task_id": "cpp/25", "content": "\n\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimizeMax(vector<int> &nums, int p) {\n        sort(nums.begin(), nums.end());\n        int left = -1, right = nums.back() - nums[0];\n        while (left + 1 < right) {\n            int mid = left + (right - left) / 2;\n            int cnt = 0;\n            for (int i = 0; i < nums.size() - 1; ++i) {\n                if (nums[i + 1] - nums[i] > mid) {\n                    ++cnt;\n                    ++i;\n                }\n            }\n            if (cnt >= p) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        return right;\n    }\n};\n", "groundtruth": "class Solution {public:int minimizeMax(vector<int> &nums, int p) {sort(nums.begin(), nums.end());int left = -1, right = nums.back() - nums[0]; // 开区间while (left + 1 < right) { // 开区间int mid = left + (right - left) / 2, cnt = 0;for (int i = 0; i < nums.size() - 1; ++i)if (nums[i + 1] - nums[i] <= mid) { // 都选++cnt;++i;}(cnt >= p ? right : left) = mid;}return right;}};"}
{"task_id": "cpp/26", "content": "", "groundtruth": "class Solution {public:int minimumVisitedCells(vector<vector<int>>& grid) {int m = grid.size(), n = grid[0].size();vector<vector<int>> dist(m, vector<int>(n, -1));dist[0][0] = 1;vector<priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>>> row(m), col(n);auto update = [](int& x, int y) {if (x == -1 || y < x) {x = y;}};for (int i = 0; i < m; ++i) {for (int j = 0; j < n; ++j) {while (!row[i].empty() && row[i].top().second + grid[i][row[i].top().second] < j) {row[i].pop();}if (!row[i].empty()) {update(dist[i][j], dist[i][row[i].top().second] + 1);}while (!col[j].empty() && col[j].top().second + grid[col[j].top().second][j] < i) {col[j].pop();}if (!col[j].empty()) {update(dist[i][j], dist[col[j].top().second][j] + 1);}if (dist[i][j] != -1) {row[i].emplace(dist[i][j], j);col[j].emplace(dist[i][j], i);}}}return dist[m - 1][n - 1];}};"}
{"task_id": "cpp/27", "content": "\nNote: \nThe number of rows in the 2D array will be between 1 and 500.\nThe number of columns in the 2D array will be between 1 and 1000.\nThe number of elements in nums will be between 1 and 1000.\nEach element in nums will be between 1 and 1000.\n\n\n\n\n\n\n\n\n\n\n\nclass Solution {\npublic:\n    vector<vector<int>> findMatrix(vector<int>& nums) {\n        unordered_map<int, int> cnt;\n        for (int x: nums) ++cnt[x];\n        vector<vector<int>> ans;\n        while (!cnt.empty()) {\n            vector<int> row;\n            for (auto it = cnt.begin(); it != cnt.end();) {\n                row.push_back(it->first);\n                if (--it->second == 0)\n                    cnt.erase(it++);\n                else\n                    ++it;\n            }\n            ans.push_back(row);\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "groundtruth": "class Solution {public:vector<vector<int>> findMatrix(vector<int> &nums) {unordered_map<int, int> cnt;for (int x: nums) ++cnt[x];vector<vector<int>> ans;while (!cnt.empty()) {vector<int> row;for (auto it = cnt.begin(); it != cnt.end();) {row.push_back(it->first);if (--it->second == 0) it = cnt.erase(it);else ++it;}ans.push_back(row);}return ans;}};"}
{"task_id": "cpp/28", "content": "\nclass Solution {\npublic:\n    int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {\n        int ans = 0;\n        int n = reward1.size();\n        vector<int> diffs(n);\n        for (int i = 0; i < n; i++) {\n            diffs[i] = reward1[i] - reward2[i];\n        }\n        sort(diffs.begin(), diffs.end());\n        for (int i = 1; i <= k; i++) {\n            ans += diffs[i];\n        }\n        return ans;\n    }\n};\n", "groundtruth": "class Solution {public:int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {int ans = 0;int n = reward1.size();vector<int> diffs(n);for (int i = 0; i < n; i++) {ans += reward2[i];diffs[i] = reward1[i] - reward2[i];}sort(diffs.begin(), diffs.end());for (int i = 1; i <= k; i++) {ans += diffs[n - i];}return ans;}};"}
{"task_id": "cpp/29", "content": "\n \n\nExample 1:\nInput: n = 5, p = 3, banned = [2,1]\nOutput: [-1,4,3,2,1]\nExplanation:\nThe position 3 has a single 1.\nIn the first operation, the subarray [3,3] of size 1 is reversed to [1,1].\nIn the second operation, the subarray [1,1] of size 1 is reversed to [1,3].\nIn the third operation, the subarray [1,3] of size 2 is reversed to [3,1].\nIn the fourth operation, the subarray [3,1] of size 2 is reversed to [1,3].\nIn the fifth operation, the subarray [1,3] of size 2 is reversed to [3,1].\nThere is no way to bring the single 1 to position 4.\n\nExample 2:\nInput: n = 1, p = 0, banned = []\nOutput: [0]\nExplanation: The single 1 is already at position 0.\n\nExample 3:\nInput: n = 2, p = 0, banned = [1]\nOutput: [-1]\nExplanation: It is impossible to bring the single 1 to position 1.\n\nConstraints:\n\nn == banned.length\n1 <= n <= 10^5\n0 <= p < n\n0 <= banned[i] < n\n\n\n\n\n\n\n\n\nclass Solution {public:\n    vector<int> minReverseOperations(int n, int p, vector<int> &banned, int k) {\n        unordered_set<int> ban{banned.begin(), banned.end()};\n        set<int> sets[2];\n        for (int i = 0; i < n; ++i)\n            if (i != p)\n                if (ban.count(i))\n                    sets[i % 2].insert(i);\n                else\n                    sets[i % 2].insert(n);\n        sets[0].insert(n);\n        sets[1].insert(n);\n        // 哨", "groundtruth": "class Solution {public:vector<int> minReverseOperations(int n, int p, vector<int> &banned, int k) {unordered_set<int> ban{banned.begin(), banned.end()};set<int> sets[2];for (int i = 0; i < n; ++i)if (i != p && !ban.count(i))sets[i % 2].insert(i);sets[0].insert(n);sets[1].insert(n); // 哨兵vector<int> ans(n, -1);vector<int> q = {p};for (int step = 0; !q.empty(); ++step) {vector<int> nq;for (int i: q) {ans[i] = step;// 从 mn 到 mx 的所有位置都可以翻转到int mn = max(i - k + 1, k - i - 1);int mx = min(i + k - 1, n * 2 - k - i - 1);auto &s = sets[mn % 2];for (auto it = s.lower_bound(mn); *it <= mx; it = s.erase(it))nq.push_back(*it);}q = move(nq);}return ans;}};"}
{"task_id": "sql/0", "description": "Concatenate first name and last name of each employee with a space in between to create a full name.", "code": "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;", "input": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}], "expected_output": [{"full_name": "John Doe"}, {"full_name": "Jane Smith"}, {"full_name": "Mike Brown"}], "metadata": {"programming_language": "SQL", "difficulty": "Easy", "test_aspect": "String Concatenation"}}
{"task_id": "sql/1", "description": "Select employees' names and change them to upper case, also calculating the length of their names including spaces.", "code": "SELECT UPPER(CONCAT(first_name, ' ', last_name)) AS name_uppercase, LENGTH(CONCAT(first_name, ' ', last_name)) AS name_length FROM employees;", "input": [{"first_name": "John", "last_name": "Doe"}, {"first_name": "Jane", "last_name": "Smith"}, {"first_name": "Mike", "last_name": "Brown"}], "expected_output": [{"name_uppercase": "JOHN DOE", "name_length": 8}, {"name_uppercase": "JANE SMITH", "name_length": 10}, {"name_uppercase": "MIKE BROWN", "name_length": 10}], "metadata": {"programming_language": "SQL", "difficulty": "Medium", "test_aspect": "String Manipulation"}}
{"task_id": "sql/2", "description": "From a list of comments, extract the first 10 characters, replace '...' with 'see more', convert to lower case, and count the number of modified comments longer than 12 characters.", "code": "SELECT COUNT(*) FROM ( SELECT REPLACE(LOWER(SUBSTRING(comment, 1, 10)), '...', ' see more') AS short_comment FROM comments ) AS modified_comments WHERE LENGTH(short_comment) > 12;", "input": [{"comment": "Wow, that's amazing! Fantastic work..."}, {"comment": "Interesting... I'll check this out"}, {"comment": "Not sure about this..."}, {"comment": "Absolutely brilliant... Keep it up!"}, {"comment": "Could be better."}], "expected_output": [{"count": 2}], "metadata": {"programming_language": "SQL", "difficulty": "Hard", "test_aspect": "Complex String Functions"}}
{"task_id": "sql/3", "description": "Calculate the absolute value of balance changes for each transaction.", "code": "SELECT transaction_id, ABS(balance_change) AS absolute_change FROM transactions;", "input": [{"transaction_id": 101, "balance_change": -150}, {"transaction_id": 102, "balance_change": 200}, {"transaction_id": 103, "balance_change": -50}, {"transaction_id": 104, "balance_change": 75}, {"transaction_id": 105, "balance_change": -120}], "expected_output": [{"transaction_id": 101, "absolute_change": 150}, {"transaction_id": 102, "absolute_change": 200}, {"transaction_id": 103, "absolute_change": 50}, {"transaction_id": 104, "absolute_change": 75}, {"transaction_id": 105, "absolute_change": 120}], "metadata": {"programming_language": "SQL", "difficulty": "Easy", "test_aspect": "Numeric Calculation"}}
{"task_id": "sql/4", "description": "For each employee, calculate the difference in days between their hire date and the current date, then find those who have been hired for more than 5 years, rounding their years of service up to the nearest whole year.", "code": "SELECT employee_id, CEIL(DATEDIFF(CURDATE(), hire_date) / 365) AS years_of_service FROM employees HAVING years_of_service > 5;", "input": [{"employee_id": 1, "hire_date": "2015-01-10"}, {"employee_id": 2, "hire_date": "2010-06-23"}, {"employee_id": 3, "hire_date": "2017-03-15"}, {"employee_id": 4, "hire_date": "2019-12-01"}, {"employee_id": 5, "hire_date": "2014-04-28"}], "expected_output": [{"employee_id": 1, "years_of_service": 9}, {"employee_id": 2, "years_of_service": 13}, {"employee_id": 5, "years_of_service": 9}], "metadata": {"programming_language": "SQL", "difficulty": "Hard", "test_aspect": "Date Calculation and Rounding"}}
{"task_id": "sql/5", "description": "Select all employees who were hired in the current month, regardless of the year.", "code": "SELECT employee_id, name, hire_date FROM employees WHERE MONTH(hire_date) = MONTH(CURDATE());", "input": [{"employee_id": 1, "name": "John", "hire_date": "2017-04-15"}, {"employee_id": 2, "name": "Alice", "hire_date": "2019-04-23"}, {"employee_id": 3, "name": "Bob", "hire_date": "2020-02-10"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2021-04-01"}, {"employee_id": 5, "name": "Diana", "hire_date": "2018-07-19"}], "expected_output": [{"employee_id": 1, "name": "John", "hire_date": "2017-04-15"}, {"employee_id": 2, "name": "Alice", "hire_date": "2019-04-23"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2021-04-01"}], "metadata": {"programming_language": "SQL", "difficulty": "Easy", "test_aspect": "Date Filtering"}}
{"task_id": "sql/6", "description": "Update the last_login column for all users to the current date and time.", "code": "UPDATE users SET last_login = NOW();", "input": [{"user_id": 1, "name": "John", "last_login": "2023-03-10 10:22:34"}, {"user_id": 2, "name": "Alice", "last_login": "2023-03-11 15:45:56"}, {"user_id": 3, "name": "Bob", "last_login": "2023-03-09 08:12:04"}, {"user_id": 4, "name": "Charlie", "last_login": "2023-03-12 19:34:45"}, {"user_id": 5, "name": "Diana", "last_login": "2023-03-10 17:05:23"}], "expected_output": [{"user_id": 1, "name": "John", "last_login": "Current Date and Time"}, {"user_id": 2, "name": "Alice", "last_login": "Current Date and Time"}, {"user_id": 3, "name": "Bob", "last_login": "Current Date and Time"}, {"user_id": 4, "name": "Charlie", "last_login": "Current Date and Time"}, {"user_id": 5, "name": "Diana", "last_login": "Current Date and Time"}], "metadata": {"programming_language": "SQL", "difficulty": "Medium", "test_aspect": "Date and Time Update"}}
{"task_id": "sql/7", "description": "Calculate the number of years, months, and days between each employee's hire date and the current date, displaying it in a human-readable format.", "code": "SELECT employee_id, name, CONCAT(TIMESTAMPDIFF(YEAR, hire_date, CURDATE()), ' years ', MOD(TIMESTAMPDIFF(MONTH, hire_date, CURDATE()), 12), ' months ', DAY(CURDATE()) - DAY(hire_date), ' days') AS time_since_hire FROM employees;", "input": [{"employee_id": 1, "name": "John", "hire_date": "2015-01-25"}, {"employee_id": 2, "name": "Alice", "hire_date": "2018-06-17"}, {"employee_id": 3, "name": "Bob", "hire_date": "2019-11-03"}, {"employee_id": 4, "name": "Charlie", "hire_date": "2020-02-29"}, {"employee_id": 5, "name": "Diana", "hire_date": "2014-08-07"}], "expected_output": [{"employee_id": 1, "name": "John", "time_since_hire": "8 years 2 months X days"}, {"employee_id": 2, "name": "Alice", "time_since_hire": "4 years 9 months X days"}, {"employee_id": 3, "name": "Bob", "time_since_hire": "3 years 4 months X days"}, {"employee_id": 4, "name": "Charlie", "time_since_hire": "3 years 1 month X days"}, {"employee_id": 5, "name": "Diana", "time_since_hire": "8 years 7 months X days"}], "metadata": {"programming_language": "SQL", "difficulty": "Hard", "test_aspect": "Complex Date Calculation"}}
{"task_id": "sql/8", "description": "Count the number of employees in each department.", "code": "SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id;", "input": [{"employee_id": 1, "name": "John Doe", "department_id": 101}, {"employee_id": 2, "name": "Jane Smith", "department_id": 102}, {"employee_id": 3, "name": "Alice Johnson", "department_id": 101}, {"employee_id": 4, "name": "Bob Brown", "department_id": 103}, {"employee_id": 5, "name": "Charlie Davis", "department_id": 101}], "expected_output": [{"department_id": 101, "employee_count": 3}, {"department_id": 102, "employee_count": 1}, {"department_id": 103, "employee_count": 1}], "metadata": {"programming_language": "SQL", "difficulty": "Easy", "test_aspect": "Group Counter"}}
{"task_id": "sql/9", "description": "Find the average, minimum, and maximum salary within each department.", "code": "SELECT department_id, AVG(salary) AS average_salary, MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employees GROUP BY department_id;", "input": [{"employee_id": 1, "name": "John", "department_id": 201, "salary": 80000}, {"employee_id": 2, "name": "Alice", "department_id": 202, "salary": 95000}, {"employee_id": 3, "name": "Bob", "department_id": 201, "salary": 60000}, {"employee_id": 4, "name": "Charlie", "department_id": 203, "salary": 72000}, {"employee_id": 5, "name": "Diana", "department_id": 202, "salary": 85000}], "expected_output": [{"department_id": 201, "average_salary": 70000, "min_salary": 60000, "max_salary": 80000}, {"department_id": 202, "average_salary": 90000, "min_salary": 85000, "max_salary": 95000}, {"department_id": 203, "average_salary": 72000, "min_salary": 72000, "max_salary": 72000}], "metadata": {"programming_language": "SQL", "difficulty": "Hard", "test_aspect": "Complex Aggregation"}}
{"task_id": "sql/10", "description": "Select the name of employees and if their salary is above 60000 mark them as 'High', else 'Low'.", "code": "SELECT name, IF(salary > 60000, 'High', 'Low') AS salary_level FROM employees;", "input": [{"name": "John Doe", "salary": 75000}, {"name": "Jane Smith", "salary": 58000}, {"name": "Alice Johnson", "salary": 62000}, {"name": "Bob Brown", "salary": 55000}, {"name": "Charlie Davis", "salary": 48000}], "expected_output": [{"name": "John Doe", "salary_level": "High"}, {"name": "Jane Smith", "salary_level": "Low"}, {"name": "Alice Johnson", "salary_level": "High"}, {"name": "Bob Brown", "salary_level": "Low"}, {"name": "Charlie Davis", "salary_level": "Low"}], "metadata": {"programming_language": "SQL", "difficulty": "Easy", "test_aspect": "Conditional Logic"}}
{"task_id": "sql/11", "description": "Assign a rating based on salary: more than 80000 as 'A', between 60000 and 80000 as 'B', and below 60000 as 'C'.", "code": "SELECT name, CASE WHEN salary > 80000 THEN 'A' WHEN salary BETWEEN 60000 AND 80000 THEN 'B' ELSE 'C' END AS salary_rating FROM employees;", "input": [{"name": "John Doe", "salary": 90000}, {"name": "Jane Smith", "salary": 65000}, {"name": "Alice Johnson", "salary": 85000}, {"name": "Bob Brown", "salary": 40000}, {"name": "Charlie Davis", "salary": 70000}], "expected_output": [{"name": "John Doe", "salary_rating": "A"}, {"name": "Jane Smith", "salary_rating": "B"}, {"name": "Alice Johnson", "salary_rating": "A"}, {"name": "Bob Brown", "salary_rating": "C"}, {"name": "Charlie Davis", "salary_rating": "B"}], "metadata": {"programming_language": "SQL", "difficulty": "Medium", "test_aspect": "Conditional Ranges"}}
{"task_id": "sql/12", "description": "Select the name, check if the commission is null, use salary to determine basic ('C') or premium ('B') membership. If commission is present, automatically assign 'A' membership.", "code": "SELECT name, CASE WHEN COALESCE(commission, 0) > 0 THEN 'A' WHEN salary > 60000 THEN 'B' ELSE 'C' END AS membership FROM sales_staff;", "input": [{"name": "John Doe", "salary": 55000, "commission": null}, {"name": "Jane Smith", "salary": 75000, "commission": 5000}, {"name": "Alice Johnson", "salary": 61000, "commission": null}, {"name": "Bob Brown", "salary": 45000, "commission": 2000}, {"name": "Charlie Davis", "salary": 60000, "commission": null}], "expected_output": [{"name": "John Doe", "membership": "C"}, {"name": "Jane Smith", "membership": "A"}, {"name": "Alice Johnson", "membership": "B"}, {"name": "Bob Brown", "membership": "A"}, {"name": "Charlie Davis", "membership": "C"}], "metadata": {"programming_language": "SQL", "difficulty": "Hard", "test_aspect": "Complex Conditional Logic"}}
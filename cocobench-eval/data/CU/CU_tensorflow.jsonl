{"task_id": "tensorflow/0", "description": "Given a list of numbers, this TensorFlow function creates a variable from the list, then computes and returns the mean of the variable using TensorFlow operations.", "code": "import tensorflow as tf\n\ndef compute_mean(numbers_list):\n    numbers_var = tf.Variable(numbers_list)\n    mean_val = tf.reduce_mean(tf.cast(numbers_var, tf.float32))\n    return mean_val", "input": "[4, 2, 6, 8, 10]", "expected_output": "6.0", "metadata": {"programming_language": "Python", "difficulty": "Medium", "test_aspect": "Basic operations and constants"}}
{"task_id": "tensorflow/1", "description": "This TensorFlow function takes two arrays of numbers, creates two tensors from these arrays, then multiplies these tensors element-wise. Finally, it reshapes the result into a new specified shape and returns the reshaped tensor.", "code": "import tensorflow as tf\n\ndef multiply_and_reshape(array1, array2, new_shape):\n    tensor1 = tf.constant(array1)\n    tensor2 = tf.constant(array2)\n    multiplied_tensor = tf.multiply(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(multiplied_tensor, new_shape)\n    return reshaped_tensor", "input": "[[1, 2], [3, 4]], [[5, 6], [7, 8]], (4, 1)", "expected_output": "[[5], [12], [21], [32]]", "metadata": {"programming_language": "Python", "difficulty": "Hard", "test_aspect": "Basic operations and constants"}}
{"task_id": "tensorflow/2", "description": "Combines two tensors into a 3D tensor, performs division between them, and reshapes the result into a specified shape.", "code": "import tensorflow as tf\n\ndef combine_divide_reshape_tensors(array1, array2, new_shape):\n    tensor1 = tf.constant(array1)\n    tensor2 = tf.constant(array2)\n    division_result = tf.divide(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(division_result, new_shape)\n    return reshaped_tensor.numpy()", "input": "[[2, 4], [8, 16]], [[2, 2], [4, 4]], (4, 1)", "expected_output": "[[1.], [2.], [2.], [4.]]", "metadata": {"programming_language": "Python", "difficulty": "Hard", "test_aspect": "Basic operations and constants"}}
{"task_id": "tensorflow/3", "description": "TensorFlow function to compute the square root of a given tensor and then add a constant value to it. This illustrates the use of basic mathematical operations on tensors.", "code": "import tensorflow as tf\n\n def sqrt_and_add_constant(tensor, constant):\n    sqrt_tensor = tf.math.sqrt(tensor)\n    result = tf.add(sqrt_tensor, constant)\n    return result", "input": "[16, 25, 36, 49], 5", "expected_output": "[9.0, 10.0, 11.0, 12.0]", "metadata": {"programming_language": "Python", "difficulty": "Easy", "test_aspect": "Math and array operations"}}
{"task_id": "tensorflow/4", "description": "This TensorFlow function creates a tensor from a given list of numbers, then applies a logarithmic transformation to each element, showcasing the usage of mathematical transformations in TensorFlow.", "code": "import tensorflow as tf\n\ndef log_transformation(numbers):\n    tensor = tf.constant(numbers, dtype=tf.float32)\n    log_tensor = tf.math.log(tensor)\n    return log_tensor.numpy()", "input": "[1, 2.71828, 7.38906, 20.0855]", "expected_output": "[0.0, 1.0, 2.0, 3.0]", "metadata": {"programming_language": "Python", "difficulty": "Medium", "test_aspect": "Math and array operations"}}
{"task_id": "tensorflow/5", "description": "TensorFlow function to perform matrix multiplication, followed by a computation of the determinant of the resulting matrix. This demonstrates the combination of linear algebra operations.", "code": "import tensorflow as tf\n\ndef matrix_operations(matrix1, matrix2):\n    tensor1 = tf.constant(matrix1, dtype=tf.float32)\n    tensor2 = tf.constant(matrix2, dtype=tf.float32)\n    product = tf.linalg.matmul(tensor1, tensor2)\n    determinant = tf.linalg.det(product)\n    return determinant.numpy()", "input": "[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]", "expected_output": "4.0", "metadata": {"programming_language": "Python", "difficulty": "Hard", "test_aspect": "Math and array operations"}}
{"task_id": "tensorflow/6", "description": "TensorFlow function that takes an input tensor and reshapes it into a specified shape, demonstrating tensor operation flexibility. It showcases handling of tensor shapes for data preprocessing.", "code": "import tensorflow as tf\n\ndef reshape_tensor(input_tensor, new_shape):\n    reshaped_tensor = tf.reshape(input_tensor, new_shape)\n    return reshaped_tensor", "input": "([[4, 2], [6, 4], [3, 6]], [3, 2])", "expected_output": "[[4 2],[6 4], [3 6]]", "metadata": {"programming_language": "Python", "difficulty": "Medium", "test_aspect": "Data Preprocessing"}}
{"task_id": "tensorflow/7", "description": "TensorFlow function to calculate the square of each element in a tensor and then compute the sum of all elements. This function demonstrates basic tensor operations with TensorFlow.", "code": "import tensorflow as tf\n\ndef square_sum(tensor):\n    squared_tensor = tf.square(tensor)\n    sum_of_elements = tf.reduce_sum(squared_tensor)\n    return sum_of_elements", "input": "[2, 4, 6]", "expected_output": "56", "metadata": {"programming_language": "Python", "difficulty": "Easy", "test_aspect": "Data Preprocessing"}}
{"task_id": "tensorflow/8", "description": "TensorFlow function to compute the sum of a constant tensor and a variable tensor, then convert the result to a numpy array. This demonstrates basic tensor operations including variable definition and conversion to numpy.", "code": "import tensorflow as tf\n\n def add_tensors_and_convert(tensor_vals, variable_vals):\n    tensor = tf.constant(tensor_vals)\n    variable = tf.Variable(variable_vals)\n    result = tf.add(tensor, variable)\n    return result.numpy()", "input": "[[1, 2, 3], [4, 5, 6]], [[6, 5, 4], [3, 2, 1]]", "expected_output": "[[ 7,  7,  7],\n [ 7,  7,  7]]", "metadata": {"programming_language": "Python", "difficulty": "Easy", "test_aspect": "Data Preprocessing"}}
{"task_id": "tensorflow/9", "description": "TensorFlow function that takes a list of numbers, creates a 2D tensor, performs element-wise squaring, then reshapes the tensor to a specified shape. This illustrates complex tensor operations including creation, element-wise operations, and reshaping.", "code": "import tensorflow as tf\n\n def complex_tensor_reshape_and_square(input_list, shape):\n    initial_tensor = tf.constant(input_list)\n    squared_tensor = tf.math.square(initial_tensor)\n    reshaped_tensor = tf.reshape(squared_tensor, shape)\n    return reshaped_tensor.numpy()", "input": "[[2, 3, 5, 7], [11, 13, 17, 19]], (4, 2)", "expected_output": "[[  4,   9],\n [ 25,  49],\n [121, 169],\n [289, 361]]", "metadata": {"programming_language": "Python", "difficulty": "Hard", "test_aspect": "Data preprocessing"}}
{"task_id": "tensorflow/10", "description": "TensorFlow function to create two tensors from given lists of numbers, concatenate them along a specified axis, and then compute the mean of the concatenated tensor. Demonstrates tensor creation, concatenation, and reduction.", "code": "import tensorflow as tf\n\ndef concat_tensors_and_compute_mean(list1, list2, axis=0):\n    tensor1 = tf.constant(list1)\n    tensor2 = tf.constant(list2)\n    concatenated_tensor = tf.concat([tensor1, tensor2], axis)\n    mean_val = tf.reduce_mean(concatenated_tensor)\n    return mean_val.numpy()", "input": "[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], 0", "expected_output": "6", "metadata": {"programming_language": "Python", "difficulty": "Medium", "test_aspect": "AI"}}
{"task_id": "tensorflow/11", "description": "Tensorflow function that loads two lists as tensors, performs element-wise multiplication, then reshapes the result into a 3x2 tensor, and finally performs a reduction operation to get the product of all elements.", "code": "import tensorflow as tf\n\ndef complex_operations(list1, list2, new_shape):\n    tensor1 = tf.constant(list1, dtype=tf.float32)\n    tensor2 = tf.constant(list2, dtype=tf.float32)\n    multiplied_tensor = tf.multiply(tensor1, tensor2)\n    reshaped_tensor = tf.reshape(multiplied_tensor, new_shape)\n    product_of_elements = tf.reduce_prod(reshaped_tensor)\n    return product_of_elements.numpy()", "input": "[[2, 3], [4, 5], [6, 7]], [[7, 6], [5, 4], [3, 2]], (3, 2)", "expected_output": "25401600.0", "metadata": {"programming_language": "Python", "difficulty": "Hard", "test_aspect": "AI"}}